{"version":3,"file":"orgy.devel.js","sources":["../src/js/main.js","../src/js/deferred.js","../src/js/queue.js","../src/js/cast.js","../src/js/build.js"],"names":["public","private","list","modules_exported","modules_loaded","registered_callbacks","i","config","obj","debug","export","push","define","id","data","settled","def","deferred","resolve","export_module","then","process","module","exports","value","modules","assign","tgt","arr","add","q","this","model","remove","queue","register_callback","name","fn","array_to_function","target","clone","slice","root_id","splice","root","hasOwnProperty","window","console","error","x","y","l","length","args","end","Array","parent","b","key","constructor","naive_cloner","donors","o","a","JSON","parse","stringify","msg","force_debug_mode","debug_mode","mode","document","options","_o","factory","activate","tpl","done_fired","_state","_timeout_id","error_q","then_q","done_fn","reject_q","downstream","execution_history","overwritable","timeout","remote","resolver_fired","resolver","hook_before_success","call","v","set","log","clearTimeout","_set_state","done","reject","err","unshift","catch_params","apply","arguments","rejector","r","cheerio","require","$","load","html","int","_signal_downstream","_get_state","_make_id","autonamed","auto_timeout","type","scope","setTimeout","auto_timeout_cb","msgs","search_obj_recursively","cb","receive_signal","propName","breadcrumb","r1","indexOf","convert_to_promise","url","split","pop","search","join","prom","_wrap_event","promise","warn","_wrap_timer","_wrap_xhr","ready","on","_start","Date","getTime","_end","start","elapsed","dep","required","attach_xhr","load_script","m","__dependencies","__id","__resolver","rol","head","getElementsByTagName","documentElement","node","createElement","setAttribute","onload","onreadystatechange","appendChild","onerror","req","XMLHttpRequest","open","show_messages","setRequestHeader","return_packet","readyState","status","responseText","e","send","process_result","request","get","response","body","statusCode","path","append","fs","readFile","cwd","exit","deps","upgrade","halt_resolution","upstream","dependencies","reset","check_self","from_id","values","cast","Orgy"],"mappings":"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","sourcesContent":["var public = {};\nvar private = {};\n\n\n////////////////////////////////////////\n//  PUBLIC VARIABLES\n////////////////////////////////////////\n\n\n/**\n * A directory of all promises, deferreds, and queues.\n * @type object\n */\npublic.list = {};\n\n\n/**\n * Array of all exported modules\n * @type Array\n */\npublic.modules_exported = [];\n\n\n/**\n * Index number of last module loaded in public.modules_exported\n * @type Number\n */\npublic.modules_loaded = 0;\n\n\n/** \n * Callbacks that are run on every resolved item\n * \n */\npublic.registered_callbacks = {};\n\n\n/**\n * iterator for ids\n * @type integer\n */\npublic.i = 0;\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\n/**\n * Stores document context for nodejs.\n * \n * @type string\n */\npublic.config = function(obj){\n    \n    if(obj){\n        for(var i in obj){\n            if(typeof private.config[i] !== 'undefined'){\n                private.config[i] = obj[i];\n            }\n            else{\n                return public.debug(\"Property \"+i+\" is not configurable.\")\n            }\n        }\n    }\n    \n    \n    return private.config;\n}\n\n\npublic.export = function(obj){\n    \n    public.modules_exported.push(obj);\n    return obj;\n}\n\n\n/**\n* Creates a new promise from a value and an id and automatically resolves it.\n* \n* @param {string} id\n* @param {mixed} data\n* @returns {object} resolved promise\n*/\npublic.define = function(id,data){\n\n   //ALLOW OVERWRITING OF UNSETTLED PROMISES\n   //GOOD FOR WHEN A FILE IS NOT RESOLVED-ON-LOAD \n   if(!public.list[id] || public.list[id].settled !== 1){\n       \n       //GET DEFERRED\n       var def = public.deferred({\n           id : id\n       });\n\n       //SETTLE \n       def.resolve(data);\n       \n       return def;\n   }\n   else{\n       public.debug(\"Can't define \"+id + \". Already resolved.\");\n   }\n\n};\n\n\n/**\n * Exports the value of a resolved promise to module.exports if node,\n * window.modules[deferred.id] if browser.\n * \n * @param {object} deferred\n * @returns void\n */\npublic.export_module = function(deferred){\n    \n    deferred.then(function(){\n\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            //DEFINE IN NODE\n            module.exports = deferred.value;\n        }\n        else{\n            //DEFINE IN BROWSER\n            modules[deferred.id] = deferred.value;\n        }\n        \n    });\n    \n}\n\n\n/**\n * Add/remove an upstream dependency to/from a queue. \n * \n * Can use a queue id, even for a queue that is yet to be created.\n * \n * @param {string} tgt | queue / queue id\n * @param {array}  arr | list/promise ids,dependencies\n * @param {boolean} add | add if true, remove if false\n * \n * @return {array} queue of list\n */\npublic.assign = function(tgt,arr,add){\n\n    add = (typeof add === \"boolean\") ? add : 1;\n\n    var id,q;\n    switch(true){\n        case(typeof tgt === 'object' && typeof tgt.then === 'function'):\n            id = tgt.id;\n            break;\n        case(typeof tgt === 'string'):\n            id = tgt;\n            break;\n        default:\n            return public.debug(\"Assign target must be a queue object or the id of a queue.\");\n    }\n\n    //IF TARGET ALREADY LISTED\n    if(this.list[id] && this.list[id].model === 'queue'){\n        q = this.list[id];\n        \n        //=> ADD TO QUEUE'S UPSTREAM\n        if(add){\n            q.add(arr);\n        }\n        //=> REMOVE FROM QUEUE'S UPSTREAM\n        else{\n            q.remove(arr);\n        }\n    }\n    //CREATE NEW QUEUE AND ADD DEPENDENCIES\n    else if(add){\n\n        q = public.queue(arr,{\n            id : id\n        });\n    }\n    //ERROR: CAN'T REMOVE FROM A QUEUE THAT DOES NOT EXIST\n    else{\n        public.debug(\"Cannot remove dependencies from a queue that does not exist.\");\n    }\n\n    return q;\n};\n\n\npublic.register_callback = function(name,fn){\n    public.registered_callbacks[name] = fn;\n};\n\n    \n/**\n * Converts a specially formatted array into a function.\n * \n * \n * @param {type} target\n * @returns {object}\n */\npublic.array_to_function = function(target){\n\n    //CLONE TARGET\n    var clone = target.slice(0);\n\n    var root_id = clone[0];\n    clone.splice(0,1);\n\n    var root;\n    if(public.list[root_id] && public.list[root_id].hasOwnProperty(\"value\")){\n        root = public.list[root_id].value; \n    }\n    else{\n        root = window[root_id];\n    }\n\n\n    if(typeof root === 'undefined'){\n        console.error(root_id + \" not found on window or public.list\");\n        debugger;\n    }\n\n\n    var x,y;\n    x = y = root;\n\n    //REMOVE LAST ARRAY ELEMENT (ARGS)\n    var l = clone.length;\n    var args = clone[l-1];\n\n    //POINTER TO A FUNCTION WILL HAVE AN ARRAY AS LAST ELEMENT\n    var end;\n    if(args instanceof Array){\n        end = l - 1;\n    }\n    //POINTER TO AN ARRAY WILL NOT\n    else{\n        end = l;\n    }\n\n    var parent;\n    for(var b=0; b < end; b++){\n        var key = clone[b];\n\n        if(b === end - 1 || l === 1){\n           parent = x; \n        }\n\n        if(typeof x[key] === 'undefined'){\n            console.error(\"Property '\"+key+\"' not found on object:\", x);\n            debugger;\n            return;\n        }\n        x = x[key];\n        y = x;\n    }    \n\n    return {\n        constructor : x\n        ,args : args\n        ,parent : parent\n    };\n}\n\n\n/**\n * Makes a shallow copy of an array. \n * Makes a copy of an object so long as it is JSON\n * \n * @param {array} array of donor objects, overwritten from right to left\n * @returns {object}\n */\npublic.naive_cloner = function(donors){\n    var o = {};\n    for(var a in donors){\n        for(var b in donors[a]){\n            if(donors[a][b] instanceof Array){\n                o[b] = donors[a][b].slice(0);\n            }\n            else if(typeof donors[a][b] === 'object'){\n                o[b] = JSON.parse(JSON.stringify(donors[a][b]));\n            }\n            else{\n                o[b] = donors[a][b];\n            }\n        }\n    }\n    return o;\n}\n        \n\n/**\n * Debugging method.\n * \n * @param {string|array} msg\n * @param {boolean} force_debug_mode   Forces debugger when set to true. \n * @returns {Boolean}\n */\npublic.debug = function(msg,force_debug_mode){\n    if(msg instanceof Array){\n        for(var i in msg){\n            console.error(\"ERROR-\"+i+\": \"+msg[i]);\n        }\n    }\n    else{\n        console.error(\"ERROR: \"+msg);\n    }\n    if(private.config.debug_mode == 1 || force_debug_mode){\n        debugger;\n    }\n    if(private.config.mode === 'browser'){\n        return false;\n    }\n    else{\n        //process.exit();\n    }\n}\n\n\n////////////////////////////////////////\n//  PRIVATE VARIABLES\n////////////////////////////////////////\n\n\n/**\n * Configuration values.\n * \n * @type object\n */\nprivate.config = {\n    document : null\n    ,debug_mode : 1\n    ,mode : (function(){\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            // is node\n            return \"node\"\n        }\n        else{\n            // not node\n            return \"browser\"\n        }\n    }())\n};","public.deferred = function(options){\n    \n    if(!options || typeof options.id !== 'string'){\n        return public.debug(\"Must set id.\");\n    }\n    \n    if(!public.list[options.id]){\n        //CREATE NEW INSTANCE OF DEFERRED CLASS\n        var _o = private.deferred.factory(options);\n\n        //ACTIVATE DEFERRED\n        _o = private.deferred.activate(_o);\n    }\n    else{\n        _o = public.list[options.id];\n    }\n    \n    return _o;\n};\n\n\n\nprivate.deferred = {\n    \n    factory : function(options){\n        \n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A DEFERRED OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }\n    \n    \n    ,tpl : {\n        \n        model : \"deferred\"\n\n        //A COUNTER FOR AUT0-GENERATED PROMISE ID'S\n        ,settled : 0 \n        ,id : null\n        ,done_fired : 0\n\n        /**\n         * STATE CODES:\n         * ------------------\n         * -1   => SETTLING [EXECUTING CALLBACKS]\n         *  0   => PENDING\n         *  1   => RESOLVED / FULFILLED\n         *  2   => REJECTED \n         */\n        ,_state : 0\n        ,_timeout_id : null\n        ,value : []\n\n        ,error_q : []  \n        ,then_q : []\n        ,done_fn : null\n        ,reject_q : []\n\n        //PROMISE HAS OBSERVERS BUT DOES NOT OBSERVE OTHERS\n        ,downstream : {}\n        ,execution_history : []\n        ,overwritable : 0   //WHEN TRUE, ALLOWS RE-INIT [FOR UPGRADES TO A QUEUE]          \n        ,timeout : 5000\n\n        /**\n         * REMOTE\n         * \n         * REMOTE == 1  =>  [DEFAULT] Make http request for file\n         * \n         * REMOTE == 0  =>  Read file directly from the filesystem\n         * \n         * ONLY APPLIES TO SCRIPTS RUN UNDER NODE AS BROWSER HAS NO \n         * FILESYSTEM ACCESS\n         */\n        ,remote : 1\n\n        //ADDS TO MASTER LIST. ALWAYS DO THIS UNLESS UPGRADING A PROMISE TO A QUEUE\n        ,list : 1   \n\n        ,resolve : function(value){\n\n            if(this.settled !== 0){\n                public.debug(this.id + \" can't resolve. Only unsettled promise objects resolvable.\");\n            }\n\n            //SET STATE TO SETTLEMENT IN PROGRESS\n            this._state = -1; \n\n            //SET VALUE\n            this.value  = value;\n\n            //RUN RESOLVER BEFORE PROCEEDING\n            //EVEN IF THERE IS NO RESOLVER, SET IT TO FIRED WHEN CALLED\n            if(!this.resolver_fired){\n\n                this.resolver_fired = 1;\n\n                //FIRE THE RESOLVER IF SET\n                if(this.resolver){\n                    return private.deferred.hook_before_success.call(this,this.resolver,value);\n                }\n\n            }\n\n            //Allows .then chain to be held up by new async events created as the chain executes.\n            var v,fn,l=this.then_q.length;\n            for(var i = 0; i<l; i++){     \n\n                //REMOVE fn FROM THEN QUEUE. \n                //WHEN A PROMISE OBJ IS RETURNED, AND EXECUTION STOPPED WE\n                //DONT WANT TO REPEAAT A CALL TO SAME fn\n                fn = this.then_q.splice(0,1);\n\n                //CALL fn WITH PRECEDING RESULT OR IF NONE EXISTS, THE RESOLVER VALUE \n                v = private.deferred.hook_before_success.call(this,fn[0],v || this.value);\n                //v = fn[0].call(this, v || this.value);\n                \n                //SAVE fn TO EXECUTION HISTORY\n                this.execution_history.push(fn[0]);\n\n                //IF fn RETURNED AN UNSETTLED PROMISE\n                //WAIT FOR IT TO RESOLVE BEFORE PROCEEDING\n                //AND ADD THE RESULT TO THE END OF VALUE ARRAY\n                if(typeof v !== 'undefined' && v.then){\n                    \n                    //SET THE STATE BACK TO WAITING\n                    this._state = 0;\n                    \n                    //ADD IT TO QUEUE'S UPSTREAM\n                    this.add([v]);\n                    \n                    //END RESOLUTION ATTEMPT AND WAIT FOR v TO RESOLVE\n                    return;\n                }\n                //IF V RETURNED A VALUE MAKE IT THE NEW QUEUE VALUE\n                else if(typeof v !== 'undefined'){\n                    this.value = v;\n                }\n            }\n                        \n            //SET RETURN VALUE TO A GIVEN OBJECT PROPERTY\n            if(this.set){\n                //ARRAY IS TRANSORMED INTO A PATH TO POINT TO\n                if(this.set instanceof Array){\n                    //@todo make property of private to avoid external dependency\n                    var tgt = public.array_to_function(this.set);\n                    tgt.parent[tgt.args] = this.value;\n                }\n                //OTHErWISE ASSUMED TO BE AN OBJECT PROPERTY\n                else if (typeof this.set === 'function'){\n                    this.set(this.value);\n                }\n            }\n\n            //EXECUTE ANY GLOBALLY REGISTERED CALLBACKS\n            for (var i in public.registered_callbacks){\n                console.log(\"Orgy.js executing registered callback '\"+i+\"' on \" + this.id);\n                public.registered_callbacks[i].call(this);\n            }\n           \n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SET STATE TO RESOLVED\n            private.deferred._set_state.call(this,1);\n\n            this.done();\n                \n            return this;\n        }\n\n        ,reject : function(err){\n            \n            if(!(err instanceof Array)){\n                err = [err]\n            }\n            \n            err.unshift(\"REJECTED \"+this.model+\": '\"+this.id+\"'\");\n\n            public.debug(err);\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SAVE ERROR OBJECT TO MEMORY FOR USE IN CATCH CALLBACK\n            this.catch_params = err;\n\n            //SET STATE TO REJECTED\n            private.deferred._set_state.call(this,2);\n\n            //EXECUTE REJECTION QUEUE\n            for(var i in this.reject_q){\n                this.value.push(this.reject_q[i].apply(this,arguments));\n            }\n\n            return this;\n        }\n\n        ,then : function(fn,rejector){\n\n            switch(true){\n\n                //ERROR WAS PREVIOUSLY THROWN\n                case(this._state === 2):\n                    break;\n\n                case(this.done_fired === 1):\n                    public.debug(this.id+\" can't attach .then() after .done() has fired.\");\n                    break;\n\n                case(this.settled === 1 && this._state === 1 && !this.done_fired):\n                    var r = private.deferred.hook_before_success.call(this,fn,this.value);\n                    if(typeof r !== 'undefined'){\n                        this.value = r;\n                    }\n                    break;\n\n                default:\n\n                    //PUSH CALLBACK TO THEN QUEUE\n                    this.then_q.push(fn);\n\n                    //PUSH REJECT CALLBACK TO REJECTION QUEUE\n                    if(typeof rejector === 'function'){\n                        this.reject_q.push(rejector);\n                    }\n                    break;\n            }\n\n            return this;\n        }\n        \n        ,done : function(fn){\n            \n            if(this.done_fn === null){\n                if(fn){\n                    this.done_fn = fn\n                }\n            }\n            else if(fn){\n                public.debug(\"done() can only be called once.\");\n                return;\n            }\n            \n            if(this.settled === 1 && this._state === 1 && this.done_fn){\n                this.done_fired = 1;\n                private.deferred.hook_before_success.call(this,this.done_fn,this.value);\n            }\n        }\n\n    }\n\n    \n    ///////////////////////////////////////////////////\n    //  METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * Methods to run before then(), done() \n     * \n     * @param {type} fn\n     * @returns {undefined}\n     */\n    ,hook_before_success : function(fn,arr){\n        \n        var r;\n        //IF RUNNING IN NODE AND DOCUMENT CONTEXT HAS BEEN SET, LOAD IT FOR CHEERIO\n        if(public.config().document !== null){\n            var cheerio = require('cheerio'),\n            $ = cheerio.load(public.config().document);//EXECUTE \n            r = fn(arr,this);\n            private.config.document = $.html();\n        }\n        else{\n            r = fn(arr,this);\n        }\n        \n        return r;\n    }\n    \n    \n    /**\n     * \n     * @param {type} int\n     * @returns {undefined}\n     */\n    ,_set_state : function(int){\n\n        this._state = int;\n\n        //IF RESOLVED OR REJECTED, SETTLE\n        if(int === 1 || int === 2){\n            this.settled = 1;\n        }\n\n        private.deferred._signal_downstream.call(this,this);\n    }\n    \n    \n    ,_get_state : function(){\n        return this._state;\n    }\n\n\n    ,activate : function(obj){\n\n        //SET ID\n        if(!obj.id){\n            obj.id = private.deferred._make_id(obj.model);\n            obj.autonamed = true;\n        }\n\n        //MAKE SURE NAMING CONFLICT DOES NOT EXIST\n        if(public.list[obj.id] && !public.list[obj.id].overwritable){\n            public.debug(\"Tried to overwrite \"+obj.id+\" without overwrite permissions.\");\n            return public.list[obj.id];\n        }\n        else{\n            //SAVE TO MASTER LIST\n            public.list[obj.id] = obj;\n        }\n\n        //AUTO TIMEOUT\n        private.deferred.auto_timeout.call(obj);\n\n        return obj;\n    }\n\n\n    /**\n     * Sets the automatic timeout on a promise object.\n     * \n     * @param {integer} optional. timeout\n     * @returns {Boolean}\n     */\n    ,auto_timeout : function(timeout){\n\n        this.timeout = (typeof timeout === 'undefined') ? this.timeout : timeout;\n\n        //AUTO REJECT ON timeout\n        if(!this.type || this.type !== 'timer'){\n\n            //DELETE PREVIOUS TIMEOUT IF EXISTS\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            if(typeof this.timeout === 'undefined'){\n                public.debug(this.id+\" Auto timeout this.timeout cannot be undefined.\");\n            }\n            else if (this.timeout === -1){\n                //NO AUTO TIMEOUT SET\n                return false;\n            }\n            var scope = this;\n\n            this._timeout_id = setTimeout(function(){\n                private.deferred.auto_timeout_cb.call(scope);\n            }, this.timeout);\n        }\n        else{\n            //@todo WHEN A TIMER, ADD DURATION TO ALL UPSTREAM AND LATERAL?\n        }\n        return true;\n    }\n\n\n    /**\n     * Callback for autotimeout. Declaration here avoids memory leak.\n     * \n     * @param {type} exp\n     * @returns {undefined}\n     */\n    ,auto_timeout_cb : function(){\n        \n        if(this._state !== 1){\n\n            //GET THE UPSTREAM ERROR ID\n            var msgs = [];\n            var scope = this;\n\n            var fn = function(obj){\n                if(obj._state !== 1){\n                    return obj.id\n                }\n                else{\n                    return false;\n                }\n            };\n\n            /**\n             * Run over a given object property recursively, applying callback until \n             * callback returns a non-false value.\n             */\n            var r = private.deferred.search_obj_recursively(this,'upstream',fn);\n            msgs.push(scope.id + \": rejected by auto timeout after \" + this.timeout + \"ms\");\n            msgs.push(\"Cause:\");\n            msgs.push(r);\n            return private.deferred.tpl.reject.call(this,msgs);\n            \n        }\n    }\n\n\n    ,error : function(cb){\n\n        //IF ERROR ALREADY THROWN, EXECUTE CB IMMEDIATELY\n        if(this._state === 2){\n            cb();\n        }\n        else{\n            this.error_q.push(cb);\n        }\n\n        return this;\n    }\n\n\n    ,_make_id : function(model){\n        return \"anonymous-\" + model + \"-\" + (public.i++);\n    }\n\n\n    /**\n     * Signals all downstream promises that private promise object's state has changed.\n     * \n     * \n     * @todo Since the same queue may have been assigned twice directly or \n     * indirectly via shared dependencies, make sure not to double resolve\n     * - which throws an error.\n     *     \n     * @returns {void}\n     */\n    ,_signal_downstream : function(target){\n\n        //MAKE SURE ALL DOWNSTREAM IS UNSETTLED\n        for(var i in target.downstream){\n            if(target.downstream[i].settled === 1){\n                public.debug(target.id + \" tried to settle promise \"+\"'\"+target.downstream[i].id+\"' that has already been settled.\");\n            }\n        }\n\n        //NOW THAT WE KNOW ALL DOWNSTREAM IS UNSETTLED, WE CAN IGNORE ANY\n        //SETTLED THAT RESULT AS A SIDE EFFECT TO ANOTHER SETTLEMENT\n        for (var i in target.downstream){\n            if(target.downstream[i].settled !== 1){\n                private.queue.receive_signal(target.downstream[i],target.id);\n            }\n        }\n    }\n    \n    \n    /**\n    * Run over a given object property recursively, applying callback until \n    * callback returns a non-false value.\n    * \n    * @param {object} obj      \n    * @param {string} propName          The property name of the array to bubble up\n    * @param {function} fn              The test callback to be applied to each object\n    * @param {array} breadcrumb         The breadcrumb through the chain of the first match\n    * @returns {mixed}\n    */\n    ,search_obj_recursively : function(obj,propName,fn,breadcrumb){\n      \n        if(typeof breadcrumb === 'undefined'){\n            breadcrumb = [obj.id];\n        }\n      \n        var r1;\n\n//debugger;\n        \n        for(var i in obj[propName]){\n\n            //RUN TEST\n            r1 = fn(obj[propName][i]);\n            \n            if(r1 !== false){\n            //MATCH RETURNED. RECURSE INTO MATCH IF HAS PROPERTY OF SAME NAME TO SEARCH\n                //CHECK THAT WE AREN'T CAUGHT IN A CIRCULAR LOOP\n                if(breadcrumb.indexOf(r1) !== -1){\n                    return public.debug([\n                        \"Circular condition in recursive search of obj property '\"\n                            +propName+\"'. Offending value: \"+r1\n                        ,breadcrumb\n                    ]);\n                }\n                \n                breadcrumb.push(r1);\n\n                if(obj[propName][i][propName]){\n                    return private.deferred.search_obj_recursively(obj[propName][i],propName,fn,breadcrumb);\n                }\n                \n                break;\n            }\n\n        }\n\n        return breadcrumb;\n    }\n    \n    \n    /**\n     * Converts a promise description into a promise.\n     * \n     * @param {type} obj\n     * @returns {undefined}\n     */\n    ,convert_to_promise : function(obj){\n \n        //IF ALREADY EXISTS, RETURN EXISTING\n        if(!obj.id){\n            if(obj.type === 'timer'){\n                obj.id = \"timer-\" + obj.timeout + \"-\"+public.i++;\n            }\n            else if(typeof obj.url === 'string'){\n                obj.id = obj.url.split(\"/\").pop();\n                //REMOVE .js FROM ID\n                if(obj.id.search(\".js\")!== -1){\n                    obj.id = obj.id.split(\".\");\n                    obj.id.pop();\n                    obj.id = obj.id.join(\".\");\n                }\n            }\n            else{\n                return public.debug([\"Dependency type '\"+obj.type+\"' requires id, but id undefined.\",obj]);\n            }\n        }\n\n        if(obj.type !== 'timer'){\n            //RETURN THE PROMISE IF IT ALREADY EXISTS\n            if(typeof public.list[obj.id] !== 'undefined'){\n                return public.list[obj.id];\n            }\n        }\n\n        //CONVERT DEPENDENCY TO PROMISE\n        var prom;\n        switch(true){\n\n            //EVENT\n            case(obj.type === 'event'):\n                prom = private.deferred._wrap_event(obj);\n                break;\n\n            //ALREADY A PROMISE\n            case(obj.type === 'promise' || obj.then):   \n\n                switch(true){\n                    \n                    //OBJECT PROPERTY .promise EXPECTED TO RETURN A PROMISE\n                    case(typeof obj.promise === 'function'):\n                        if(obj.scope){\n                            prom = obj.promise.call(obj.scope);\n                        }\n                        else{\n                            prom = obj.promise();\n                        }\n                        break;\n                        \n                    //OBJECT IS A PROMISE\n                    case(obj.then):\n                        prom = obj;\n                        break;\n                    \n                    //OBJECT IS A REFERENCE TO A PROMISE\n                    case(typeof obj.id === 'string'):\n                        //GET EXISTING\n                        if(public.list[obj.id]){\n                            prom = public.list[obj.id];\n                        }\n                        //CREATE DEFERRED\n                        else{\n                            console.warn(\"Promise '\"+obj.id +\"': did not exist. Auto creating new deferred.\");\n                            prom = public.deferred({\n                                id : obj.id\n                            });\n                        };\n                        break;\n                        \n                    default:\n                        \n                }\n\n                //MAKE SURE IS PROMISE\n                if(typeof prom !== 'object' || !prom.then){\n                    console.error(\"Dependency labeled as a promise did not return a promise.\");\n                    console.error(obj);\n                    debugger;\n                    return false;\n                }\n                break;\n\n            case(obj.type === 'timer'):\n                prom = private.deferred._wrap_timer(obj);\n                break;\n\n            //XHR\n            default:\n                obj.type = obj.type || \"default\";\n                prom = private.deferred._wrap_xhr(obj);\n        }\n        \n        //INDEX PROMISE BY ID FOR FUTURE REFERENCING\n        public.list[obj.id] = prom;\n\n        return prom;\n    }\n    \n    \n    /**\n     * Converts a reference to a DOM event to a promise.\n     * Resolved on first event trigger.\n     * \n     * @todo remove jquery dependency\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_event : function(obj){\n\n        var def = public.deferred({\n            id : obj.id\n        });\n        \n        var resolver = function(){\n            private.deferred.tpl.resolve.call(def,1);\n        };\n\n        //BROWSER\n        if(typeof document !== 'undefined' && typeof window !== 'undefined'){\n            \n            if(typeof $ !== 'function'){\n                var msg = 'window and document based events depend on jQuery';\n                console.error(msg);\n                debugger;\n                def.reject(msg);\n            }\n            else{\n                //For now, depend on jquery for IE8 DOMContentLoaded polyfill\n                switch(true){\n                    case(obj.id === 'ready' || obj.id === 'DOMContentLoaded'):\n                        $(document).ready(resolver);\n                        break;\n                    case(obj.id === 'load'):\n                        $(window).load(resolver);\n                        break;\n                    default:\n                        $(document).on(obj.id,\"body\",resolver);\n                }\n            }\n        }\n\n        return def;\n    }\n    \n\n    ,_wrap_timer : function(obj){\n\n        var prom = public.deferred(obj);\n        \n        (function(prom){\n            \n            var _start = new Date().getTime();      \n            setTimeout(function(){\n                var _end = new Date().getTime();\n                prom.resolve({\n                    start : _start\n                    ,end : _end\n                    ,elapsed : _end - _start\n                    ,timeout : obj.timeout\n                });\n            },obj.timeout);\n            \n        }(prom));\n        \n        return prom;\n    }\n    \n    \n    /**\n     * Creates a deferred object that depends on the loading of a file.\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_xhr : function(dep){\n        \n        \n        var required = [\"id\",\"url\"];\n        for(var i in required){\n            if(!dep[required[i]]){\n                return public.debug(\"File requests converted to promises require: \" + required[i]);\n            }\n        }\n\n        \n        //IF PROMISE FOR THIS URL ALREADY EXISTS, RETURN IT\n        if(public.list[dep.id]){\n            return public.list[dep.id];\n        }\n        \n\n        //CONVERT TO DEFERRED:\n        var deferred;\n        deferred = public.deferred(dep);\n        deferred = private.deferred.attach_xhr(deferred,dep);\n        return deferred;\n    }\n    \n    \n    ,load_script : function(deferred,data){\n\n        //CHECK IF LAST SCRIPT LOADED RETURNED A MODULE\n        if(public.modules_exported.length > public.modules_loaded){\n            \n            //GET LAST MODULE EXPORTED\n            var m = public.modules_exported[public.modules_exported.length-1];\n\n            //IF RESOLVER EXISTS, LOAD ONCE RESOLVED\n            if(m.__dependencies instanceof Array){\n                \n                //AUTO SET ID PROPERTY ON MODULE\n                m.__id = deferred.id;\n                \n                public.queue(m.__dependencies || [],{\n                    id : m.__id\n                    ,resolver : function(){\n                        m.__resolver.call(m,deferred,deferred.value);\n                    }\n                });\n            }\n            else{\n                //ELSE RESOLVE NOW\n                deferred.resolve(m)\n            }\n\n            //INCREMENT MODULES LOADED\n            public.modules_loaded ++;\n        }\n        else{\n            \n            deferred.resolve(data);\n        }\n        \n    }\n    \n    \n    /**\n     *    \n     * \n     * @param {type} deferred\n     * @param {type} dep\n     * \n     * dep:\n     * =========\n     *                  \n     * <fs> boolean. Filesystem. Whether to loda the file from server filesytem or via http server\n     *                  \n     * @returns {unresolved}\n     */\n    ,attach_xhr : function(deferred,dep){\n\n        //DEFAULT ALL TO RESOLVE-ON-LOAD\n        dep.rol = (typeof dep.rol !== 'undefined') ? dep.rol : 1;\n\n        //BROWSER\n        if(typeof process !== 'object' || process + '' !== '[object process]'){\n            \n            this.head = this.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\n            switch(true){\n\n                case(dep.type==='css' || dep.type==='link'):\n\n                    var node = document.createElement(\"link\");\n                    node.setAttribute(\"href\",dep.url);\n                    node.setAttribute(\"type\",\"text/css\");\n                    node.setAttribute(\"rel\",\"stylesheet\");\n                    (function(){\n                        node.onload = node.onreadystatechange = function(){\n                           deferred.resolve(node);\n                       };\n                    }(node));\n                    this.head.appendChild(node);\n                    break;\n\n                case(dep.type==='script'):\n                    \n                    var node = document.createElement(\"script\");\n                    node.type = 'text/javascript';\n                    node.setAttribute(\"src\",dep.url);\n                    node.setAttribute(\"id\",dep.id);\n                    node.onerror = function(){\n                        deferred.reject(\"Failed to load path: \" + dep.url);\n                    };\n                    \n                    (function(node){\n                        node.onload = node.onreadystatechange = function(){\n                            private.deferred.load_script(deferred,node);\n                        };\n                    }(node))\n                    \n                    //put scripts before <base> elements, after <meta>\n                    this.head.appendChild(node);\n                    break;\n\n                case(dep.type==='json'):\n                default:\n                    \n                    var r;\n                    var req = new XMLHttpRequest();\n                    req.open('GET', dep.url, true);\n\n                    if(typeof dep.show_messages !== 'undefined'){\n                        req.setRequestHeader('show-messages', dep.show_messages);\n                    }\n                    if(typeof dep.return_packet !== 'undefined'){\n                        req.setRequestHeader('return-packet', dep.return_packet);\n                    }\n\n                    req.onreadystatechange = function() {\n                        if (req.readyState === 4) {\n                            if(req.status === 200){\n                                r = req.responseText;\n                                if(dep.type === 'json'){\n                                    try{\n                                        r = JSON.parse(r);\n                                    }\n                                    catch(e){\n                                        public.debug([\"Could not decode JSON\",dep.url,r]);\n\n                                    }\n                                }\n                                deferred.resolve(r);\n                            }\n                            else{\n                                deferred.reject(\"Error loading \"+dep.url);\n                            }\n                        }\n                    };\n                    req.send(null);\n            }\n        }\n        //NODEJS\n        else{\n\n            function process_result(deferred,data,dep){\n\n                switch(true){\n\n                    case(dep.type==='script'):\n                        private.deferred.load_script(deferred,data);\n                        break;\n\n                    case(dep.type === 'json'):\n                        data = JSON.parse(data);\n                        deferred.resolve(data);\n                        break;\n                        \n                    default:\n                        deferred.resolve(data);\n                        \n                }\n            }\n            \n            \n            if(dep.remote){\n                var request = require('request');\n                request.get(dep.url, function (error, response, body) {\n                    if (!error && response.statusCode == 200) {\n                        process_result(deferred,body,dep);\n                    }\n                });\n\n            }\n            else{\n                \n                var path = dep.url;\n\n                //DON'T GET SCRIPTS AS TEXT\n                if(dep.type === 'script'){\n                    var data = require(path);\n                    private.deferred.load_script(deferred,data);\n                }\n                //DON'T GET CSS, JUST ADD NODE\n                else if(dep.type === 'css'){\n                    \n                    if(private.config.document !== null){\n                        var cheerio = require('cheerio');\n                        var $ = cheerio.load(private.config.document);\n                        var node = $('head').append('<link rel=\"stylesheet\" href=\"'+dep.url+'\" type=\"text/css\" />');\n                        private.config.document = $.html();\n                        deferred.resolve(node);\n                    }\n                    else{\n                        return public.debug([dep.url,\"Must pass html document to Orgy.config() before attempting to add DOM nodes [i.e. css] as dependencies.\"]);\n                    }\n                }\n                else{\n                    \n                    var fs = require('fs');\n\n                    (function(deferred,dep){\n                        \n                        fs.readFile(path, 'utf8', function (err, data) {\n\n                            if (err){\n                                public.debug([\"File \" + dep.url + \" not found @ local path '\" + path +\"'\",\"CWD: \"+cwd]);\n                                process.exit();\n                            }\n\n                            process_result(deferred,data,dep);\n                        });\n\n                    }(deferred,dep));\n                    \n                }\n                \n            }\n\n        }\n        \n        return deferred;\n    }\n};","public.queue = function(deps,options){\n\n    var _o;\n    if(!(deps instanceof Array)){\n        return public.debug(\"Queue dependencies must be an array.\");\n    }\n    \n    if(!options || !options.id){\n        return public.debug(\"Queues require an id.\");\n    }\n    \n    //DOES NOT ALREADY EXIST\n    if(!public.list[options.id]){\n        \n        //CREATE NEW QUEUE OBJECT\n        var _o = private.queue.factory(options);\n\n        //ACTIVATE QUEUE\n        _o = private.queue.activate(_o,options,deps);\n\n    }\n    //ALREADY EXISTS\n    else {\n        \n        _o = public.list[options.id];\n        \n        if(_o.model !== 'queue'){\n        //MATCH FOUND BUT NOT A QUEUE, UPGRADE TO ONE\n\n            options.overwritable = 1;\n\n            _o = private.queue.upgrade(_o,options,deps);\n        }\n        else{\n            \n            //OVERWRITE ANY EXISTING OPTIONS\n            for(var i in options){\n                _o[i] = options[i];\n            }\n            \n            //ADD ADDITIONAL DEPENDENCIES IF NOT RESOLVED\n            if(deps.length > 0){\n                private.queue.tpl.add.call(_o,deps);\n            }\n            \n        }\n        \n        //RESUME RESOLUTION UNLESS SPECIFIED OTHERWISE\n        _o.halt_resolution = (typeof options.halt_resolution !== 'undefined') ?\n        options.halt_resolution : 0;\n    }\n    \n    return _o;\n};\n\n\nprivate.queue = {\n    \n    \n    factory : function(options){\n\n        //CREATE A NEW QUEUE OBJECT\n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,private.queue.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A QUEUE OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }    \n    \n    \n    /**\n     * Template object for all queues\n     * \n     * @type object\n     */\n    ,tpl : {\n        \n        model : 'queue'\n\n\n        //SET TRUE AFTER RESOLVER FIRED\n        ,resolver_fired : 0\n\n\n        //PREVENTS A QUEUE FROM RESOLVING EVEN IF ALL DEPENDENCIES MET\n        //PURPOSE: PREVENTS QUEUES CREATED BY ASSIGNMENT FROM RESOLVING \n        //BEFORE THEY ARE FORMALLY INSTANTIATED\n        ,halt_resolution : 0\n        \n\n        //USED TO CHECK STATE, ENSURES ONE COPY\n        ,upstream : {}\n        \n        \n        //USED RETURN VALUES, ENSURES ORDER\n        ,dependencies : []\n\n\n        ///////////////////////////////////////////////////\n        //  PUBLIC METHODS\n        ///////////////////////////////////////////////////\n\n\n        /**\n         * Add list of dependencies to a queue's upstream array.\n         * \n         * The queue will resolve once all the promises in its \n         * upstream array are resolved.\n         * \n         * When public.config.debug == 1, method will test each dependency is not\n         * previously scheduled to resolve downstream from the target, in which \n         * case it would never resolve because its upstream depends on it.\n         * \n         * @param {array} array of dependencies to add\n         * @returns {array} upstream\n         */\n        ,add : function(arr){\n\n            try{\n                if(arr.length === 0) return this.upstream;\n            }\n            catch(err){\n                public.debug(err);\n            }\n\n            //IF NOT PENDING, DO NOT ALLOW TO ADD\n            if(this._state !== 0){\n                return public.debug(\"Cannot add list to queue id:'\"+this.id\n                +\"'. Queue settled/in the process of being settled.\");\n            }\n\n            for(var a in arr){\n                \n                switch(true){\n\n                    //CHECK IF ID OF EXISTING PROMISE\n                    case(typeof arr[a] === 'string'):\n                        if(!public.list[arr[a]]){\n                            return public.debug(arr[a]+\"' does not exist so cannot be added to a queue.\");\n                        }\n                        else{\n                            arr[a] = public.list[arr[a]];\n                        }\n                        break;\n\n                    //IF NOT, ATTEMPT TO CONVERT IT TO A PROMISE\n                    case(typeof arr[a] === 'object' && typeof arr[a].then !== 'function'):\n                        arr[a] = private.deferred.convert_to_promise(arr[a]);\n                        break;\n\n                    //REF IS A PROMISE.\n                    case(typeof arr[a].then === 'function'):\n                        break;\n\n                    default:\n                        console.error(\"Object could not be converted to promise.\");\n                        console.error(arr[a]);\n                        debugger;\n                        continue;\n                }\n\n                //must check the target to see if the dependency exists in its downstream\n                for(var b in this.downstream){\n                    if(b === arr[a].id){\n                        return public.debug(\"Error adding upstream dependency '\"+arr[a].id+\"' to queue\"+\" '\"+this.id+\"'.\\n Promise object for '\"+arr[a].id+\"' is scheduled to resolve downstream from queue '\"+this.id+\"' so it can't be added upstream.\");\n                    }\n                }\n\n                //ADD TO UPSTREAM, DOWNSTREAM, DEPENDENCIES\n                this.upstream[arr[a].id] = arr[a];\n                arr[a].downstream[this.id] = this;\n                this.dependencies.push(arr[a]);\n\n            }\n\n            return this.upstream;\n        }\n\n\n        /**\n         * Remove list from a queue.\n         * \n         * @param {array} arr\n         * @returns {array} array of list the queue is upstream\n         */\n        ,remove : function(arr){\n\n            //IF NOT PENDING, DO NOT ALLOW REMOVAL\n            if(this._state !== 0){\n                console.error(\"Cannot remove list from queue id:'\"+this.id+\"'. Queue settled/in the process of being settled.\");\n                return false;\n            }\n\n            for(var a in arr){\n                if(this.upstream[arr[a].id]){\n                    delete this.upstream[arr[a].id];\n                    delete arr[a].downstream[this.id];\n                }\n            }\n        }\n\n\n        /**\n         * Resets an existing,settled queue back to waiting state.\n         * Clears out the downstream.\n         * Fails if not settled.\n         * \n         * @returns {obj}\n         */\n        ,reset : function(options){\n\n            if(this.settled !== 1 || this._state !== 1){\n                public.debug(\"Can only reset a queue settled without errors.\");\n            }\n\n            options = options || {};\n\n            this.settled = 0;\n            this._state = 0; \n            this.resolver_fired = 0;\n            this.done_fired = 0;\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n            \n            //CLEAR OUT THE DOWNSTREAM\n            this.downstream = {};\n            this.dependencies = [];\n\n            //SET NEW AUTO TIMEOUT\n            private.deferred.auto_timeout.call(this,options.timeout);\n\n            //POINTLESS - WILL JUST IMMEDIATELY RESOLVE SELF\n            //this.check_self()\n\n            return this;\n        }\n        \n        \n        /**\n         * Cauaes a queue to look over its dependencies and see if it \n         * can be resolved.\n         * \n         * This is done automatically by each dependency that loads,\n         * so is not needed unless:\n         * \n         * -debugging\n         * \n         * -the queue has been reset and no new\n         * dependencies were since added.\n         * \n         * @returns {int} State of the queue.\n         */\n        ,check_self : function(){\n            private.queue.receive_signal(this,this.id);\n            return this._state;\n        }\n    }\n    \n    \n    ///////////////////////////////////////////////////\n    //  PRIVATE METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * Activates a queue object.\n     * \n     * @param {object} o\n     * @param {object} options\n     * @param {array} deps\n     * @returns {object} queue\n     */\n    ,activate : function(o,options,deps){\n        \n        //ACTIVATE AS A DEFERRED\n        o = private.deferred.activate(o);\n\n        //ADD ANY DEFERREDS TO QUEUE\n        private.queue.tpl.add.call(o,deps);\n\n        //SEE IF CAN BE IMMEDIATELY RESOLVED BY CHECKING UPSTREAM\n        private.queue.receive_signal(o,o.id);\n        \n        //ASSIGN THIS QUEUE UPSTREAM TO OTHER QUEUES\n        if(o.assign){\n            for(var a in o.assign){\n                public.assign(o.assign[a],[o],true);\n            }\n        }\n        \n        return o;\n    }\n    \n    \n    /**\n    * A \"signal\" here causes a queue to look through each item in its upstream and \n    * check to see if all are resolved. \n    * \n    * Signals can only be received by a queue itself or a promise/deferred/queue\n    * in its upstream.\n    * \n    * @param {string} from_id\n    * @returns {void}\n    */\n    ,receive_signal : function(target,from_id){\n\n        if(target.halt_resolution === 1) return;\n\n       //MAKE SURE THE SIGNAL WAS FROM A PROMISE BEING LISTENED TO\n       //BUT ALLOW SELF STATUS CHECK\n       if(from_id !== target.id && !target.upstream[from_id]){\n           console.error(from_id + \" can't signal \" + target.id + \" because not in upstream.\");\n           debugger;\n           return;\n       }\n       //RUN THROUGH QUEUE OF OBSERVING PROMISES TO SEE IF ALL DONE\n       else{\n           var status = 1;\n           for(var i in target.upstream){\n               //SETS STATUS TO 0 IF ANY OBSERVING HAVE FAILED, BUT NOT IF PENDING OR RESOLVED\n               if(target.upstream[i]._state !== 1) {\n                   status = target.upstream[i]._state;\n                   break;\n               }\n           }\n       }\n\n       //RESOLVE QUEUE IF UPSTREAM FINISHED\n       if(status === 1){\n           \n            //GET RETURN VALUES PER DEPENDENCIES, WHICH SAVES ORDER AND \n            //REPORTS DUPLICATES\n            var values = [];\n            for(var i in target.dependencies){\n                values.push(target.dependencies[i].value);\n            }\n\n            private.deferred.tpl.resolve.call(target,values);\n       }\n\n       if(status === 2){\n           var err = [\n               target.id+\" dependency '\"+target.upstream[i].id + \"' was rejected.\"\n               ,target.upstream[i].arguments\n           ];\n           private.deferred.tpl.reject.apply(target,err);\n       }\n    }\n\n\n    /**\n    * Upgrades a promise object to a queue.\n    * \n    * @param {object} prom\n    * @param {object} options\n    * @param {array} dependencies\n    * @returns {object} queue object\n    */\n    ,upgrade : function(obj,options,deps){\n\n        if(obj.settled !== 0 || (obj.model !== 'promise' && obj.model !== 'deferred')){\n            return public.debug('Can only upgrade unsettled promise or deferred into a queue.');\n        }\n        \n       //GET A NEW QUEUE OBJECT AND MERGE IN\n        var _o = public.naive_cloner([\n            private.queue.tpl\n            ,options\n        ]);\n        \n        for(var i in _o){\n           obj[i] = _o[i];\n        }\n        \n        delete _o;\n\n        //CREATE NEW INSTANCE OF QUEUE\n        obj = private.queue.activate(obj,options,deps);\n\n        //RETURN QUEUE OBJECT\n        return obj;\n    }\n    \n};","public.cast = function(obj){\n            \n    var required = [\"then\",\"error\",\"id\"];\n    for(var i in required){\n        if(!obj[required[i]]){\n            return public.debug(\"Castable objects require: \" + required[i]);\n        }\n    }\n\n    //GET A BLANK DEFERRED TO PLAY WITH\n    var deferred = public.deferred({\n        id : obj.id\n    });\n\n    //CREATE RESOLVER [ASYNC]\n    var resolver = function(){\n        deferred.resolve.call(deferred,arguments[0]);\n    };\n\n    //SET RESOLVER\n    obj.then(resolver);\n\n    //CREATE REJECTOR [ASYNC]\n    var err = function(err){\n        deferred.reject(err);\n    };\n\n    //SET REJECTOR\n    obj.error(err);\n\n    //RETURN THE DEFERRED\n    return deferred;\n}\n        ","if(typeof process === 'object' && process + '' === '[object process]'){\n    // is node\n    module.exports = public;\n}\nelse{\n    // not node\n    Orgy = public;\n}"]}