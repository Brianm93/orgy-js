{"version":3,"file":"orgy.devel.js","sources":["?","../src/js/main.js","../src/js/deferred.js","../src/js/deferred.tpl.js","../src/js/queue.js","../src/js/cast.js","../src/js/build.js"],"names":["exports","global","public","private","list","modules_exported","modules_loaded","registered_callbacks","i","config","autopath","document","debug_mode","mode","process","obj","debug","define","id","data","def","settled","__dependencies","call","__id","queue","__ui","_is_orgy_module","resolver","__resolver","bind","deferred","resolve","assign","tgt","arr","add","q","then","this","model","remove","register_callback","req","array_to_function","target","clone","slice","pathstr","join","root_id","splice","root","hasOwnProperty","value","window","console","error","x","y","l","length","args","end","Array","parent","b","key","constructor","naive_cloner","donors","o","a","JSON","parse","stringify","msg","origin_stack","log","exit","ss","Error","stack","split","trim","location","protocol","options","_o","factory","activate","tpl","settle","timeout_id","clearTimeout","set_state","callbacks","hooks","onComplete","train","push","run_train","done","pause_on_deferred","param","r","caboose","onBefore","last","shift","execution_history","thenables","fn","t","int","state","signal_downstream","get_state","overwritable","auto_timeout","timeout","type","scope","setTimeout","auto_timeout_cb","msgs","search_obj_recursively","reject","cb","reject_q","make_id","downstream","receive_signal","propName","breadcrumb","r1","indexOf","convert_to_promise","url","pop","search","prom","_wrap_event","warn","promise","_wrap_timer","_wrap_xhr","$","ready","load","on","_start","Date","getTime","_end","start","elapsed","dep","required","attach_xhr","Orgy","replace","head","getElementsByTagName","documentElement","node","createElement","setAttribute","onload","onreadystatechange","onerror","appendChild","reeject","XMLHttpRequest","open","show_messages","setRequestHeader","return_packet","readyState","status","responseText","e","send","process_result","remote","request","require","get","response","body","statusCode","append","fs","readFile","err","cwd","done_fired","callback_states","resolver_fired","unshift","rejector","fn2","halt_resolution","upstream","dependencies","reset","check_self","deps","upgrade","from_id","values","arguments","apply","cast","module"],"mappings":"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","sourcesContent":[null,"var public = {};\nvar private = {};\n\n\n////////////////////////////////////////\n//  PUBLIC VARIABLES\n////////////////////////////////////////\n\n\n/**\n * A directory of all promises, deferreds, and queues.\n * @type object\n */\npublic.list = {};\n\n\n/**\n * Array of all exported modules\n * @type Array\n */\npublic.modules_exported = [];\n\n\n/**\n * Index number of last module loaded in public.modules_exported\n * @type Number\n */\npublic.modules_loaded = 0;\n\n\n/** \n * Callbacks that are run on every resolved item\n * \n */\npublic.registered_callbacks = {};\n\n\n/**\n * iterator for ids\n * @type integer\n */\npublic.i = 0;\n\n\n////////////////////////////////////////\n//  PRIVATE VARIABLES\n////////////////////////////////////////\n\n\n/**\n * Configuration values.\n * \n * @type object\n */\nprivate.config = {\n    \n    autopath : ''\n    ,document : null\n    ,debug_mode : 1\n    ,mode : (function(){\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            // is node\n            return \"node\"\n        }\n        else{\n            // not node\n            return \"browser\"\n        }\n    }())\n};\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\n/**\n * Configuration setter.\n * \n * @type string\n */\npublic.config = function(obj){\n    \n    if(obj){\n        for(var i in obj){\n            if(typeof private.config[i] !== 'undefined'){\n                private.config[i] = obj[i];\n            }\n            else{\n                return public.debug(\"Property '\"+i+\"' is not configurable.\");\n            }\n        }\n    }\n    \n    \n    return private.config;\n}\n\n\n/**\n* Creates a new promise from a value and an id and automatically resolves it.\n* \n*     obj.__has_ui = (typeof obj.__has_ui !== 'undefined') ? false : obj.__has_ui;\n* \n* @param {string} id\n* @param {mixed} data\n* @returns {object} resolved promise\n*/\npublic.define = function(id,data){\n    \n    var def;\n\n    //MAKE SURE NOT TRYING TO RESOLVE EXISTING DEF\n    if(public.list[id] && public.list[id].settled === 1){\n        return public.debug(\"Can't define \" + id + \". Already resolved.\");\n    }\n\n    data.__dependencies = (typeof data.__dependencies === 'function') \n        ? data.__dependencies.call(data) \n        : data.__dependencies;\n    \n    //ORGY MODULE HANDLING\n    if(typeof data === 'object' && typeof data.__id === 'string'){\n        \n        def = public.queue(data.__dependencies || [],{\n            id : id\n            ,__ui : (typeof data.__ui !== 'undefined') ? data.__ui : 1\n            ,_is_orgy_module : 1\n            ,resolver : (typeof data.__resolver === 'function')\n            ? data.__resolver.bind(data) : null\n        });\n    }\n    else{\n\n        //CREATE/GET DEFERRED\n        def = public.deferred({\n           id : id\n        });\n\n        //SETTLE \n        def.resolve(data);\n       \n    }\n    \n    return def;\n};\n\n\n/**\n * Add/remove an upstream dependency to/from a queue. \n * \n * Can use a queue id, even for a queue that is yet to be created.\n * \n * @param {string} tgt | queue / queue id\n * @param {array}  arr | list/promise ids,dependencies\n * @param {boolean} add | add if true, remove if false\n * \n * @return {array} queue of list\n */\npublic.assign = function(tgt,arr,add){\n\n    add = (typeof add === \"boolean\") ? add : 1;\n\n    var id,q;\n    switch(true){\n        case(typeof tgt === 'object' && typeof tgt.then === 'function'):\n            id = tgt.id;\n            break;\n        case(typeof tgt === 'string'):\n            id = tgt;\n            break;\n        default:\n            return public.debug(\"Assign target must be a queue object or the id of a queue.\",this);\n    }\n\n    //IF TARGET ALREADY LISTED\n    if(this.list[id] && this.list[id].model === 'queue'){\n        q = this.list[id];\n        \n        //=> ADD TO QUEUE'S UPSTREAM\n        if(add){\n            q.add(arr);\n        }\n        //=> REMOVE FROM QUEUE'S UPSTREAM\n        else{\n            q.remove(arr);\n        }\n    }\n    //CREATE NEW QUEUE AND ADD DEPENDENCIES\n    else if(add){\n\n        q = public.queue(arr,{\n            id : id\n        });\n    }\n    //ERROR: CAN'T REMOVE FROM A QUEUE THAT DOES NOT EXIST\n    else{\n        public.debug(\"Cannot remove dependencies from a queue that does not exist.\",this);\n    }\n\n    return q;\n};\n\n\npublic.register_callback = function(obj){\n    \n    var req = ['id','fn'];\n    for(var i in req){\n        if(typeof obj[req[i]] === 'undefined'){\n            return public.debug(\"registered callbacks require property: \"+req[i]);\n        }\n    }\n    \n    public.registered_callbacks[obj.id] = obj;\n};\n\n    \n/**\n * Converts a specially formatted array into a function.\n * \n * \n * @param {type} target\n * @returns {object}\n */\npublic.array_to_function = function(target){\n\n    //CLONE TARGET\n    var clone = target.slice(0);\n    \n    //Make a string copy for debugging.\n    var pathstr = clone.join(\".\");\n\n    var root_id = clone[0];\n    clone.splice(0,1);\n\n    var root;\n    if(public.list[root_id] && public.list[root_id].hasOwnProperty(\"value\")){\n        root = public.list[root_id].value; \n    }\n    else{\n        root = window[root_id];\n    }\n\n\n    if(typeof root === 'undefined'){\n        console.error(root_id + \" not found on window or public.list\");\n        debugger;\n    }\n\n\n    var x,y;\n    x = y = root;\n\n    //REMOVE LAST ARRAY ELEMENT (ARGS)\n    var l = clone.length;\n    var args = clone[l-1];\n\n    //POINTER TO A FUNCTION WILL HAVE AN ARRAY AS LAST ELEMENT\n    var end;\n    if(args instanceof Array){\n        end = l - 1;\n    }\n    //POINTER TO AN ARRAY WILL NOT\n    else{\n        end = l;\n    }\n\n    var parent;\n    for(var b=0; b < end; b++){\n        var key = clone[b];\n\n        if(b === end - 1 || l === 1){\n           parent = x; \n        }\n\n        if(typeof x[key] === 'undefined'){\n            return public.debug([\n                \"Property '\"+key+\"' undefined @\"\n                ,pathstr\n                ,clone\n            ]);\n        }\n        x = x[key];\n        y = x;\n    }    \n\n    return {\n        constructor : x\n        ,args : args\n        ,parent : parent\n    };\n}\n\n\n/**\n * Makes a shallow copy of an array. \n * Makes a copy of an object so long as it is JSON\n * \n * @param {array} array of donor objects, overwritten from right to left\n * @returns {object}\n */\npublic.naive_cloner = function(donors){\n    var o = {};\n    for(var a in donors){\n        for(var b in donors[a]){\n            if(donors[a][b] instanceof Array){\n                o[b] = donors[a][b].slice(0);\n            }\n            else if(typeof donors[a][b] === 'object'){\n                o[b] = JSON.parse(JSON.stringify(donors[a][b]));\n            }\n            else{\n                o[b] = donors[a][b];\n            }\n        }\n    }\n    return o;\n}\n        \n\n/**\n * Debugging method.\n * \n * @param {string|array} msg\n * @param {boolean} force_debug_mode   Forces debugger when set to true. \n * @returns {Boolean}\n */\npublic.debug = function(msg,def){\n    \n    if(! (msg instanceof Array)){\n        msg = [msg];\n    }\n\n    for(var i in msg){\n        if(typeof msg[i] === 'string'){\n            console.error(\"ERROR-\"+i+\": \"+msg[i]);\n        }\n        else{\n            console.error(msg[i]);\n        }\n    }\n\n    //if we saved a stack trace to connect async, push it\n    if(def && def.origin_stack){\n        console.log(\"Backtrace:\");\n        for(var i in def.origin_stack){\n          console.log(def.origin_stack[i]);\n        }\n    }\n    \n    debugger;\n    \n    if(private.config.mode === 'browser'){\n        return false;\n    }\n    else{\n        process.exit();\n    }\n}\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\nprivate.origin_stack = function(ss){\n\n    var l = new Error().stack.split(ss)[1].trim();\n\n    if(private.config.mode == 'browser'){\n        l = l.split(\"//\");\n        l = l.slice(1);\n        for(var i in l){\n          l[i] = window.location.protocol + \"//\" + l[i].split(\" \")[0];\n        }//[2].split(\" \")[0].trim();\n    }\n    else{\n        l = '/' + l.split(\"(/\")[2].split(\" \")[0].trim().slice(0,-1);\n    }\n    \n    return l;\n};","/**\n * Deferred class.\n * \n */\n\npublic.deferred = {};\nprivate.deferred = {};\n\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\npublic.deferred = function(options){\n    \n    options = options || {};\n    \n    if(options.id && public.list[options.id]){\n        _o = public.list[options.id];\n    }\n    else{\n        //CREATE NEW INSTANCE OF DEFERRED CLASS\n        var _o = private.deferred.factory(options);\n\n        //ACTIVATE DEFERRED\n        _o = private.deferred.activate(_o);\n    }\n    \n    return _o;\n};\n\n\n////////////////////////////////////////\n//  PRIVATE METHODS\n////////////////////////////////////////\n\n\nprivate.deferred.factory = function(options){\n        \n    var _o = public.naive_cloner([\n        private.deferred.tpl\n        ,options\n    ]);\n    \n    //Save backtrace for async debugging\n    _o.origin_stack = private.origin_stack('public.deferred');\n\n    //if no id, use origin\n    if(typeof options.id === 'undefined'){\n        _o.id = _o.origin_stack[_o.origin_stack.length -1];\n    }\n    \n    return _o;\n};\n    \n\nprivate.deferred.settle = function(def){\n    \n    //REMOVE AUTO TIMEOUT TIMER\n    if(def.timeout_id){\n        clearTimeout(def.timeout_id);\n    }\n    \n    \n    //SET RETURN VALUE TO A GIVEN OBJECT PROPERTY\n/*\n    if(def.set){\n        //ARRAY IS TRANSORMED INTO A PATH TO POINT TO\n        if(def.set instanceof Array){\n            //@todo make property of private to avoid external dependency\n            var tgt = public.array_to_function(def.set);\n            tgt.parent[tgt.args] = def.value;\n        }\n        //OTHErWISE ASSUMED TO BE AN OBJECT PROPERTY\n        else if (typeof def.set === 'function'){\n            def.set(def.value);\n        }\n    }\n*/\n    \n    //Set state to resolved\n    private.deferred.set_state(def,1);\n    \n    \n    //Add done as a callback to then chain completion.\n    def.callbacks.then.hooks.onComplete.train.push(function(){\n\n        //Run done\n        private.deferred.run_train(\n            def\n            ,def.callbacks.done\n            ,def.value\n            ,{pause_on_deferred : false}\n        );\n\n    });\n    \n  \n    //Run then queue\n    private.deferred.run_train(\n        def\n        ,def.callbacks.then\n        ,def.value\n        ,{pause_on_deferred : true}\n    );\n    \n    \n    return def;\n};\n\n\n/**\n * Runs an array of functions sequentially as a partial function.\n * Each function's argument is the result of its predecessor function.\n * \n * By default, execution chain is paused when any function \n * returns an unresolved deferred. (pause_on_deferred) [OPTIONAL]\n * \n * @param {object} def  /deferred object\n * @param {object} obj  /itinerary\n *      train       {array}\n *      hooks       {object}    \n *          onBefore        {array}\n *          onComplete      {array}\n * @param {mixed} param /param to pass to first callback\n * @param {object} options\n *      pause_on_deferred   {boolean}\n *      \n * @returns {void}\n */\nprivate.deferred.run_train = function(def,obj,param,options){\n    \n    //allow previous return values to be passed down chain\n    var r = param || def.caboose || def.value;\n    \n    //onBefore event\n    if(obj.hooks && obj.hooks.onBefore.train.length > 0){\n        private.deferred.run_train(\n            def\n            ,obj.hooks.onBefore\n            ,param\n            ,{pause_on_deferred : false}\n        );\n    }\n    \n    while(obj.train.length > 0){\n        \n        //remove fn to execute\n        var last = obj.train.shift();\n        def.execution_history.push(last);\n        \n        r = def.caboose = last.call(def,def.value,def,r);\n\n        //if result is an thenable, halt execution \n        //and run unfired arr when thenable settles\n        if(options.pause_on_deferred){\n            \n            //If r is an unsettled thenable\n            if(r && r.then && r.settled !== 1){\n\n                //execute rest of this train after r resolves\n                r.callbacks.resolve.hooks.onComplete.train.push(function(){\n\n                    private.deferred.run_train(\n                        def\n                        ,obj\n                        ,param\n                        ,{pause_on_deferred : true}\n                    );\n                });\n\n                //terminate execution\n                return;\n            }\n            \n            //If is an array than contains an unsettled thenable\n            else if(r instanceof Array){\n\n                var thenables = [];\n\n                for(var i in r){\n                    \n                    if(r[i].then && r[i].settled !== 1){\n                        \n                        thenables.push(r[i]);\n           \n                        var fn = (function(t,def,obj,param){\n                    \n                            return function(){\n      \n                                //Bail if any thenables unsettled\n                                for(var i in t){\n                                    if(t[i].settled !== 1){\n                                        return;\n                                    }\n                                }\n\n                                private.deferred.run_train(\n                                    def\n                                    ,obj\n                                    ,param\n                                    ,{pause_on_deferred : true}\n                                );\n                            };\n                            \n                        })(thenables,def,obj,param);\n                        \n                        //execute rest of this train after\n                        //all thenables found in r resolve\n                        r[i].callbacks.resolve.hooks.onComplete.train.push(fn);\n\n                        //terminate execution\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    \n    //onComplete event\n    if(obj.hooks && obj.hooks.onComplete.train.length > 0){\n        private.deferred.run_train(def\n                                ,obj.hooks.onComplete\n                                ,r\n                                ,{pause_on_deferred : false});\n    }\n};\n\n\n/**\n * Sets the state of an Orgy object.\n * \n * @param {object} def\n * @param {number} int\n * @returns {void}\n */\nprivate.deferred.set_state = function(def,int){\n\n    def.state = int;\n\n    //IF RESOLVED OR REJECTED, SETTLE\n    if(int === 1 || int === 2){\n        def.settled = 1;\n    }\n\n    if(int === 1 || int === 2){\n        private.deferred.signal_downstream(def);\n    }\n};\n    \n   \n/**\n * Gets the state of an Orgy object\n * \n * @param {object} def\n * @returns {number} \n */\nprivate.deferred.get_state = function(def){\n    return def.state;\n};\n\n\nprivate.deferred.activate = function(obj){\n    \n    //MAKE SURE NAMING CONFLICT DOES NOT EXIST\n    if(public.list[obj.id] && !public.list[obj.id].overwritable){\n        public.debug(\"Tried to overwrite \"+obj.id+\" without overwrite permissions.\");\n        return public.list[obj.id];\n    }\n    else{\n        //SAVE TO MASTER LIST\n        public.list[obj.id] = obj;\n    }\n\n    //AUTO TIMEOUT\n    private.deferred.auto_timeout.call(obj);\n\n    return obj;\n};\n\n\n/**\n * Sets the automatic timeout on a promise object.\n * \n * @param {integer} timeout (optional)\n * @returns {Boolean}\n */\nprivate.deferred.auto_timeout = function(timeout){\n\n    this.timeout = (typeof timeout === 'undefined') \n    ? this.timeout : timeout;\n\n    //AUTO REJECT ON timeout\n    if(!this.type || this.type !== 'timer'){\n\n        //DELETE PREVIOUS TIMEOUT IF EXISTS\n        if(this.timeout_id){\n            clearTimeout(this.timeout_id);\n        }\n\n        if(typeof this.timeout === 'undefined'){\n            public.debug(this.id+\" Auto timeout this.timeout cannot be undefined.\");\n        }\n        else if (this.timeout === -1){\n            //NO AUTO TIMEOUT SET\n            return false;\n        }\n        var scope = this;\n\n        this.timeout_id = setTimeout(function(){\n            private.deferred.auto_timeout_cb.call(scope);\n        }, this.timeout);\n    }\n    else{\n        //@todo WHEN A TIMER, ADD DURATION TO ALL UPSTREAM AND LATERAL?\n    }\n    \n    return true;\n};\n\n\n/**\n * Callback for autotimeout. Declaration here avoids memory leak.\n * \n * @returns {undefined}\n */\nprivate.deferred.auto_timeout_cb = function(){\n\n    if(this.state !== 1){\n\n        //GET THE UPSTREAM ERROR ID\n        var msgs = [];\n        var scope = this;\n\n        var fn = function(obj){\n            if(obj.state !== 1){\n                return obj.id;\n            }\n            else{\n                return false;\n            }\n        };\n\n        /**\n         * Run over a gi_qven object property recursively, \n         * applying callback until \n         * callback returns a non-false value.\n         */\n        var r = private.deferred.search_obj_recursively(this,'upstream',fn);\n        msgs.push(scope.id + \": rejected by auto timeout after \" \n                + this.timeout + \"ms\");\n        msgs.push(\"Cause:\");\n        msgs.push(r);\n        return private.deferred.tpl.reject.call(this,msgs);\n\n    }\n};\n\n\nprivate.deferred.error = function(cb){\n\n    //IF ERROR ALREADY THROWN, EXECUTE CB IMMEDIATELY\n    if(this.state === 2){\n        cb();\n    }\n    else{\n        this.reject_q.push(cb);\n    }\n\n    return this;\n};\n\n\nprivate.deferred.make_id = function(model){\n    return \"anonymous-\" + model + \"-\" + (public.i++);\n};\n\n\n/**\n * Signals all downstream promises that private promise object's state has changed.\n * \n * \n * @todo Since the same queue may have been assigned twice directly or \n * indirectly via shared dependencies, make sure not to double resolve\n * - which throws an error.\n *     \n * @param {object} target deferred/queue\n * @returns {void}\n */\nprivate.deferred.signal_downstream = function(target){\n\n    //MAKE SURE ALL DOWNSTREAM IS UNSETTLED\n    for(var i in target.downstream){\n        if(target.downstream[i].settled === 1){\n            public.debug(target.id + \" tried to settle promise \"+\"'\"+target.downstream[i].id+\"' that has already been settled.\");\n        }\n    }\n\n    //NOW THAT WE KNOW ALL DOWNSTREAM IS UNSETTLED, WE CAN IGNORE ANY\n    //SETTLED THAT RESULT AS A SIDE EFFECT TO ANOTHER SETTLEMENT\n    for (var i in target.downstream){\n        if(target.downstream[i].settled !== 1){\n            private.queue.receive_signal(target.downstream[i],target.id);\n        }\n    }\n};\n    \n    \n/**\n* Run over a given object property recursively, applying callback until \n* callback returns a non-false value.\n* \n* @param {object} obj      \n* @param {string} propName          The property name of the array to bubble up\n* @param {function} fn              The test callback to be applied to each object\n* @param {array} breadcrumb         The breadcrumb through the chain of the first match\n* @returns {mixed}\n*/\nprivate.deferred.search_obj_recursively = function(obj,propName,fn,breadcrumb){\n\n    if(typeof breadcrumb === 'undefined'){\n        breadcrumb = [obj.id];\n    }\n\n    var r1;\n\n    for(var i in obj[propName]){\n\n        //RUN TEST\n        r1 = fn(obj[propName][i]);\n\n        if(r1 !== false){\n        //MATCH RETURNED. RECURSE INTO MATCH IF HAS PROPERTY OF SAME NAME TO SEARCH\n            //CHECK THAT WE AREN'T CAUGHT IN A CIRCULAR LOOP\n            if(breadcrumb.indexOf(r1) !== -1){\n                return public.debug([\n                    \"Circular condition in recursive search of obj property '\"\n                        +propName+\"' of object \"\n                        +((typeof obj.id !== 'undefined') ? \"'\"+obj.id+\"'\" : '')\n                        +\". Offending value: \"+r1\n                    ,(function(){\n                        breadcrumb.push(r1);\n                        return breadcrumb.join(\" [depends on]=> \");\n                    })()\n                ]);\n            }\n\n            breadcrumb.push(r1);\n\n            if(obj[propName][i][propName]){\n                return private.deferred.search_obj_recursively(obj[propName][i],propName,fn,breadcrumb);\n            }\n\n            break;\n        }\n\n    }\n\n    return breadcrumb;\n};\n    \n    \n/**\n * Converts a promise description into a promise.\n * \n * @param {type} obj\n * @returns {undefined}\n */\nprivate.deferred.convert_to_promise = function(obj){\n\n    //IF ALREADY EXISTS, RETURN EXISTING\n    if(!obj.id){\n\n        if(obj.type === 'timer'){\n            obj.id = \"timer-\" + obj.timeout + \"-\"+public.i++;\n        }\n        else if(typeof obj.url === 'string'){\n            obj.id = obj.url.split(\"/\").pop();\n            //REMOVE .js FROM ID\n            if(obj.id.search(\".js\")!== -1){\n                obj.id = obj.id.split(\".\");\n                obj.id.pop();\n                obj.id = obj.id.join(\".\");\n            }\n        }\n        else{\n            return public.debug([\n                \"Dependencies without a 'url' property require 'id' property be set.\"\n                ,\"'\"+obj.type+\"' id undefined.\"\n                ,obj\n            ]);\n        }\n    }\n\n    if(obj.type !== 'timer'){\n        //RETURN THE PROMISE IF IT ALREADY EXISTS\n        if(typeof public.list[obj.id] !== 'undefined'){\n            return public.list[obj.id];\n        }\n    }\n\n    //CONVERT DEPENDENCY TO PROMISE\n    var prom;\n    switch(true){\n\n        //EVENT\n        case(obj.type === 'event'):\n            prom = private.deferred._wrap_event(obj);\n            break;\n\n        //ALREADY A PROMISE\n        case(obj.type === 'deferred'):\n        case(obj.type === 'promise' || obj.then):   \n\n            switch(true){\n\n                //OBJECT IS A REFERENCE TO A PROMISE\n                case(typeof obj.id === 'string'):\n                    console.warn(\"Promise '\"+obj.id +\"': did not exist. Auto creating new deferred.\");\n                    prom = public.deferred({\n                        id : obj.id\n                    });\n                    break;\n\n                //OBJECT PROPERTY .promise EXPECTED TO RETURN A PROMISE\n                case(typeof obj.promise === 'function'):\n                    if(obj.scope){\n                        prom = obj.promise.call(obj.scope);\n                    }\n                    else{\n                        prom = obj.promise();\n                    }\n                    break;\n\n                //OBJECT IS A PROMISE\n                case(obj.then):\n                    prom = obj;\n                    break;\n\n                default:\n\n            }\n\n            //MAKE SURE IS PROMISE\n            if(typeof prom !== 'object' || !prom.then){\n                return public.debug(\"Dependency labeled as a promise did not return a promise.\",obj);\n            }\n            break;\n\n        case(obj.type === 'timer'):\n            prom = private.deferred._wrap_timer(obj);\n            break;\n\n        //XHR\n        default:\n            obj.type = obj.type || \"default\";\n            prom = private.deferred._wrap_xhr(obj);\n    }\n\n    //INDEX PROMISE BY ID FOR FUTURE REFERENCING\n    public.list[obj.id] = prom;\n\n    return prom;\n};\n    \n    \n/**\n * Converts a reference to a DOM event to a promise.\n * Resolved on first event trigger.\n * \n * @todo remove jquery dependency\n * \n * @param {object} obj\n * @returns {object} deferred object\n */\nprivate.deferred._wrap_event = function(obj){\n\n    var def = public.deferred({\n        id : obj.id\n    });\n\n    //BROWSER\n    if(typeof document !== 'undefined' && typeof window !== 'undefined'){\n\n        if(typeof $ !== 'function'){\n            var msg = 'window and document based events depend on jQuery';\n            def.reject(msg);\n        }\n        else{\n            //For now, depend on jquery for IE8 DOMContentLoaded polyfill\n            switch(true){\n                case(obj.id === 'ready' || obj.id === 'DOMContentLoaded'):\n                    $(document).ready(function(){\n                        def.resolve(1);\n                    });\n                    break;\n                case(obj.id === 'load'):\n                    $(window).load(function(){\n                        def.resolve(1);\n                    });\n                    break;\n                default:\n                    $(document).on(obj.id,\"body\",function(){\n                        def.resolve(1);\n                    });\n            }\n        }\n    }\n\n    return def;\n};\n    \n\nprivate.deferred._wrap_timer = function(obj){\n\n    var prom = public.deferred(obj);\n\n    (function(prom){\n\n        var _start = new Date().getTime();      \n        setTimeout(function(){\n            var _end = new Date().getTime();\n            prom.resolve({\n                start : _start\n                ,end : _end\n                ,elapsed : _end - _start\n                ,timeout : obj.timeout\n            });\n        },obj.timeout);\n\n    }(prom));\n\n    return prom;\n};\n    \n    \n/**\n * Creates a deferred object that depends on the loading of a file.\n * \n * @param {object} dep\n * @returns {object} deferred object\n */\nprivate.deferred._wrap_xhr = function(dep){\n\n\n    var required = [\"id\",\"url\"];\n    for(var i in required){\n        if(!dep[required[i]]){\n            return public.debug([\n                \"File requests converted to promises require: \" + required[i]\n                ,\"Make sure you weren't expecting dependency to already have been resolved upstream.\"\n                ,dep\n            ]\n            );\n        }\n    }\n\n\n    //IF PROMISE FOR THIS URL ALREADY EXISTS, RETURN IT\n    if(public.list[dep.id]){\n        return public.list[dep.id];\n    }\n\n\n    //CONVERT TO DEFERRED:\n    var deferred;\n    deferred = public.deferred(dep);\n    deferred = private.deferred.attach_xhr(deferred,dep);\n    return deferred;\n};\n    \n    \n/**\n *    \n * \n * @param {type} deferred\n * @param {type} dep\n * \n * dep:\n * =========\n *                  \n * <fs> boolean. Filesystem. Whether to loda the file from server filesytem or via http server\n *                  \n * @returns {unresolved}\n */\nprivate.deferred.attach_xhr = function(deferred,dep){\n\n    //GET AUTOPATH\n    if(dep.url[0] === \"*\"){\n\n        var autopath = Orgy.config().autopath;\n\n        if(typeof autopath !== 'string'){\n            public.debug([\n                    \"config.autopath must be set to a string.\"\n                ]\n                ,[\n                    \"When a dependency url begins with *, it is replaced by the config property 'autopath'.\"\n            ]);\n        }\n        else{\n            dep.url = dep.url.replace(/\\*/,autopath);\n        }\n    }\n\n\n    //BROWSER\n    if(typeof process !== 'object' || process + '' !== '[object process]'){\n\n        this.head = this.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\n        switch(true){\n\n            case(dep.type==='script'):\n\n                var node = document.createElement(\"script\");\n                node.type = 'text/javascript';\n                node.setAttribute(\"src\",dep.url);\n                node.setAttribute(\"id\",dep.id);\n\n                (function(node,dep,deferred){\n\n                    node.onload = node.onreadystatechange = function(){\n                        //Do not autoresolve modules, which are\n                        //self-resolved via Orgy.export\n                        if(!deferred._is_orgy_module){\n                            deferred.resolve((typeof node.value !== 'undefined') ? node.value : node);\n                        }\n                    };\n                    node.onerror = function(){\n                        deferred.reject(\"Failed to load path: \" + dep.url);\n                    };\n                }(node,dep,deferred));\n\n                //put scripts before <base> elements, after <meta>\n                this.head.appendChild(node);\n                break;\n\n            case(dep.type==='css' || dep.type==='link'):\n\n                var node = document.createElement(\"link\");\n                node.setAttribute(\"href\",dep.url);\n                node.setAttribute(\"type\",\"text/css\");\n                node.setAttribute(\"rel\",\"stylesheet\");\n\n                if(node.onload){\n                    (function(node,dep,deferred){\n                        node.onload = node.onreadystatechange = function(){\n                           deferred.resolve(node);\n                       };\n\n                       node.onerror = function(){\n                           deferred.reeject(\"Failed to load path: \" + dep.url);\n                       };\n\n                    }(node,dep,deferred));\n\n                    this.head.appendChild(node);\n                    break;\n                }\n                else{\n                    //ADD NODE BUT MAKE XHR REQUEST TO CHECK FILE RECEIVED\n                    this.head.appendChild(node);\n                }\n\n            case(dep.type==='json'):\n            default:\n\n                var r;\n                var req = new XMLHttpRequest();\n                req.open('GET', dep.url, true);\n\n                if(typeof dep.show_messages !== 'undefined'){\n                    req.setRequestHeader('show-messages', dep.show_messages);\n                }\n                if(typeof dep.return_packet !== 'undefined'){\n                    req.setRequestHeader('return-packet', dep.return_packet);\n                }\n\n                (function(dep,deferred){\n                    req.onreadystatechange = function() {\n                        if (req.readyState === 4) {\n                            if(req.status === 200){\n                                r = req.responseText;\n                                if(dep.type === 'json'){\n                                    try{\n                                        r = JSON.parse(r);\n                                    }\n                                    catch(e){\n                                        public.debug([\n                                            \"Could not decode JSON\"\n                                            ,dep.url\n                                            ,r\n                                        ],deferred);\n                                    }\n                                }\n                                //WE WANT TO RESOLVE WITH DOM NODE FOR CSS FILES\n                                deferred.resolve(node || r);\n                            }\n                            else{\n                                deferred.reject(\"Error loading \" + dep.url);\n                            }\n                        }\n                    };\n                }(dep,deferred));\n\n                req.send(null);\n        }\n    }\n    //NODEJS\n    else{\n\n        function process_result(deferred,data,dep){\n\n            switch(true){\n\n                case(dep.type === 'json'):\n                    data = JSON.parse(data);\n                    deferred.resolve(data);\n                    break;\n\n                default:\n                    deferred.resolve(data);\n\n            }\n        }     \n\n        if(dep.remote){\n            var request = require('request');\n            request.get(dep.url, function (error, response, body) {\n                if (!error && response.statusCode == 200) {\n                    process_result(deferred,body,dep);\n                };\n            });\n\n        }\n        else{\n\n            //DON'T GET SCRIPTS AS TEXT\n            if(dep.type === 'script'){\n                var data = require(dep.url);\n\n                if(!deferred._is_orgy_module){\n                    deferred.resolve(data);\n                }\n            }\n            //DON'T GET CSS, JUST ADD NODE\n            else if(dep.type === 'css'){\n\n                if(private.config.document !== null){\n                    var node = private.config.document('head').append('<link rel=\"stylesheet\" href=\"'+dep.url+'\" type=\"text/css\" />');\n                    deferred.resolve(node);\n                }\n                else{\n                    return public.debug([\n                        dep.url\n                        ,\"Must pass html document to Orgy.config() before attempting to add DOM nodes [i.e. css] as dependencies.\"\n                    ],deferred);\n                }\n            }\n            else{\n\n                var fs = require('fs');\n\n                (function(deferred,dep){\n\n                    fs.readFile(dep.url, 'utf8', function (err, data) {\n\n                        if (err){\n                            public.debug([\n                                \"File \" + dep.url + \" not found @ local dep.url '\" + dep.url +\"'\"\n                                ,\"CWD: \"+process.cwd()\n                            ],deferred);\n                            \n                            process.exit();\n                        }\n\n                        process_result(deferred,data,dep);\n                    });\n\n                }(deferred,dep));\n\n            }\n        }\n    }\n\n    return deferred;\n};","/**\n * Default properties for all deferred objects.\n * \n */\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\nprivate.deferred.tpl = {};\n\nprivate.deferred.tpl.id = null;\n\n//A COUNTER FOR AUT0-GENERATED PROMISE ID'S\nprivate.deferred.tpl.settled = 0;\n\n/**\n * STATE CODES:\n * ------------------\n * -1   => SETTLING [EXECUTING CALLBACKS]\n *  0   => PENDING\n *  1   => RESOLVED / FULFILLED\n *  2   => REJECTED \n */\nprivate.deferred.tpl.state = 0;\n\nprivate.deferred.tpl.value = [];\n\n//The most recent value generated by the then->done chain. \nprivate.deferred.tpl.caboose = null;\n\nprivate.deferred.tpl.model = \"deferred\";\n\nprivate.deferred.tpl.done_fired = 0;\n\nprivate.deferred.tpl._is_orgy_module = 0;\n\nprivate.deferred.tpl.timeout_id = null;\n\nprivate.deferred.tpl.callback_states = {\n    resolve : 0\n    ,then : 0\n    ,done : 0\n    ,reject : 0\n};\n\n/**\n * Self executing function to initialize callback event\n * list.\n * \n * Returns an object with the same propertyNames as \n * private.deferred.tpl.callback_states: adding boilerplate\n * properties for each\n * \n * @returns {object}\n */\nprivate.deferred.tpl.callbacks = (function(){\n    \n    var o = {};\n    \n    for(var i in private.deferred.tpl.callback_states){\n        o[i] = {\n            train : []\n            ,hooks : {\n                onBefore : {\n                    train : []\n                }\n                ,onComplete : {\n                    train : []\n                }\n            }\n        };\n    }\n    \n    return o;\n})();\n    \n//PROMISE HAS OBSERVERS BUT DOES NOT OBSERVE OTHERS\nprivate.deferred.tpl.downstream = {};\n\nprivate.deferred.tpl.execution_history = [];\n\n//WHEN TRUE, ALLOWS RE-INIT [FOR UPGRADES TO A QUEUE]          \nprivate.deferred.tpl.overwritable = 0; \n\n//Default timeout for a deferred\nprivate.deferred.tpl.timeout = 5000;\n\n/**\n * REMOTE\n * \n * REMOTE == 1  =>  [DEFAULT] Make http request for file\n * \n * REMOTE == 0  =>  Read file directly from the filesystem\n * \n * ONLY APPLIES TO SCRIPTS RUN UNDER NODE AS BROWSER HAS NO \n * FILESYSTEM ACCESS\n */\nprivate.deferred.tpl.remote = 1;\n\n//ADDS TO MASTER LIST. ALWAYS TRUE UNLESS UPGRADING A PROMISE TO A QUEUE\nprivate.deferred.tpl.list = 1;\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\n/**\n * Resolves a deferred.\n * \n * @param {mixed} value\n * @returns {void}\n */\nprivate.deferred.tpl.resolve = function(value){\n\n    if(this.settled === 1){\n        public.debug([\n            this.id + \" can't resolve.\"\n            ,\"Only unsettled deferreds are resolvable.\"\n        ]);\n    }\n\n    //SET STATE TO SETTLEMENT IN PROGRESS\n    private.deferred.set_state(this,-1);\n\n    //SET VALUE\n    this.value = value;\n\n    //RUN RESOLVER BEFORE PROCEEDING\n    //EVEN IF THERE IS NO RESOLVER, SET IT TO FIRED WHEN CALLED\n    if(!this.resolver_fired && typeof this.resolver === 'function'){\n        \n        this.resolver_fired = 1;   \n        \n        //Add resolver to resolve train\n        this.callbacks.resolve.train.push(function(){\n            this.resolver(value,this);\n        });\n    }\n    else{\n        \n        this.resolver_fired = 1;  \n        \n        //Add settle to resolve train\n        //Always settle before all other complete callbacks\n        this.callbacks.resolve.hooks.onComplete.train.unshift(function(){\n            private.deferred.settle(this);\n        });\n    }\n\n    //Run resolve [standard respect for any hooks]\n    private.deferred.run_train(\n        this\n        ,this.callbacks.resolve\n        ,this.value\n        ,{pause_on_deferred : false}\n    );\n\n    //resolver is expected to call resolve again\n    //and that will get us past this point\n    return this;\n};\n\n\nprivate.deferred.tpl.reject = function(err){\n\n    if(!(err instanceof Array)){\n        err = [err];\n    }\n\n    err.unshift(\"REJECTED \"+this.model+\": '\"+this.id+\"'\");\n\n    public.debug(err,this);\n\n    //Remove auto timeout timer\n    if(this.timeout_id){\n        clearTimeout(this.timeout_id);\n    }\n\n    //Set state to rejected\n    private.deferred.set_state(this,2);\n\n    //Execute rejection queue\n    private.deferred.run_train(\n        this\n        ,this.callbacks.reject\n        ,err\n        ,{pause_on_deferred : false}\n    );\n\n    return this;\n};\n\n\nprivate.deferred.tpl.then = function(fn,rejector){\n\n    switch(true){\n\n        //An error was previously thrown, bail out\n        case(this.state === 2):\n            break;\n\n        //Execution chain already finished. Bail out.\n        case(this.done_fired === 1):\n            public.debug(this.id+\" can't attach .then() because .done() has already fired, and that means the execution chain is complete.\");\n            break;\n\n        default:\n\n            //Push callback to then queue\n            this.callbacks.then.train.push(fn);\n\n            //Push reject callback to the rejection queue\n            if(typeof rejector === 'function'){\n                this.callbacks.reject.train.push(rejector);\n            }\n            \n            //Settled, run train now\n            if(this.settled === 1 && this.state === 1 && !this.done_fired){        \n                private.deferred.run_train(\n                    this\n                    ,this.callbacks.then\n                    ,null\n                    ,{pause_on_deferred : true}\n                );\n            }\n            //Unsettled, train will be run when settled\n            else{}\n    }\n\n    return this;\n};\n\n\nprivate.deferred.tpl.done = function(fn){\n\n    if(this.callbacks.done.train.length === 0\n       && this.done_fired === 0){\n        if(typeof fn === 'function'){\n            \n            //wrap callback with some other commands\n            var fn2 = function(r,deferred,last){\n              \n                //Done can only be called once, so note that it has been\n                deferred.done_fired = 1;\n                \n                fn(r,deferred,last);\n            };\n\n            this.callbacks.done.train.push(fn2);\n            \n            //Settled, run train now\n            if(this.settled === 1 && this.state === 1){        \n                \n                private.deferred.run_train(\n                    this\n                    ,this.callbacks.done\n                    ,null\n                    ,{pause_on_deferred : false}\n                );\n            }\n            //Unsettled, train will be run when settled\n            else{}\n        }\n        else{\n            return public.debug(\"done() must be passed a function.\");\n        }\n    }\n    else{\n        return public.debug(\"done() can only be called once.\");\n    }\n};","public.queue = {};\nprivate.queue = {};\n\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\n/**\n* Template object for all queues\n* \n* @type object\n*/\nprivate.queue.tpl = {\n\n   model : 'queue'\n\n\n   //SET TRUE AFTER RESOLVER FIRED\n   ,resolver_fired : 0\n\n\n   //PREVENTS A QUEUE FROM RESOLVING EVEN IF ALL DEPENDENCIES MET\n   //PURPOSE: PREVENTS QUEUES CREATED BY ASSIGNMENT FROM RESOLVING \n   //BEFORE THEY ARE FORMALLY INSTANTIATED\n   ,halt_resolution : 0\n\n\n   //USED TO CHECK STATE, ENSURES ONE COPY\n   ,upstream : {}\n\n\n   //USED RETURN VALUES, ENSURES ORDER\n   ,dependencies : []\n\n\n   ///////////////////////////////////////////////////\n   //  QUEUE INSTANCE METHODS\n   ///////////////////////////////////////////////////\n\n\n   /**\n    * Add list of dependencies to a queue's upstream array.\n    * \n    * The queue will resolve once all the promises in its \n    * upstream array are resolved.\n    * \n    * When public.config.debug == 1, method will test each dependency is not\n    * previously scheduled to resolve downstream from the target, in which \n    * case it would never resolve because its upstream depends on it.\n    * \n    * @param {array} array of dependencies to add\n    * @returns {array} upstream\n    */\n   ,add : function(arr){\n\n       try{\n           if(arr.length === 0) return this.upstream;\n       }\n       catch(err){\n           public.debug(err);\n       }\n\n       //IF NOT PENDING, DO NOT ALLOW TO ADD\n       if(this.state !== 0){\n           return public.debug(\"Cannot add list to queue id:'\"+this.id\n           +\"'. Queue settled/in the process of being settled.\",this);\n       }\n\n       for(var a in arr){\n\n           switch(true){\n\n               //CHECK IF EXISTING PROMISE\n               case(typeof public.list[arr[a]['id']] === 'object'):\n                   arr[a] = public.list[arr[a]['id']];\n                   break;\n\n               //IF NOT, ATTEMPT TO CONVERT IT TO A PROMISE\n               case(typeof arr[a] === 'object' && typeof arr[a].then !== 'function'):\n                   arr[a] = private.deferred.convert_to_promise(arr[a]);\n                   break;\n\n               //REF IS A PROMISE.\n               case(typeof arr[a].then === 'function'):\n                   break;\n\n               default:\n                   console.error(\"Object could not be converted to promise.\");\n                   console.error(arr[a]);\n                   debugger;\n                   continue;\n           }\n\n           //must check the target to see if the dependency exists in its downstream\n           for(var b in this.downstream){\n               if(b === arr[a].id){\n                   return public.debug(\"Error adding upstream dependency '\"+arr[a].id+\"' to queue\"+\" '\"+this.id+\"'.\\n Promise object for '\"+arr[a].id+\"' is scheduled to resolve downstream from queue '\"+this.id+\"' so it can't be added upstream.\");\n               }\n           }\n\n           //ADD TO UPSTREAM, DOWNSTREAM, DEPENDENCIES\n           this.upstream[arr[a].id] = arr[a];\n           arr[a].downstream[this.id] = this;\n           this.dependencies.push(arr[a]);\n\n       }\n\n       return this.upstream;\n   }\n\n\n   /**\n    * Remove list from a queue.\n    * \n    * @param {array} arr\n    * @returns {array} array of list the queue is upstream\n    */\n   ,remove : function(arr){\n\n       //IF NOT PENDING, DO NOT ALLOW REMOVAL\n       if(this.state !== 0){\n           console.error(\"Cannot remove list from queue id:'\"+this.id+\"'. Queue settled/in the process of being settled.\");\n           return false;\n       }\n\n       for(var a in arr){\n           if(this.upstream[arr[a].id]){\n               delete this.upstream[arr[a].id];\n               delete arr[a].downstream[this.id];\n           }\n       }\n   }\n\n\n   /**\n    * Resets an existing,settled queue back to Orgying state.\n    * Clears out the downstream.\n    * Fails if not settled.\n    * \n    * @returns {obj}\n    */\n   ,reset : function(options){\n\n       if(this.settled !== 1 || this.state !== 1){\n           public.debug(\"Can only reset a queue settled without errors.\");\n       }\n\n       options = options || {};\n\n       this.settled = 0;\n       this.state = 0; \n       this.resolver_fired = 0;\n       this.done_fired = 0;\n\n       //REMOVE AUTO TIMEOUT TIMER\n       if(this.timeout_id){\n           clearTimeout(this.timeout_id);\n       }\n\n       //CLEAR OUT THE DOWNSTREAM\n       this.downstream = {};\n       this.dependencies = [];\n\n       //SET NEW AUTO TIMEOUT\n       private.deferred.auto_timeout.call(this,options.timeout);\n\n       //POINTLESS - WILL JUST IMMEDIATELY RESOLVE SELF\n       //this.check_self()\n\n       return this;\n   }\n\n\n   /**\n    * Cauaes a queue to look over its dependencies and see if it \n    * can be resolved.\n    * \n    * This is done automatically by each dependency that loads,\n    * so is not needed unless:\n    * \n    * -debugging\n    * \n    * -the queue has been reset and no new\n    * dependencies were since added.\n    * \n    * @returns {int} State of the queue.\n    */\n   ,check_self : function(){\n       private.queue.receive_signal(this,this.id);\n       return this.state;\n   }\n}\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\npublic.queue = function(deps,options){\n\n    var _o;\n    if(!(deps instanceof Array)){\n        return public.debug(\"Queue dependencies must be an array.\");\n    }\n    \n    options = options || {};\n    \n    //DOES NOT ALREADY EXIST\n    if(!public.list[options.id]){\n        \n        //CREATE NEW QUEUE OBJECT\n        var _o = private.queue.factory(options);\n\n        //ACTIVATE QUEUE\n        _o = private.queue.activate(_o,options,deps);\n\n    }\n    //ALREADY EXISTS\n    else {\n        \n        _o = public.list[options.id];\n        \n        if(_o.model !== 'queue'){\n        //MATCH FOUND BUT NOT A QUEUE, UPGRADE TO ONE\n\n            options.overwritable = 1;\n\n            _o = private.queue.upgrade(_o,options,deps);\n        }\n        else{\n            \n            //OVERWRITE ANY EXISTING OPTIONS\n            for(var i in options){\n                _o[i] = options[i];\n            }\n            \n            //ADD ADDITIONAL DEPENDENCIES IF NOT RESOLVED\n            if(deps.length > 0){\n                private.queue.tpl.add.call(_o,deps);\n            }\n            \n        }\n        \n        //RESUME RESOLUTION UNLESS SPECIFIED OTHERWISE\n        _o.halt_resolution = (typeof options.halt_resolution !== 'undefined') ?\n        options.halt_resolution : 0;\n    }\n    \n    return _o;\n};\n\n\n//////////////////////////////////////////\n//  PRIVATE METHODS\n//////////////////////////////////////////\n\n\nprivate.queue.factory = function(options){\n\n    //CREATE A NEW QUEUE OBJECT\n    var _o = public.naive_cloner([\n        private.deferred.tpl\n        ,private.queue.tpl\n        ,options\n    ]);\n\n    //Save backtrace for async debugging\n    _o.origin_stack = private.origin_stack('public.queue');\n    \n    //if no id, use origin\n    if(!options.id){\n        _o.id = _o.origin_stack[_o.origin_stack.length -1];\n    }\n    \n    return _o;\n}    \n    \n    \n/**\n * Activates a queue object.\n * \n * @param {object} o\n * @param {object} options\n * @param {array} deps\n * @returns {object} queue\n */\nprivate.queue.activate = function(o,options,deps){\n\n    //ACTIVATE AS A DEFERRED\n    o = private.deferred.activate(o);\n\n    //ADD ANY DEFERREDS TO QUEUE\n    private.queue.tpl.add.call(o,deps);\n\n    //SEE IF CAN BE IMMEDIATELY RESOLVED BY CHECKING UPSTREAM\n    private.queue.receive_signal(o,o.id);\n\n    //ASSIGN THIS QUEUE UPSTREAM TO OTHER QUEUES\n    if(o.assign){\n        for(var a in o.assign){\n            public.assign(o.assign[a],[o],true);\n        }\n    }\n\n    return o;\n};\n    \n    \n/**\n* A \"signal\" here causes a queue to look through each item in its upstream and \n* check to see if all are resolved. \n* \n* Signals can only be received by a queue itself or a promise/deferred/queue\n* in its upstream.\n* \n* @param {string} from_id\n* @returns {void}\n*/\nprivate.queue.receive_signal = function(target,from_id){\n\n    if(target.halt_resolution === 1) return;\n\n   //MAKE SURE THE SIGNAL WAS FROM A PROMISE BEING LISTENED TO\n   //BUT ALLOW SELF STATUS CHECK\n   if(from_id !== target.id && !target.upstream[from_id]){\n       console.error(from_id + \" can't signal \" + target.id + \" because not in upstream.\");\n       debugger;\n       return;\n   }\n   //RUN THROUGH QUEUE OF OBSERVING PROMISES TO SEE IF ALL DONE\n   else{\n       var status = 1;\n       for(var i in target.upstream){\n           //SETS STATUS TO 0 IF ANY OBSERVING HAVE FAILED, BUT NOT IF PENDING OR RESOLVED\n           if(target.upstream[i].state !== 1) {\n               status = target.upstream[i].state;\n               break;\n           }\n       }\n   }\n\n   //RESOLVE QUEUE IF UPSTREAM FINISHED\n   if(status === 1){\n\n        //GET RETURN VALUES PER DEPENDENCIES, WHICH SAVES ORDER AND \n        //REPORTS DUPLICATES\n        var values = [];\n        for(var i in target.dependencies){\n            values.push(target.dependencies[i].value);\n        }\n\n        private.deferred.tpl.resolve.call(target,values);\n   }\n\n   if(status === 2){\n       var err = [\n           target.id+\" dependency '\"+target.upstream[i].id + \"' was rejected.\"\n           ,target.upstream[i].arguments\n       ];\n       private.deferred.tpl.reject.apply(target,err);\n   }\n};\n\n\n/**\n* Upgrades a promise object to a queue.\n* \n* @param {object} prom\n* @param {object} options\n* @param {array} dependencies\n* @returns {object} queue object\n*/\nprivate.queue.upgrade = function(obj,options,deps){\n\n    if(obj.settled !== 0 || (obj.model !== 'promise' && obj.model !== 'deferred')){\n        return public.debug('Can only upgrade unsettled promise or deferred into a queue.');\n    }\n\n   //GET A NEW QUEUE OBJECT AND MERGE IN\n    var _o = public.naive_cloner([\n        private.queue.tpl\n        ,options\n    ]);\n\n    for(var i in _o){\n       obj[i] = _o[i];\n    }\n\n    delete _o;\n\n    //CREATE NEW INSTANCE OF QUEUE\n    obj = private.queue.activate(obj,options,deps);\n\n    //RETURN QUEUE OBJECT\n    return obj;\n};","////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\npublic.cast = function(obj){\n            \n    var required = [\"then\",\"error\",\"id\"];\n    for(var i in required){\n        if(!obj[required[i]]){\n            return public.debug(\"Castable objects require: \" + required[i]);\n        }\n    }\n\n    //GET A BLANK DEFERRED TO PLAY WITH\n    var deferred = public.deferred({\n        id : obj.id\n    });\n\n    //CREATE RESOLVER [ASYNC]\n    var resolver = function(){\n        deferred.resolve.call(deferred,arguments[0]);\n    };\n\n    //SET RESOLVER\n    obj.then(resolver);\n\n    //CREATE REJECTOR [ASYNC]\n    var err = function(err){\n        deferred.reject(err);\n    };\n\n    //SET REJECTOR\n    obj.error(err);\n\n    //RETURN THE DEFERRED\n    return deferred;\n}\n        ","if(typeof process === 'object' && process + '' === '[object process]'){\n    // is node\n    module.exports = public;\n}\nelse{\n    // not node\n    Orgy = public;\n}"]}