{"version":3,"file":"orgy.devel.js","sources":["../src/js/main.js","../src/js/deferred.js","../src/js/queue.js","../src/js/cast.js","../src/js/build.js"],"names":["public","private","list","registered_callbacks","debug_mode","i","define","id","data","settled","def","deferred","resolve","debug","export_module","then","process","module","exports","value","modules","assign","tgt","arr","add","q","this","model","remove","queue","register_callback","name","fn","array_to_function","target","clone","slice","root_id","splice","root","hasOwnProperty","window","console","error","x","y","l","length","args","end","Array","parent","b","key","constructor","naive_cloner","donors","o","a","JSON","parse","stringify","msg","force_debug_mode","options","_o","factory","activate","tpl","done_fired","_state","_timeout_id","error_q","then_q","reject_q","done_q","downstream","execution_history","overwritable","timeout","rol","remote","resolver_fired","resolver","v","call","push","set","log","clearTimeout","_set_state","reject","err","unshift","catch_params","apply","arguments","rejector","r","done","int","_signal_downstream","_get_state","obj","_make_id","autonamed","auto_timeout","type","scope","setTimeout","auto_timeout_cb","msgs","search_obj_recursively","cb","receive_signal","propName","breadcrumb","r1","indexOf","convert_to_promise","url","split","pop","search","join","prom","_wrap_event","promise","warn","_wrap_timer","_wrap_xhr","document","$","ready","load","on","_start","Date","getTime","_end","start","elapsed","required","attach_xhr","head","getElementsByTagName","documentElement","node","createElement","setAttribute","onload","onreadystatechange","appendChild","onerror","req","XMLHttpRequest","open","show_messages","setRequestHeader","return_packet","readyState","status","responseText","e","send","process_result","require","request","get","response","body","statusCode","fs","cwd","path","substring","readFile","exit","deps","upgrade","halt_resolution","upstream","dependencies","reset","check_self","from_id","values","cast","Orgy"],"mappings":"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","sourcesContent":["var public = {};\nvar private = {};\n\n\n////////////////////////////////////////\n//  PUBLIC VARIABLES\n////////////////////////////////////////\n\n\n/**\n * A directory of all promises, deferreds, and queues.\n * @type object\n */\npublic.list = {};\n\n\n/** \n * Callbacks that are run on every resolved item\n * \n */\npublic.registered_callbacks = {};\n\n\n/**\n * Debugging mode\n * @type Number\n */\npublic.debug_mode = true;\n\n\n/**\n * iterator for ids\n * @type integer\n */\npublic.i = 0;\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\n/**\n* Creates a new promise from a value and an id and automatically resolves it.\n* \n* @param {string} id\n* @param {mixed} data\n* @returns {object} resolved promise\n*/\npublic.define = function(id,data){\n\n   //ALLOW OVERWRITING OF UNSETTLED PROMISES\n   //GOOD FOR WHEN A FILE IS NOT RESOLVED-ON-LOAD \n   if(!public.list[id] || public.list[id].settled !== 1){\n       \n       //GET DEFERRED\n       var def = public.deferred({\n           id : id\n       });\n\n       //SETTLE \n       def.resolve(data);\n       \n       return def;\n   }\n   else{\n       public.debug(\"Can't define \"+id + \". Already resolved.\");\n   }\n\n};\n\n\n/**\n * Exports the value of a resolved promise to module.exports if node,\n * window.modules[deferred.id] if browser.\n * \n * @param {object} deferred\n * @returns void\n */\npublic.export_module = function(deferred){\n    \n    deferred.then(function(){\n\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            //DEFINE IN NODE\n            module.exports = deferred.value;\n        }\n        else{\n            //DEFINE IN BROWSER\n            modules[deferred.id] = deferred.value;\n        }\n        \n    });\n    \n}\n\n\n/**\n * Add/remove an upstream dependency to/from a queue. \n * \n * Can use a queue id, even for a queue that is yet to be created.\n * \n * @param {string} tgt | queue / queue id\n * @param {array}  arr | list/promise ids,dependencies\n * @param {boolean} add | add if true, remove if false\n * \n * @return {array} queue of list\n */\npublic.assign = function(tgt,arr,add){\n\n    add = (typeof add === \"boolean\") ? add : 1;\n\n    var id,q;\n    switch(true){\n        case(typeof tgt === 'object' && typeof tgt.then === 'function'):\n            id = tgt.id;\n            break;\n        case(typeof tgt === 'string'):\n            id = tgt;\n            break;\n        default:\n            return public.debug(\"Assign target must be a queue object or the id of a queue.\");\n    }\n\n    //IF TARGET ALREADY LISTED\n    if(this.list[id] && this.list[id].model === 'queue'){\n        q = this.list[id];\n        \n        //=> ADD TO QUEUE'S UPSTREAM\n        if(add){\n            q.add(arr);\n        }\n        //=> REMOVE FROM QUEUE'S UPSTREAM\n        else{\n            q.remove(arr);\n        }\n    }\n    //CREATE NEW QUEUE AND ADD DEPENDENCIES\n    else if(add){\n\n        q = public.queue(arr,{\n            id : id\n        });\n    }\n    //ERROR: CAN'T REMOVE FROM A QUEUE THAT DOES NOT EXIST\n    else{\n        public.debug(\"Cannot remove dependencies from a queue that does not exist.\");\n    }\n\n    return q;\n};\n\n\npublic.register_callback = function(name,fn){\n    public.registered_callbacks[name] = fn;\n};\n\n    \n/**\n * Converts a specially formatted array into a function.\n * \n * \n * @param {type} target\n * @returns {object}\n */\npublic.array_to_function = function(target){\n\n    //CLONE TARGET\n    var clone = target.slice(0);\n\n    var root_id = clone[0];\n    clone.splice(0,1);\n\n    var root;\n    if(public.list[root_id] && public.list[root_id].hasOwnProperty(\"value\")){\n        root = public.list[root_id].value; \n    }\n    else{\n        root = window[root_id];\n    }\n\n\n    if(typeof root === 'undefined'){\n        console.error(root_id + \" not found on window or public.list\");\n        debugger;\n    }\n\n\n    var x,y;\n    x = y = root;\n\n    //REMOVE LAST ARRAY ELEMENT (ARGS)\n    var l = clone.length;\n    var args = clone[l-1];\n\n    //POINTER TO A FUNCTION WILL HAVE AN ARRAY AS LAST ELEMENT\n    var end;\n    if(args instanceof Array){\n        end = l - 1;\n    }\n    //POINTER TO AN ARRAY WILL NOT\n    else{\n        end = l;\n    }\n\n    var parent;\n    for(var b=0; b < end; b++){\n        var key = clone[b];\n\n        if(b === end - 1 || l === 1){\n           parent = x; \n        }\n\n        if(typeof x[key] === 'undefined'){\n            console.error(\"Property '\"+key+\"' not found on object:\", x);\n            debugger;\n            return;\n        }\n        x = x[key];\n        y = x;\n    }    \n\n    return {\n        constructor : x\n        ,args : args\n        ,parent : parent\n    };\n}\n\n\n/**\n * Makes a shallow copy of an array. \n * Makes a copy of an object so long as it is JSON\n * \n * @param {array} array of donor objects, overwritten from right to left\n * @returns {object}\n */\npublic.naive_cloner = function(donors){\n    var o = {};\n    for(var a in donors){\n        for(var b in donors[a]){\n            if(donors[a][b] instanceof Array){\n                o[b] = donors[a][b].slice(0);\n            }\n            else if(typeof donors[a][b] === 'object'){\n                o[b] = JSON.parse(JSON.stringify(donors[a][b]));\n            }\n            else{\n                o[b] = donors[a][b];\n            }\n        }\n    }\n    return o;\n}\n        \n\n/**\n * Debugging method.\n * \n * @param {string|array} msg\n * @param {boolean} force_debug_mode   Forces debugger when set to true. \n * @returns {Boolean}\n */\npublic.debug = function(msg,force_debug_mode){\n    if(msg instanceof Array){\n        for(var i in msg){\n            console.error(\"ERROR: \"+msg[i]);\n        }\n    }\n    else{\n        console.error(\"ERROR: \"+msg);\n    }\n    if(public.debug_mode == 1 || force_debug_mode){\n        debugger;\n    }\n    return false;\n}\n","public.deferred = function(options){\n    \n    if(!options || typeof options.id !== 'string'){\n        return public.debug(\"Must set id.\");\n    }\n    \n    if(!public.list[options.id]){\n        //CREATE NEW INSTANCE OF DEFERRED CLASS\n        var _o = private.deferred.factory(options);\n\n        //ACTIVATE DEFERRED\n        _o = private.deferred.activate(_o);\n    }\n    else{\n        _o = public.list[options.id];\n    }\n    \n    return _o;\n};\n\n\n\nprivate.deferred = {\n    \n    factory : function(options){\n        \n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A DEFERRED OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }\n    \n    \n    ,tpl : {\n        \n        model : \"deferred\"\n\n        //A COUNTER FOR AUT0-GENERATED PROMISE ID'S\n        ,settled : 0 \n        ,id : null\n        ,done_fired : 0\n\n        /**\n         * STATE CODES:\n         * ------------------\n         * -1   => SETTLING [EXECUTING CALLBACKS]\n         *  0   => PENDING\n         *  1   => RESOLVED / FULFILLED\n         *  2   => REJECTED \n         */\n        ,_state : 0\n        ,_timeout_id : null\n        ,value : []\n\n        ,error_q : []  \n        ,then_q : []\n        ,reject_q : []\n        ,done_q : []\n\n        //PROMISE HAS OBSERVERS BUT DOES NOT OBSERVE OTHERS\n        ,downstream : {}\n        ,execution_history : []\n        ,overwritable : 0   //WHEN TRUE, ALLOWS RE-INIT [FOR UPGRADES TO A QUEUE]          \n        ,timeout : 5000\n\n        /**\n         * RESOLVE-ON-LOAD. Whether to resolve the promise on load.\n         * \n         * ROL == 1     =>  Promise is resolved onload.\n         *                  No value can be set to promise object.\n         *                  Must define itself into global space. \n         *                  \n         * ROL == 0     =>  Promise NOT resolved onload. \n         *                  Value can be set to promise object.\n         *                  Must define itself into global space.\n         */          \n        ,rol : 1\n\n        /**\n         * REMOTE\n         * \n         * REMOTE == 1  =>  [DEFAULT] Make http request for file\n         * \n         * REMOTE == 0  =>  Read file directly from the filesystem\n         * \n         * ONLY APPLIES TO SCRIPTS RUN UNDER NODE AS BROWSER HAS NO \n         * FILESYSTEM ACCESS\n         */\n        ,remote : 1\n\n        //ADDS TO MASTER LIST. ALWAYS DO THIS UNLESS UPGRADING A PROMISE TO A QUEUE\n        ,list : 1   \n\n        ,resolve : function(value){\n\n            if(this.settled !== 0){\n                public.debug(this.id + \" can't resolve. Only unsettled promise objects resolvable.\");\n            }\n\n            //SET STATE TO SETTLEMENT IN PROGRESS\n            this._state = -1; \n\n            //SET VALUE\n            this.value  = value;\n\n            //RUN RESOLVER BEFORE PROCEEDING\n            //EVEN IF THERE IS NO RESOLVER, SET IT TO FIRED WHEN CALLED\n            if(!this.resolver_fired){\n\n                this.resolver_fired = 1;\n\n                //FIRE THE RESOLVER IF SET\n                if(this.resolver){\n                    this.resolver(this,value);\n                    return this;\n                }\n\n            }\n\n            //Allows .then chain to be held up by new async events created as the chain executes.\n            var v,fn,l=this.then_q.length;\n            for(var i = 0; i<l; i++){     \n\n                //REMOVE fn FROM THEN QUEUE. \n                //WHEN A PROMISE OBJ IS RETURNED, AND EXECUTION STOPPED WE\n                //DONT WANT TO REPEAAT A CALL TO SAME fn\n                fn = this.then_q.splice(0,1);\n\n                //CALL fn WITH PRECEDING RESULT OR IF NONE EXISTS, RESOLVER VALUE\n                v = fn[0].call(this, v || this.value);\n                \n                //SAVE fn TO EXECUTION HISTORY\n                this.execution_history.push(fn[0]);\n\n                //IF fn RETURNED AN UNSETTLED PROMISE\n                //WAIT FOR IT TO RESOLVE BEFORE PROCEEDING\n                if(v && v.then){\n                    \n                    //SET THE STATE BACK TO WAITING\n                    this._state = 0;\n                    \n                    //ADD IT TO QUEUE'S UPSTREAM\n                    this.add([v]);\n                    \n                    //END RESOLUTION ATTEMPT AND WAIT FOR v TO RESOLVE\n                    return;\n                }\n            }\n\n\n            //RUN DONE FUNCTION[S] IF THEY EXIST\n            this.done_fired = 1;\n            for(var i in this.done_q){\n                \n                this.done_q[i].call(this,this.value);\n                \n                //REMOVE fn AND PLACE IN EXECUTION HISTORY\n                this.execution_history.push(this.done_q[i]);\n            }\n            \n            //SET RETURN VALUE TO A GIVEN OBJECT PROPERTY\n            if(this.set){\n                //ARRAY IS TRANSORMED INTO A PATH TO POINT TO\n                if(this.set instanceof Array){\n                    //@todo make property of private to avoid external dependency\n                    var tgt = public.array_to_function(this.set);\n                    tgt.parent[tgt.args] = this.value;\n                }\n                //OTHErWISE ASSUMED TO BE AN OBJECT PROPERTY\n                else if (typeof this.set === 'function'){\n                    this.set(this.value);\n                }\n            }\n\n            //EXECUTE ANY GLOBALLY REGISTERED CALLBACKS\n            for (var i in public.registered_callbacks){\n                console.log(\"Orgy.js executing registered callback '\"+i+\"' on \" + this.id);\n                public.registered_callbacks[i].call(this);\n            }\n           \n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SET STATE TO RESOLVED\n            private.deferred._set_state.call(this,1);\n\n            return this;\n        }\n\n        ,reject : function(err){\n            \n            if(!(err instanceof Array)){\n                err = [err]\n            }\n            \n            err.unshift(\"REJECTED \"+this.model+\": '\"+this.id+\"'\");\n\n            public.debug(err);\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SAVE ERROR OBJECT TO MEMORY FOR USE IN CATCH CALLBACK\n            this.catch_params = err;\n\n            //SET STATE TO REJECTED\n            private.deferred._set_state.call(this,2);\n\n            //EXECUTE REJECTION QUEUE\n            for(var i in this.reject_q){\n                this.value.push(this.reject_q[i].apply(this,arguments));\n            }\n\n            return this;\n        }\n\n        ,then : function(fn,rejector){\n\n            switch(true){\n\n                //ERROR WAS PREVIOUSLY THROWN\n                case(this._state === 2):\n                    break;\n\n                case(this.done_fired === 1):\n                    public.debug(this.id+\" can't attach .then() after .done() has fired.\");\n                    break;\n\n                case(this.settled === 1 && this._state === 1 && this.done_fired === 0):\n                    var r = fn.call(this,this.value);\n                    this.value.push(r);\n                    break;\n\n                default:\n\n                    //PUSH CALLBACK TO THEN QUEUE\n                    this.then_q.push(fn);\n\n                    //PUSH REJECT CALLBACK TO REJECTION QUEUE\n                    if(typeof rejector === 'function'){\n                        this.reject_q.push(rejector);\n                    }\n                    break;\n            }\n\n            return this;\n        }\n\n\n        /**\n         * Executes fn immediately if target is settled,\n         * otherwise adds to an array of callbacks that will execute upon\n         * settlement.\n         * \n         * @param {type} fn\n         * @returns {private.deferred.tpl}\n         */\n        ,done : function(fn){\n\n            if(this.settled === 1){\n                this.done_fired = 1;\n                fn.call(this,this.value); \n            }\n            else{\n                this.done_q.push(fn);\n            }\n\n            return this;\n        }\n\n    }\n\n    \n    ///////////////////////////////////////////////////\n    //  METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * \n     * @param {type} int\n     * @returns {undefined}\n     */\n    ,_set_state : function(int){\n\n        this._state = int;\n\n        //IF RESOLVED OR REJECTED, SETTLE\n        if(int === 1 || int === 2){\n            this.settled = 1;\n        }\n\n        private.deferred._signal_downstream.call(this,this);\n    }\n    \n    \n    ,_get_state : function(){\n        return this._state;\n    }\n\n\n    ,activate : function(obj){\n\n        //SET ID\n        if(!obj.id){\n            obj.id = private.deferred._make_id(obj.model);\n            obj.autonamed = true;\n        }\n\n        //MAKE SURE NAMING CONFLICT DOES NOT EXIST\n        if(public.list[obj.id] && !public.list[obj.id].overwritable){\n            public.debug(\"Tried to overwrite \"+obj.id+\" without overwrite permissions.\");\n            return public.list[obj.id];\n        }\n        else{\n            //SAVE TO MASTER LIST\n            public.list[obj.id] = obj;\n        }\n\n        //AUTO TIMEOUT\n        private.deferred.auto_timeout.call(obj);\n\n        return obj;\n    }\n\n\n    /**\n     * Sets the automatic timeout on a promise object.\n     * \n     * @param {integer} optional. timeout\n     * @returns {Boolean}\n     */\n    ,auto_timeout : function(timeout){\n\n        this.timeout = (typeof timeout === 'undefined') ? this.timeout : timeout;\n\n        //AUTO REJECT ON timeout\n        if(!this.type || this.type !== 'timer'){\n\n            //DELETE PREVIOUS TIMEOUT IF EXISTS\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            if(typeof this.timeout === 'undefined'){\n                public.debug(this.id+\" Auto timeout this.timeout cannot be undefined.\");\n            }\n            else if (this.timeout === -1){\n                //NO AUTO TIMEOUT SET\n                return false;\n            }\n            var scope = this;\n\n            this._timeout_id = setTimeout(function(){\n                private.deferred.auto_timeout_cb.call(scope);\n            }, this.timeout);\n        }\n        else{\n            //@todo WHEN A TIMER, ADD DURATION TO ALL UPSTREAM AND LATERAL?\n        }\n        return true;\n    }\n\n\n    /**\n     * Callback for autotimeout. Declaration here avoids memory leak.\n     * \n     * @param {type} exp\n     * @returns {undefined}\n     */\n    ,auto_timeout_cb : function(){\n        \n        if(this._state !== 1){\n\n            //GET THE UPSTREAM ERROR ID\n            var msgs = [];\n            var scope = this;\n\n            var fn = function(obj){\n                if(obj._state !== 1){\n                    return obj.id\n                }\n                else{\n                    return false;\n                }\n            };\n\n            /**\n             * Run over a given object property recursively, applying callback until \n             * callback returns a non-false value.\n             */\n            var r = private.deferred.search_obj_recursively(this,'upstream',fn);\n            msgs.push(scope.id + \": rejected by auto timeout after \" + this.timeout + \"ms\");\n            msgs.push(\"Cause:\");\n            msgs.push(r);\n            return private.deferred.tpl.reject.call(this,msgs);\n            \n        }\n    }\n\n\n    ,error : function(cb){\n\n        //IF ERROR ALREADY THROWN, EXECUTE CB IMMEDIATELY\n        if(this._state === 2){\n            cb();\n        }\n        else{\n            this.error_q.push(cb);\n        }\n\n        return this;\n    }\n\n\n    ,_make_id : function(model){\n        return \"anonymous-\" + model + \"-\" + (public.i++);\n    }\n\n\n    /**\n     * Signals all downstream promises that private promise object's state has changed.\n     * \n     * \n     * @todo Since the same queue may have been assigned twice directly or \n     * indirectly via shared dependencies, make sure not to double resolve\n     * - which throws an error.\n     *     \n     * @returns {void}\n     */\n    ,_signal_downstream : function(target){\n\n        //MAKE SURE ALL DOWNSTREAM IS UNSETTLED\n        for(var i in target.downstream){\n            if(target.downstream[i].settled === 1){\n                public.debug(target.id + \" tried to settle promise \"+\"'\"+target.downstream[i].id+\"' that has already been settled.\");\n            }\n        }\n\n        //NOW THAT WE KNOW ALL DOWNSTREAM IS UNSETTLED, WE CAN IGNORE ANY\n        //SETTLED THAT RESULT AS A SIDE EFFECT TO ANOTHER SETTLEMENT\n        for (var i in target.downstream){\n            if(target.downstream[i].settled !== 1){\n                private.queue.receive_signal(target.downstream[i],target.id);\n            }\n        }\n    }\n    \n    \n    /**\n    * Run over a given object property recursively, applying callback until \n    * callback returns a non-false value.\n    * \n    * @param {object} obj      \n    * @param {string} propName          The property name of the array to bubble up\n    * @param {function} fn              The test callback to be applied to each object\n    * @param {array} breadcrumb         The breadcrumb through the chain of the first match\n    * @returns {mixed}\n    */\n    ,search_obj_recursively : function(obj,propName,fn,breadcrumb){\n      \n        if(typeof breadcrumb === 'undefined'){\n            breadcrumb = [obj.id];\n        }\n      \n        var r1;\n\n//debugger;\n        \n        for(var i in obj[propName]){\n\n            //RUN TEST\n            r1 = fn(obj[propName][i]);\n            \n            if(r1 !== false){\n            //MATCH RETURNED. RECURSE INTO MATCH IF HAS PROPERTY OF SAME NAME TO SEARCH\n                //CHECK THAT WE AREN'T CAUGHT IN A CIRCULAR LOOP\n                if(breadcrumb.indexOf(r1) !== -1){\n                    return public.debug([\n                        \"Circular condition in recursive search of obj property '\"\n                            +propName+\"'. Offending value: \"+r1\n                        ,breadcrumb\n                    ]);\n                }\n                \n                breadcrumb.push(r1);\n\n                if(obj[propName][i][propName]){\n                    return private.deferred.search_obj_recursively(obj[propName][i],propName,fn,breadcrumb);\n                }\n                \n                break;\n            }\n\n        }\n\n        return breadcrumb;\n    }\n    \n    \n    /**\n     * Converts a promise description into a promise.\n     * \n     * @param {type} obj\n     * @returns {undefined}\n     */\n    ,convert_to_promise : function(obj){\n \n        //IF ALREADY EXISTS, RETURN EXISTING\n        if(!obj.id){\n            if(obj.type === 'timer'){\n                obj.id = \"timer-\" + obj.timeout + \"-\"+public.i++;\n            }\n            else if(typeof obj.url === 'string'){\n                obj.id = obj.url.split(\"/\").pop();\n                //REMOVE .js FROM ID\n                if(obj.id.search(\".js\")!== -1){\n                    obj.id = obj.id.split(\".\");\n                    obj.id.pop();\n                    obj.id = obj.id.join(\".\");\n                }\n            }\n            else{\n                console.error(\"Dependency type \"+obj.type+\" requires id, but id undefined.\",obj);\n                debugger;\n                return false;\n            }\n        }\n\n        if(obj.type !== 'timer'){\n            //RETURN THE PROMISE IF IT ALREADY EXISTS\n            if(typeof public.list[obj.id] !== 'undefined'){\n                return public.list[obj.id];\n            }\n        }\n\n        //CONVERT DEPENDENCY TO PROMISE\n        var prom;\n        switch(true){\n\n            //EVENT\n            case(obj.type === 'event'):\n                prom = private.deferred._wrap_event(obj);\n                break;\n\n            //ALREADY A PROMISE\n            case(obj.type === 'promise' || obj.then):   \n\n                switch(true){\n                    \n                    //OBJECT PROPERTY .promise EXPECTED TO RETURN A PROMISE\n                    case(typeof obj.promise === 'function'):\n                        if(obj.scope){\n                            prom = obj.promise.call(obj.scope);\n                        }\n                        else{\n                            prom = obj.promise();\n                        }\n                        break;\n                        \n                    //OBJECT IS A PROMISE\n                    case(obj.then):\n                        prom = obj;\n                        break;\n                    \n                    //OBJECT IS A REFERENCE TO A PROMISE\n                    case(typeof obj.id === 'string'):\n                        //GET EXISTING\n                        if(public.list[obj.id]){\n                            prom = public.list[obj.id];\n                        }\n                        //CREATE DEFERRED\n                        else{\n                            console.warn(\"Promise '\"+obj.id +\"': did not exist. Auto creating new deferred.\");\n                            prom = public.deferred({\n                                id : obj.id\n                            });\n                        };\n                        break;\n                        \n                    default:\n                        \n                }\n\n                //MAKE SURE IS PROMISE\n                if(typeof prom !== 'object' || !prom.then){\n                    console.error(\"Dependency labeled as a promise did not return a promise.\");\n                    console.error(obj);\n                    debugger;\n                    return false;\n                }\n                break;\n\n            case(obj.type === 'timer'):\n                prom = private.deferred._wrap_timer(obj);\n                break;\n\n            //XHR\n            default:\n                obj.type = obj.type || \"default\";\n                prom = private.deferred._wrap_xhr(obj);\n        }\n        \n        //INDEX PROMISE BY ID FOR FUTURE REFERENCING\n        public.list[obj.id] = prom;\n\n        return prom;\n    }\n    \n    \n    /**\n     * Converts a reference to a DOM event to a promise.\n     * Resolved on first event trigger.\n     * \n     * @todo remove jquery dependency\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_event : function(obj){\n\n        var def = public.deferred({\n            id : obj.id\n        });\n        \n        var resolver = function(){\n            private.deferred.tpl.resolve.call(def,1);\n        };\n\n        //BROWSER\n        if(typeof document !== 'undefined' && typeof window !== 'undefined'){\n            \n            if(typeof $ !== 'function'){\n                var msg = 'window and document based events depend on jQuery';\n                console.error(msg);\n                debugger;\n                def.reject(msg);\n            }\n            else{\n                //For now, depend on jquery for IE8 DOMContentLoaded polyfill\n                switch(true){\n                    case(obj.id === 'ready' || obj.id === 'DOMContentLoaded'):\n                        $(document).ready(resolver);\n                        break;\n                    case(obj.id === 'load'):\n                        $(window).load(resolver);\n                        break;\n                    default:\n                        $(document).on(obj.id,\"body\",resolver);\n                }\n            }\n        }\n\n        return def;\n    }\n    \n\n    ,_wrap_timer : function(obj){\n\n        var prom = public.deferred(obj);\n        \n        (function(prom){\n            \n            var _start = new Date().getTime();      \n            setTimeout(function(){\n                var _end = new Date().getTime();\n                prom.resolve({\n                    start : _start\n                    ,end : _end\n                    ,elapsed : _end - _start\n                    ,timeout : obj.timeout\n                });\n            },obj.timeout);\n            \n        }(prom));\n        \n        return prom;\n    }\n    \n    \n    /**\n     * Creates a deferred object that depends on the loading of a file.\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_xhr : function(obj){\n        \n        \n        var required = [\"id\",\"url\"];\n        for(var i in required){\n            if(!obj[required[i]]){\n                return public.debug(\"File requests converted to promises require: \" + required[i]);\n            }\n        }\n\n        \n        //IF PROMISE FOR THIS URL ALREADY EXISTS, RETURN IT\n        if(public.list[obj.id]){\n            return public.list[obj.id];\n        }\n        \n\n        //CONVERT TO DEFERRED:\n        var deferred;\n        deferred = public.deferred(obj);\n        deferred = private.deferred.attach_xhr(deferred,obj);\n        return deferred;\n    }\n    \n    \n    /**\n     *    \n     * \n     * @param {type} deferred\n     * @param {type} obj\n     * \n     * obj:\n     * =========\n     * <rol> boolean. RESOLVE-ON-LOAD. Whether to resolve the XHR / included file on  load.\n     * \n     * rol == 1     =>  Promise is resolved onload.\n     *                  No value can be set to promise object.\n     *                  Must define itself into global space. \n     *                  \n     * rol == 0     =>  Promise NOT resolved onload. \n     *                  Value can be set to promise object.\n     *                  Must define itself into global space.\n     *                  \n     * <fs> boolean. Filesystem. Whether to loda the file from server filesytem or via http server\n     *                  \n     * @returns {unresolved}\n     */\n    ,attach_xhr : function(deferred,obj){\n\n        //DEFAULT ALL TO RESOLVE-ON-LOAD\n        obj.rol = (typeof obj.rol !== 'undefined') ? obj.rol : 1;\n\n        //BROWSER\n        if(typeof process !== 'object' || process + '' !== '[object process]'){\n            \n            this.head = this.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\n            switch(true){\n\n                case(obj.type==='css' || obj.type==='link'):\n\n                    var node = document.createElement(\"link\");\n                    node.setAttribute(\"href\",obj.url);\n                    node.setAttribute(\"type\",\"text/css\");\n                    node.setAttribute(\"rel\",\"stylesheet\");\n                    (function(){\n                        node.onload = node.onreadystatechange = function(){\n                           deferred.resolve(node);\n                       };\n                    }(node));\n                    this.head.appendChild(node);\n                    break;\n\n                case(obj.type==='script'):\n                    \n                    var node = document.createElement(\"script\");\n                    node.type = 'text/javascript';\n                    node.setAttribute(\"src\",obj.url);\n                    node.setAttribute(\"id\",obj.id);\n                    node.onerror = function(){\n                        deferred.reject(\"Failed to load path: \" + obj.url);\n                    };\n                    \n                    if(obj.rol === 1){\n                        (function(node){\n                            node.onload = node.onreadystatechange = function(){\n                                if(deferred.settled !== 1){\n                                    deferred.resolve(node);\n                                }\n                            };\n                        }(node))\n                    }\n                    \n                    //put scripts before <base> elements, after <meta>\n                    this.head.appendChild(node);\n                    break;\n\n                case(obj.type==='json'):\n                default:\n                    \n                    var r;\n                    var req = new XMLHttpRequest();\n                    req.open('GET', obj.url, true);\n\n                    if(typeof obj.show_messages !== 'undefined'){\n                        req.setRequestHeader('show-messages', obj.show_messages);\n                    }\n                    if(typeof obj.return_packet !== 'undefined'){\n                        req.setRequestHeader('return-packet', obj.return_packet);\n                    }\n\n                    req.onreadystatechange = function() {\n                        if (req.readyState === 4) {\n                            if(req.status === 200){\n                                r = req.responseText;\n                                if(obj.type === 'json'){\n                                    try{\n                                        r = JSON.parse(r);\n                                    }\n                                    catch(e){\n                                        public.debug([\"Could not decode JSON\",obj.url,r]);\n\n                                    }\n                                }\n                                deferred.resolve(r);\n                            }\n                            else{\n                                deferred.reject(\"Error loading \"+obj.url);\n                            }\n                        }\n                    };\n                    req.send(null);\n            }\n        }\n        //NODEJS\n        else{\n            \n            function process_result(deferred,data,obj){\n\n                switch(true){\n\n                    case(obj.type==='script'):\n                        \n                        //INTERPRET STRING AS JS\n                        data = require(data);\n\n                        //RESOLVE ON LOAD?\n                        if(obj.rol === 1){\n                            if(!deferred.settled){\n                                deferred.resolve(data);\n                            }\n                        }\n                        break;\n\n                    case(obj.type === 'json'):\n                        data = JSON.parse(data);\n                        deferred.resolve(data);\n                        break;\n                        \n                    case(obj.type==='css' || obj.type==='link'):\n                    default:\n                        deferred.resolve(data);\n                }\n            }\n            \n            \n            if(obj.remote){\n                var request = require('request');\n                request.get(obj.url, function (error, response, body) {\n                    if (!error && response.statusCode == 200) {\n                        process_result(deferred,body,obj);\n                    }\n                });\n\n            }\n            else{\n                var fs = require('fs');\n                var cwd = process.cwd();\n                \n                (function(deferred,obj){\n                    \n                    //PREPEND PATH WITH CURRENT WORKING DIRECTORY OF PROCESS\n                    var path = obj.url;\n                    \n                    //REMOVE ANY RELATIVE PATH CHARACTERS \n                    //AS LONG AS PATH DOES NOT START WITH *\n                    //WHICH INDICATES ABSOLUTE PATH\n                    while (path.substring(0, 1) === \".\"\n                    || path.substring(0, 1) === \"/\") {\n                        path = path.substring(1);\n                    }\n\n                    path = cwd + '/' + path;\n                     \n                    fs.readFile(path, 'utf8', function (err, data) {\n\n                        if (err){\n                            public.debug(\"File \" + obj.url + \" not found @ local path '\" + path +\"'\");\n                            process.exit();\n                        }\n\n                        process_result(deferred,data,obj);\n                    });\n\n                }(deferred,obj));\n                    \n            }\n\n        }\n        \n        return deferred;\n    }\n};","public.queue = function(deps,options){\n\n    var _o;\n    deps = deps || [];  \n    \n    if(!options || !options.id){\n        public.debug(\"Queues require an id.\");\n    }\n    \n    //DOES NOT ALREADY EXIST\n    if(!public.list[options.id]){\n        \n        //CREATE NEW QUEUE OBJECT\n        var _o = private.queue.factory(options);\n\n        //ACTIVATE QUEUE\n        _o = private.queue.activate(_o,options,deps);\n\n    }\n    //ALREADY EXISTS\n    else {\n        \n        _o = public.list[options.id];\n        \n        if(_o.model !== 'queue'){\n        //MATCH FOUND BUT NOT A QUEUE, UPGRADE TO ONE\n\n            options.overwritable = 1;\n\n            _o = private.queue.upgrade(_o,options,deps);\n        }\n        else{\n            \n            //OVERWRITE ANY EXISTING OPTIONS\n            for(var i in options){\n                _o[i] = options[i];\n            }\n            \n            //ADD ADDITIONAL DEPENDENCIES IF NOT RESOLVED\n            if(deps.length > 0){\n                private.queue.tpl.add.call(_o,deps);\n            }\n            \n        }\n        \n        //RESUME RESOLUTION UNLESS SPECIFIED OTHERWISE\n        _o.halt_resolution = (typeof options.halt_resolution !== 'undefined') ?\n        options.halt_resolution : 0;\n    }\n    \n    return _o;\n};\n\n\nprivate.queue = {\n    \n    \n    factory : function(options){\n\n        //CREATE A NEW QUEUE OBJECT\n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,private.queue.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A QUEUE OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }    \n    \n    \n    /**\n     * Template object for all queues\n     * \n     * @type object\n     */\n    ,tpl : {\n        \n        model : 'queue'\n\n\n        //SET TRUE AFTER RESOLVER FIRED\n        ,resolver_fired : 0\n\n\n        //PREVENTS A QUEUE FROM RESOLVING EVEN IF ALL DEPENDENCIES MET\n        //PURPOSE: PREVENTS QUEUES CREATED BY ASSIGNMENT FROM RESOLVING \n        //BEFORE THEY ARE FORMALLY INSTANTIATED\n        ,halt_resolution : 0\n        \n\n        //USED TO CHECK STATE, ENSURES ONE COPY\n        ,upstream : {}\n        \n        \n        //USED RETURN VALUES, ENSURES ORDER\n        ,dependencies : []\n\n\n        ///////////////////////////////////////////////////\n        //  PUBLIC METHODS\n        ///////////////////////////////////////////////////\n\n\n        /**\n         * Add list of dependencies to a queue's upstream array.\n         * \n         * The queue will resolve once all the promises in its \n         * upstream array are resolved.\n         * \n         * When public.config.debug == 1, method will test each dependency is not\n         * previously scheduled to resolve downstream from the target, in which \n         * case it would never resolve because its upstream depends on it.\n         * \n         * @param {array} array of dependencies to add\n         * @returns {array} upstream\n         */\n        ,add : function(arr){\n\n            try{\n                if(arr.length === 0) return this.upstream;\n            }\n            catch(err){\n                public.debug(err);\n            }\n\n            //IF NOT PENDING, DO NOT ALLOW TO ADD\n            if(this._state !== 0){\n                return public.debug(\"Cannot add list to queue id:'\"+this.id\n                +\"'. Queue settled/in the process of being settled.\");\n            }\n\n            for(var a in arr){\n                \n                switch(true){\n\n                    //CHECK IF ID OF EXISTING PROMISE\n                    case(typeof arr[a] === 'string'):\n                        if(!public.list[arr[a]]){\n                            return public.debug(arr[a]+\"' does not exist so cannot be added to a queue.\");\n                        }\n                        else{\n                            arr[a] = public.list[arr[a]];\n                        }\n                        break;\n\n                    //IF NOT, ATTEMPT TO CONVERT IT TO A PROMISE\n                    case(typeof arr[a] === 'object' && typeof arr[a].then !== 'function'):\n                        arr[a] = private.deferred.convert_to_promise(arr[a]);\n                        break;\n\n                    //REF IS A PROMISE.\n                    case(typeof arr[a].then === 'function'):\n                        break;\n\n                    default:\n                        console.error(\"Object could not be converted to promise.\");\n                        console.error(arr[a]);\n                        debugger;\n                        continue;\n                }\n\n                //must check the target to see if the dependency exists in its downstream\n                for(var b in this.downstream){\n                    if(b === arr[a].id){\n                        return public.debug(\"Error adding upstream dependency '\"+arr[a].id+\"' to queue\"+\" '\"+this.id+\"'.\\n Promise object for '\"+arr[a].id+\"' is scheduled to resolve downstream from queue '\"+this.id+\"' so it can't be added upstream.\");\n                    }\n                }\n\n                //ADD TO UPSTREAM, DOWNSTREAM, DEPENDENCIES\n                this.upstream[arr[a].id] = arr[a];\n                arr[a].downstream[this.id] = this;\n                this.dependencies.push(arr[a]);\n\n            }\n\n            return this.upstream;\n        }\n\n\n        /**\n         * Remove list from a queue.\n         * \n         * @param {array} arr\n         * @returns {array} array of list the queue is upstream\n         */\n        ,remove : function(arr){\n\n            //IF NOT PENDING, DO NOT ALLOW REMOVAL\n            if(this._state !== 0){\n                console.error(\"Cannot remove list from queue id:'\"+this.id+\"'. Queue settled/in the process of being settled.\");\n                return false;\n            }\n\n            for(var a in arr){\n                if(this.upstream[arr[a].id]){\n                    delete this.upstream[arr[a].id];\n                    delete arr[a].downstream[this.id];\n                }\n            }\n        }\n\n\n        /**\n         * Resets an existing,settled queue back to waiting state.\n         * Clears out the downstream.\n         * Fails if not settled.\n         * \n         * @returns {obj}\n         */\n        ,reset : function(options){\n\n            if(this.settled !== 1 || this._state !== 1){\n                public.debug(\"Can only reset a queue settled without errors.\");\n            }\n\n            options = options || {};\n\n            this.settled = 0;\n            this._state = 0; \n            this.resolver_fired = 0;\n            this.done_fired = 0;\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n            \n            //CLEAR OUT THE DOWNSTREAM\n            this.downstream = {};\n            this.dependencies = [];\n\n            //SET NEW AUTO TIMEOUT\n            private.deferred.auto_timeout.call(this,options.timeout);\n\n            //POINTLESS - WILL JUST IMMEDIATELY RESOLVE SELF\n            //this.check_self()\n\n            return this;\n        }\n        \n        \n        /**\n         * Cauaes a queue to look over its dependencies and see if it \n         * can be resolved.\n         * \n         * This is done automatically by each dependency that loads,\n         * so is not needed unless:\n         * \n         * -debugging\n         * \n         * -the queue has been reset and no new\n         * dependencies were since added.\n         * \n         * @returns {int} State of the queue.\n         */\n        ,check_self : function(){\n            private.queue.receive_signal(this,this.id);\n            return this._state;\n        }\n    }\n    \n    \n    ///////////////////////////////////////////////////\n    //  PRIVATE METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * Activates a queue object.\n     * \n     * @param {object} o\n     * @param {object} options\n     * @param {array} deps\n     * @returns {object} queue\n     */\n    ,activate : function(o,options,deps){\n        \n        //ACTIVATE AS A DEFERRED\n        o = private.deferred.activate(o);\n\n        //ADD ANY DEFERREDS TO QUEUE\n        private.queue.tpl.add.call(o,deps);\n\n        //SEE IF CAN BE IMMEDIATELY RESOLVED BY CHECKING UPSTREAM\n        private.queue.receive_signal(o,o.id);\n        \n        //ASSIGN THIS QUEUE UPSTREAM TO OTHER QUEUES\n        if(o.assign){\n            for(var a in o.assign){\n                public.assign(o.assign[a],[o],true);\n            }\n        }\n        \n        return o;\n    }\n    \n    \n    /**\n    * A \"signal\" here causes a queue to look through each item in its upstream and \n    * check to see if all are resolved. \n    * \n    * Signals can only be received by a queue itself or a promise/deferred/queue\n    * in its upstream.\n    * \n    * @param {string} from_id\n    * @returns {void}\n    */\n    ,receive_signal : function(target,from_id){\n\n        if(target.halt_resolution === 1) return;\n\n       //MAKE SURE THE SIGNAL WAS FROM A PROMISE BEING LISTENED TO\n       //BUT ALLOW SELF STATUS CHECK\n       if(from_id !== target.id && !target.upstream[from_id]){\n           console.error(from_id + \" can't signal \" + target.id + \" because not in upstream.\");\n           debugger;\n           return;\n       }\n       //RUN THROUGH QUEUE OF OBSERVING PROMISES TO SEE IF ALL DONE\n       else{\n           var status = 1;\n           for(var i in target.upstream){\n               //SETS STATUS TO 0 IF ANY OBSERVING HAVE FAILED, BUT NOT IF PENDING OR RESOLVED\n               if(target.upstream[i]._state !== 1) {\n                   status = target.upstream[i]._state;\n                   break;\n               }\n           }\n       }\n\n       //RESOLVE QUEUE IF UPSTREAM FINISHED\n       if(status === 1){\n           \n            //GET RETURN VALUES PER DEPENDENCIES, WHICH SAVES ORDER AND \n            //REPORTS DUPLICATES\n            var values = [];\n            for(var i in target.dependencies){\n                values.push(target.dependencies[i].value);\n            }\n\n            private.deferred.tpl.resolve.call(target,values);\n       }\n\n       if(status === 2){\n           var err = [\n               target.id+\" dependency '\"+target.upstream[i].id + \"' was rejected.\"\n               ,target.upstream[i].arguments\n           ];\n           private.deferred.tpl.reject.apply(target,err);\n       }\n    }\n\n\n    /**\n    * Upgrades a promise object to a queue.\n    * \n    * @param {object} prom\n    * @param {object} options\n    * @param {array} dependencies\n    * @returns {object} queue object\n    */\n    ,upgrade : function(obj,options,deps){\n\n        if(obj.settled !== 0 || (obj.model !== 'promise' && obj.model !== 'deferred')){\n            return public.debug('Can only upgrade unsettled promise or deferred into a queue.');\n        }\n        \n       //GET A NEW QUEUE OBJECT AND MERGE IN\n        var _o = public.naive_cloner([\n            private.queue.tpl\n            ,options\n        ]);\n        \n        for(var i in _o){\n           obj[i] = _o[i];\n        }\n        \n        delete _o;\n\n        //CREATE NEW INSTANCE OF QUEUE\n        obj = private.queue.activate(obj,options,deps);\n\n        //RETURN QUEUE OBJECT\n        return obj;\n    }\n    \n};","public.cast = function(obj){\n            \n    var required = [\"then\",\"error\",\"id\"];\n    for(var i in required){\n        if(!obj[required[i]]){\n            return public.debug(\"Castable objects require: \" + required[i]);\n        }\n    }\n\n    //GET A BLANK DEFERRED TO PLAY WITH\n    var deferred = public.deferred({\n        id : obj.id\n    });\n\n    //CREATE RESOLVER [ASYNC]\n    var resolver = function(){\n        deferred.resolve.call(deferred,arguments[0]);\n    };\n\n    //SET RESOLVER\n    obj.then(resolver);\n\n    //CREATE REJECTOR [ASYNC]\n    var err = function(err){\n        deferred.reject(err);\n    };\n\n    //SET REJECTOR\n    obj.error(err);\n\n    //RETURN THE DEFERRED\n    return deferred;\n}\n        ","if(typeof process === 'object' && process + '' === '[object process]'){\n    // is node\n    module.exports = public;\n}\nelse{\n    // not node\n    Orgy = public;\n}"]}