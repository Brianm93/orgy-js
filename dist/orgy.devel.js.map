{"version":3,"file":"orgy.devel.js","sources":["../src/js/main.js","../src/js/deferred.js","../src/js/queue.js","../src/js/cast.js","../src/js/build.js"],"names":["public","private","list","modules_exported","modules_loaded","registered_callbacks","i","config","obj","debug","define","id","data","def","settled","__dependencies","Array","_was_defined","queue","resolver","__resolver","bind","deferred","resolve","process","module","exports","assign","tgt","arr","add","q","then","this","model","remove","register_callback","name","fn","array_to_function","target","clone","slice","root_id","splice","root","hasOwnProperty","value","window","console","error","x","y","l","length","args","end","parent","b","key","constructor","naive_cloner","donors","o","a","JSON","parse","stringify","msg","force_debug_mode","debug_mode","mode","exit","autopath","document","options","_o","factory","activate","tpl","done_fired","is_orgy_module","_state","_timeout_id","error_q","then_q","done_fn","reject_q","downstream","execution_history","overwritable","timeout","remote","resolver_fired","hook_before_success","call","v","push","set","log","clearTimeout","_set_state","done","reject","err","unshift","catch_params","apply","arguments","rejector","r","int","_signal_downstream","_get_state","_make_id","autonamed","auto_timeout","type","scope","setTimeout","auto_timeout_cb","msgs","search_obj_recursively","cb","receive_signal","propName","breadcrumb","r1","indexOf","convert_to_promise","url","split","pop","search","join","prom","_wrap_event","promise","warn","_wrap_timer","_wrap_xhr","$","ready","load","on","_start","Date","getTime","_end","start","elapsed","dep","required","attach_xhr","Orgy","replace","head","getElementsByTagName","documentElement","node","createElement","setAttribute","onload","onreadystatechange","onerror","appendChild","reeject","req","XMLHttpRequest","open","show_messages","setRequestHeader","return_packet","readyState","status","responseText","e","send","process_result","request","require","get","response","body","statusCode","append","fs","readFile","cwd","deps","upgrade","halt_resolution","upstream","dependencies","reset","check_self","from_id","values","cast"],"mappings":"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","sourcesContent":["var public = {};\nvar private = {};\n\n\n////////////////////////////////////////\n//  PUBLIC VARIABLES\n////////////////////////////////////////\n\n\n/**\n * A directory of all promises, deferreds, and queues.\n * @type object\n */\npublic.list = {};\n\n\n/**\n * Array of all exported modules\n * @type Array\n */\npublic.modules_exported = [];\n\n\n/**\n * Index number of last module loaded in public.modules_exported\n * @type Number\n */\npublic.modules_loaded = 0;\n\n\n/** \n * Callbacks that are run on every resolved item\n * \n */\npublic.registered_callbacks = {};\n\n\n/**\n * iterator for ids\n * @type integer\n */\npublic.i = 0;\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\n/**\n * Stores document context for nodejs.\n * \n * @type string\n */\npublic.config = function(obj){\n    \n    if(obj){\n        for(var i in obj){\n            if(typeof private.config[i] !== 'undefined'){\n                private.config[i] = obj[i];\n            }\n            else{\n                return public.debug(\"Property '\"+i+\"' is not configurable.\");\n            }\n        }\n    }\n    \n    \n    return private.config;\n}\n\n\n/**\n* Creates a new promise from a value and an id and automatically resolves it.\n* \n*     obj.__has_ui = (typeof obj.__has_ui !== 'undefined') ? false : obj.__has_ui;\n* \n* @param {string} id\n* @param {mixed} data\n* @returns {object} resolved promise\n*/\npublic.define = function(id,data){\n    \n    var def;\n\n    //MAKE SURE NOT TRYING TO RESOLVE EXISTING DEF\n    if(public.list[id] && public.list[id].settled === 1){\n        return public.debug(\"Can't define \" + id + \". Already resolved.\");\n    }\n    \n    //ORGY STYLE MODULE HANDLING\n    if(typeof data === 'object' && data.__dependencies instanceof Array){\n\n        //CHECK IF LOADED FROM PENDING REMOTE REQUEST\n        if(public.list[id]){\n            //PREVENTS FROM CALLER FILE'S ONLOAD EVENT FROM RESOLVING \n            public.list[id]._was_defined = 1;\n        }\n\n        public.queue(data.__dependencies,{\n            id : id\n            ,resolver : (typeof data.__resolver === 'function')\n            ? data.__resolver.bind(data) : null\n        });\n    }\n    else{\n\n        //CREATE/GET DEFERRED\n        var def = public.deferred({\n           id : id\n        });\n\n        //SETTLE \n        def.resolve(data);\n       \n    }\n    \n    \n    if(typeof process === 'object' && process + '' === '[object process]'){\n        module.exports = def;\n    }\n    else{\n        return def;\n    }\n};\n\n\n/**\n * Add/remove an upstream dependency to/from a queue. \n * \n * Can use a queue id, even for a queue that is yet to be created.\n * \n * @param {string} tgt | queue / queue id\n * @param {array}  arr | list/promise ids,dependencies\n * @param {boolean} add | add if true, remove if false\n * \n * @return {array} queue of list\n */\npublic.assign = function(tgt,arr,add){\n\n    add = (typeof add === \"boolean\") ? add : 1;\n\n    var id,q;\n    switch(true){\n        case(typeof tgt === 'object' && typeof tgt.then === 'function'):\n            id = tgt.id;\n            break;\n        case(typeof tgt === 'string'):\n            id = tgt;\n            break;\n        default:\n            return public.debug(\"Assign target must be a queue object or the id of a queue.\");\n    }\n\n    //IF TARGET ALREADY LISTED\n    if(this.list[id] && this.list[id].model === 'queue'){\n        q = this.list[id];\n        \n        //=> ADD TO QUEUE'S UPSTREAM\n        if(add){\n            q.add(arr);\n        }\n        //=> REMOVE FROM QUEUE'S UPSTREAM\n        else{\n            q.remove(arr);\n        }\n    }\n    //CREATE NEW QUEUE AND ADD DEPENDENCIES\n    else if(add){\n\n        q = public.queue(arr,{\n            id : id\n        });\n    }\n    //ERROR: CAN'T REMOVE FROM A QUEUE THAT DOES NOT EXIST\n    else{\n        public.debug(\"Cannot remove dependencies from a queue that does not exist.\");\n    }\n\n    return q;\n};\n\n\npublic.register_callback = function(name,fn){\n    public.registered_callbacks[name] = fn;\n};\n\n    \n/**\n * Converts a specially formatted array into a function.\n * \n * \n * @param {type} target\n * @returns {object}\n */\npublic.array_to_function = function(target){\n\n    //CLONE TARGET\n    var clone = target.slice(0);\n\n    var root_id = clone[0];\n    clone.splice(0,1);\n\n    var root;\n    if(public.list[root_id] && public.list[root_id].hasOwnProperty(\"value\")){\n        root = public.list[root_id].value; \n    }\n    else{\n        root = window[root_id];\n    }\n\n\n    if(typeof root === 'undefined'){\n        console.error(root_id + \" not found on window or public.list\");\n        debugger;\n    }\n\n\n    var x,y;\n    x = y = root;\n\n    //REMOVE LAST ARRAY ELEMENT (ARGS)\n    var l = clone.length;\n    var args = clone[l-1];\n\n    //POINTER TO A FUNCTION WILL HAVE AN ARRAY AS LAST ELEMENT\n    var end;\n    if(args instanceof Array){\n        end = l - 1;\n    }\n    //POINTER TO AN ARRAY WILL NOT\n    else{\n        end = l;\n    }\n\n    var parent;\n    for(var b=0; b < end; b++){\n        var key = clone[b];\n\n        if(b === end - 1 || l === 1){\n           parent = x; \n        }\n\n        if(typeof x[key] === 'undefined'){\n            console.error(\"Property '\"+key+\"' not found on object:\", x);\n            debugger;\n            return;\n        }\n        x = x[key];\n        y = x;\n    }    \n\n    return {\n        constructor : x\n        ,args : args\n        ,parent : parent\n    };\n}\n\n\n/**\n * Makes a shallow copy of an array. \n * Makes a copy of an object so long as it is JSON\n * \n * @param {array} array of donor objects, overwritten from right to left\n * @returns {object}\n */\npublic.naive_cloner = function(donors){\n    var o = {};\n    for(var a in donors){\n        for(var b in donors[a]){\n            if(donors[a][b] instanceof Array){\n                o[b] = donors[a][b].slice(0);\n            }\n            else if(typeof donors[a][b] === 'object'){\n                o[b] = JSON.parse(JSON.stringify(donors[a][b]));\n            }\n            else{\n                o[b] = donors[a][b];\n            }\n        }\n    }\n    return o;\n}\n        \n\n/**\n * Debugging method.\n * \n * @param {string|array} msg\n * @param {boolean} force_debug_mode   Forces debugger when set to true. \n * @returns {Boolean}\n */\npublic.debug = function(msg,force_debug_mode){\n    if(msg instanceof Array){\n        for(var i in msg){\n            console.error(\"ERROR-\"+i+\": \"+msg[i]);\n        }\n    }\n    else{\n        console.error(\"ERROR: \"+msg);\n    }\n    if(private.config.debug_mode == 1 || force_debug_mode){\n        debugger;\n    }\n    if(private.config.mode === 'browser'){\n        return false;\n    }\n    else{\n        process.exit();\n    }\n}\n\n\n////////////////////////////////////////\n//  PRIVATE VARIABLES\n////////////////////////////////////////\n\n\n/**\n * Configuration values.\n * \n * @type object\n */\nprivate.config = {\n    \n    autopath : ''\n    ,document : null\n    ,debug_mode : 1\n    ,mode : (function(){\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            // is node\n            return \"node\"\n        }\n        else{\n            // not node\n            return \"browser\"\n        }\n    }())\n};","public.deferred = function(options){\n    \n    if(!options || typeof options.id !== 'string'){\n        return public.debug(\"Must set id.\");\n    }\n    \n    if(!public.list[options.id]){\n        //CREATE NEW INSTANCE OF DEFERRED CLASS\n        var _o = private.deferred.factory(options);\n\n        //ACTIVATE DEFERRED\n        _o = private.deferred.activate(_o);\n    }\n    else{\n        _o = public.list[options.id];\n    }\n    \n    return _o;\n};\n\n\n\nprivate.deferred = {\n    \n    factory : function(options){\n        \n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A DEFERRED OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }\n    \n    \n    ,tpl : {\n        \n        model : \"deferred\"\n\n        //A COUNTER FOR AUT0-GENERATED PROMISE ID'S\n        ,settled : 0 \n        ,id : null\n        ,done_fired : 0\n        ,is_orgy_module : 0\n\n        /**\n         * STATE CODES:\n         * ------------------\n         * -1   => SETTLING [EXECUTING CALLBACKS]\n         *  0   => PENDING\n         *  1   => RESOLVED / FULFILLED\n         *  2   => REJECTED \n         */\n        ,_state : 0\n        ,_timeout_id : null\n        ,value : []\n\n        ,error_q : []  \n        ,then_q : []\n        ,done_fn : null\n        ,reject_q : []\n\n        //PROMISE HAS OBSERVERS BUT DOES NOT OBSERVE OTHERS\n        ,downstream : {}\n        ,execution_history : []\n        ,overwritable : 0   //WHEN TRUE, ALLOWS RE-INIT [FOR UPGRADES TO A QUEUE]          \n        ,timeout : 5000\n\n        /**\n         * REMOTE\n         * \n         * REMOTE == 1  =>  [DEFAULT] Make http request for file\n         * \n         * REMOTE == 0  =>  Read file directly from the filesystem\n         * \n         * ONLY APPLIES TO SCRIPTS RUN UNDER NODE AS BROWSER HAS NO \n         * FILESYSTEM ACCESS\n         */\n        ,remote : 1\n\n        //ADDS TO MASTER LIST. ALWAYS DO THIS UNLESS UPGRADING A PROMISE TO A QUEUE\n        ,list : 1   \n\n        ,resolve : function(value){\n\n            if(this.settled !== 0){\n                public.debug(this.id + \" can't resolve. Only unsettled promise objects resolvable.\");\n            }\n\n            //SET STATE TO SETTLEMENT IN PROGRESS\n            this._state = -1; \n\n            //SET VALUE\n            this.value  = value;\n\n            //RUN RESOLVER BEFORE PROCEEDING\n            //EVEN IF THERE IS NO RESOLVER, SET IT TO FIRED WHEN CALLED\n            if(!this.resolver_fired){\n\n                this.resolver_fired = 1;\n\n                //FIRE THE RESOLVER IF SET\n                if(typeof this.resolver === 'function'){\n                    return private.deferred.hook_before_success.call(this,this.resolver,value);\n                }\n\n            }\n\n            //Allows .then chain to be held up by new async events created as the chain executes.\n            var v,fn,l=this.then_q.length;\n            for(var i = 0; i<l; i++){     \n\n                //REMOVE fn FROM THEN QUEUE. \n                //WHEN A PROMISE OBJ IS RETURNED, AND EXECUTION STOPPED WE\n                //DONT WANT TO REPEAAT A CALL TO SAME fn\n                fn = this.then_q.splice(0,1);\n\n                //CALL fn WITH PRECEDING RESULT OR IF NONE EXISTS, THE RESOLVER VALUE \n                v = private.deferred.hook_before_success.call(this,fn[0],v || this.value);\n                //v = fn[0].call(this, v || this.value);\n                \n                //SAVE fn TO EXECUTION HISTORY\n                this.execution_history.push(fn[0]);\n\n                //IF fn RETURNED AN UNSETTLED PROMISE\n                //WAIT FOR IT TO RESOLVE BEFORE PROCEEDING\n                //AND ADD THE RESULT TO THE END OF VALUE ARRAY\n                if(typeof v !== 'undefined' && v.then){\n                    \n                    //SET THE STATE BACK TO WAITING\n                    this._state = 0;\n                    \n                    //ADD IT TO QUEUE'S UPSTREAM\n                    this.add([v]);\n                    \n                    //END RESOLUTION ATTEMPT AND WAIT FOR v TO RESOLVE\n                    return;\n                }\n                //IF V RETURNED A VALUE MAKE IT THE NEW QUEUE VALUE\n                else if(typeof v !== 'undefined'){\n                    this.value = v;\n                }\n            }\n                        \n            //SET RETURN VALUE TO A GIVEN OBJECT PROPERTY\n            if(this.set){\n                //ARRAY IS TRANSORMED INTO A PATH TO POINT TO\n                if(this.set instanceof Array){\n                    //@todo make property of private to avoid external dependency\n                    var tgt = public.array_to_function(this.set);\n                    tgt.parent[tgt.args] = this.value;\n                }\n                //OTHErWISE ASSUMED TO BE AN OBJECT PROPERTY\n                else if (typeof this.set === 'function'){\n                    this.set(this.value);\n                }\n            }\n\n            //EXECUTE ANY GLOBALLY REGISTERED CALLBACKS\n            for (var i in public.registered_callbacks){\n                console.log(\"Orgy.js executing registered callback '\"+i+\"' on \" + this.id);\n                public.registered_callbacks[i].call(this);\n            }\n           \n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SET STATE TO RESOLVED\n            private.deferred._set_state.call(this,1);\n\n            this.done();\n                \n            return this;\n        }\n\n        ,reject : function(err){\n            \n            if(!(err instanceof Array)){\n                err = [err]\n            }\n            \n            err.unshift(\"REJECTED \"+this.model+\": '\"+this.id+\"'\");\n\n            public.debug(err);\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SAVE ERROR OBJECT TO MEMORY FOR USE IN CATCH CALLBACK\n            this.catch_params = err;\n\n            //SET STATE TO REJECTED\n            private.deferred._set_state.call(this,2);\n\n            //EXECUTE REJECTION QUEUE\n            for(var i in this.reject_q){\n                this.value.push(this.reject_q[i].apply(this,arguments));\n            }\n\n            return this;\n        }\n\n        ,then : function(fn,rejector){\n\n            switch(true){\n\n                //ERROR WAS PREVIOUSLY THROWN\n                case(this._state === 2):\n                    break;\n\n                case(this.done_fired === 1):\n                    public.debug(this.id+\" can't attach .then() after .done() has fired.\");\n                    break;\n\n                case(this.settled === 1 && this._state === 1 && !this.done_fired):\n                    var r = private.deferred.hook_before_success.call(this,fn,this.value);\n                    if(typeof r !== 'undefined'){\n                        this.value = r;\n                    }\n                    break;\n\n                default:\n\n                    //PUSH CALLBACK TO THEN QUEUE\n                    this.then_q.push(fn);\n\n                    //PUSH REJECT CALLBACK TO REJECTION QUEUE\n                    if(typeof rejector === 'function'){\n                        this.reject_q.push(rejector);\n                    }\n                    break;\n            }\n\n            return this;\n        }\n        \n        ,done : function(fn){\n            \n            if(this.done_fn === null){\n                if(fn){\n                    this.done_fn = fn\n                }\n            }\n            else if(fn){\n                public.debug(\"done() can only be called once.\");\n                return;\n            }\n            \n            if(this.settled === 1 && this._state === 1 && this.done_fn){\n                this.done_fired = 1;\n                private.deferred.hook_before_success.call(this,this.done_fn,this.value);\n            }\n        }\n\n    }\n\n    \n    ///////////////////////////////////////////////////\n    //  METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * Methods to run before then(), done() \n     * \n     * @param {type} fn\n     * @returns {undefined}\n     */\n    ,hook_before_success : function(fn,arr){\n        \n        return fn(arr,this);\n\n    }\n    \n    \n    /**\n     * \n     * @param {type} int\n     * @returns {undefined}\n     */\n    ,_set_state : function(int){\n\n        this._state = int;\n\n        //IF RESOLVED OR REJECTED, SETTLE\n        if(int === 1 || int === 2){\n            this.settled = 1;\n        }\n\n        private.deferred._signal_downstream.call(this,this);\n    }\n    \n    \n    ,_get_state : function(){\n        return this._state;\n    }\n\n\n    ,activate : function(obj){\n\n        //SET ID\n        if(!obj.id){\n            obj.id = private.deferred._make_id(obj.model);\n            obj.autonamed = true;\n        }\n\n        //MAKE SURE NAMING CONFLICT DOES NOT EXIST\n        if(public.list[obj.id] && !public.list[obj.id].overwritable){\n            public.debug(\"Tried to overwrite \"+obj.id+\" without overwrite permissions.\");\n            return public.list[obj.id];\n        }\n        else{\n            //SAVE TO MASTER LIST\n            public.list[obj.id] = obj;\n        }\n\n        //AUTO TIMEOUT\n        private.deferred.auto_timeout.call(obj);\n\n        return obj;\n    }\n\n\n    /**\n     * Sets the automatic timeout on a promise object.\n     * \n     * @param {integer} optional. timeout\n     * @returns {Boolean}\n     */\n    ,auto_timeout : function(timeout){\n\n        this.timeout = (typeof timeout === 'undefined') ? this.timeout : timeout;\n\n        //AUTO REJECT ON timeout\n        if(!this.type || this.type !== 'timer'){\n\n            //DELETE PREVIOUS TIMEOUT IF EXISTS\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            if(typeof this.timeout === 'undefined'){\n                public.debug(this.id+\" Auto timeout this.timeout cannot be undefined.\");\n            }\n            else if (this.timeout === -1){\n                //NO AUTO TIMEOUT SET\n                return false;\n            }\n            var scope = this;\n\n            this._timeout_id = setTimeout(function(){\n                private.deferred.auto_timeout_cb.call(scope);\n            }, this.timeout);\n        }\n        else{\n            //@todo WHEN A TIMER, ADD DURATION TO ALL UPSTREAM AND LATERAL?\n        }\n        return true;\n    }\n\n\n    /**\n     * Callback for autotimeout. Declaration here avoids memory leak.\n     * \n     * @param {type} exp\n     * @returns {undefined}\n     */\n    ,auto_timeout_cb : function(){\n        \n        if(this._state !== 1){\n\n            //GET THE UPSTREAM ERROR ID\n            var msgs = [];\n            var scope = this;\n\n            var fn = function(obj){\n                if(obj._state !== 1){\n                    return obj.id\n                }\n                else{\n                    return false;\n                }\n            };\n\n            /**\n             * Run over a given object property recursively, applying callback until \n             * callback returns a non-false value.\n             */\n            var r = private.deferred.search_obj_recursively(this,'upstream',fn);\n            msgs.push(scope.id + \": rejected by auto timeout after \" + this.timeout + \"ms\");\n            msgs.push(\"Cause:\");\n            msgs.push(r);\n            return private.deferred.tpl.reject.call(this,msgs);\n            \n        }\n    }\n\n\n    ,error : function(cb){\n\n        //IF ERROR ALREADY THROWN, EXECUTE CB IMMEDIATELY\n        if(this._state === 2){\n            cb();\n        }\n        else{\n            this.error_q.push(cb);\n        }\n\n        return this;\n    }\n\n\n    ,_make_id : function(model){\n        return \"anonymous-\" + model + \"-\" + (public.i++);\n    }\n\n\n    /**\n     * Signals all downstream promises that private promise object's state has changed.\n     * \n     * \n     * @todo Since the same queue may have been assigned twice directly or \n     * indirectly via shared dependencies, make sure not to double resolve\n     * - which throws an error.\n     *     \n     * @returns {void}\n     */\n    ,_signal_downstream : function(target){\n\n        //MAKE SURE ALL DOWNSTREAM IS UNSETTLED\n        for(var i in target.downstream){\n            if(target.downstream[i].settled === 1){\n                public.debug(target.id + \" tried to settle promise \"+\"'\"+target.downstream[i].id+\"' that has already been settled.\");\n            }\n        }\n\n        //NOW THAT WE KNOW ALL DOWNSTREAM IS UNSETTLED, WE CAN IGNORE ANY\n        //SETTLED THAT RESULT AS A SIDE EFFECT TO ANOTHER SETTLEMENT\n        for (var i in target.downstream){\n            if(target.downstream[i].settled !== 1){\n                private.queue.receive_signal(target.downstream[i],target.id);\n            }\n        }\n    }\n    \n    \n    /**\n    * Run over a given object property recursively, applying callback until \n    * callback returns a non-false value.\n    * \n    * @param {object} obj      \n    * @param {string} propName          The property name of the array to bubble up\n    * @param {function} fn              The test callback to be applied to each object\n    * @param {array} breadcrumb         The breadcrumb through the chain of the first match\n    * @returns {mixed}\n    */\n    ,search_obj_recursively : function(obj,propName,fn,breadcrumb){\n      \n        if(typeof breadcrumb === 'undefined'){\n            breadcrumb = [obj.id];\n        }\n      \n        var r1;\n\n//debugger;\n        \n        for(var i in obj[propName]){\n\n            //RUN TEST\n            r1 = fn(obj[propName][i]);\n            \n            if(r1 !== false){\n            //MATCH RETURNED. RECURSE INTO MATCH IF HAS PROPERTY OF SAME NAME TO SEARCH\n                //CHECK THAT WE AREN'T CAUGHT IN A CIRCULAR LOOP\n                if(breadcrumb.indexOf(r1) !== -1){\n                    return public.debug([\n                        \"Circular condition in recursive search of obj property '\"\n                            +propName+\"'. Offending value: \"+r1\n                        ,breadcrumb\n                    ]);\n                }\n                \n                breadcrumb.push(r1);\n\n                if(obj[propName][i][propName]){\n                    return private.deferred.search_obj_recursively(obj[propName][i],propName,fn,breadcrumb);\n                }\n                \n                break;\n            }\n\n        }\n\n        return breadcrumb;\n    }\n    \n    \n    /**\n     * Converts a promise description into a promise.\n     * \n     * @param {type} obj\n     * @returns {undefined}\n     */\n    ,convert_to_promise : function(obj){\n \n        //IF ALREADY EXISTS, RETURN EXISTING\n        if(!obj.id){\n            if(obj.type === 'timer'){\n                obj.id = \"timer-\" + obj.timeout + \"-\"+public.i++;\n            }\n            else if(typeof obj.url === 'string'){\n                obj.id = obj.url.split(\"/\").pop();\n                //REMOVE .js FROM ID\n                if(obj.id.search(\".js\")!== -1){\n                    obj.id = obj.id.split(\".\");\n                    obj.id.pop();\n                    obj.id = obj.id.join(\".\");\n                }\n            }\n            else{\n                return public.debug([\"Dependency type '\"+obj.type+\"' requires id, but id undefined.\",obj]);\n            }\n        }\n\n        if(obj.type !== 'timer'){\n            //RETURN THE PROMISE IF IT ALREADY EXISTS\n            if(typeof public.list[obj.id] !== 'undefined'){\n                return public.list[obj.id];\n            }\n        }\n\n        //CONVERT DEPENDENCY TO PROMISE\n        var prom;\n        switch(true){\n\n            //EVENT\n            case(obj.type === 'event'):\n                prom = private.deferred._wrap_event(obj);\n                break;\n\n            //ALREADY A PROMISE\n            case(obj.type === 'deferred'):\n            case(obj.type === 'promise' || obj.then):   \n\n                switch(true){\n                    \n                    //OBJECT PROPERTY .promise EXPECTED TO RETURN A PROMISE\n                    case(typeof obj.promise === 'function'):\n                        if(obj.scope){\n                            prom = obj.promise.call(obj.scope);\n                        }\n                        else{\n                            prom = obj.promise();\n                        }\n                        break;\n                        \n                    //OBJECT IS A PROMISE\n                    case(obj.then):\n                        prom = obj;\n                        break;\n                    \n                    //OBJECT IS A REFERENCE TO A PROMISE\n                    case(typeof obj.id === 'string'):\n                        //GET EXISTING\n                        if(public.list[obj.id]){\n                            prom = public.list[obj.id];\n                        }\n                        //CREATE DEFERRED\n                        else{\n                            console.warn(\"Promise '\"+obj.id +\"': did not exist. Auto creating new deferred.\");\n                            prom = public.deferred({\n                                id : obj.id\n                            });\n                        };\n                        break;\n                        \n                    default:\n                        \n                }\n\n                //MAKE SURE IS PROMISE\n                if(typeof prom !== 'object' || !prom.then){\n                    console.error(\"Dependency labeled as a promise did not return a promise.\");\n                    console.error(obj);\n                    debugger;\n                    return false;\n                }\n                break;\n\n            case(obj.type === 'timer'):\n                prom = private.deferred._wrap_timer(obj);\n                break;\n\n            //XHR\n            default:\n                obj.type = obj.type || \"default\";\n                prom = private.deferred._wrap_xhr(obj);\n        }\n        \n        //INDEX PROMISE BY ID FOR FUTURE REFERENCING\n        public.list[obj.id] = prom;\n\n        return prom;\n    }\n    \n    \n    /**\n     * Converts a reference to a DOM event to a promise.\n     * Resolved on first event trigger.\n     * \n     * @todo remove jquery dependency\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_event : function(obj){\n\n        var def = public.deferred({\n            id : obj.id\n        });\n\n        //BROWSER\n        if(typeof document !== 'undefined' && typeof window !== 'undefined'){\n            \n            if(typeof $ !== 'function'){\n                var msg = 'window and document based events depend on jQuery';\n                console.error(msg);\n                debugger;\n                def.reject(msg);\n            }\n            else{\n                //For now, depend on jquery for IE8 DOMContentLoaded polyfill\n                switch(true){\n                    case(obj.id === 'ready' || obj.id === 'DOMContentLoaded'):\n                        $(document).ready(function(){\n                            def.resolve(1);\n                        });\n                        break;\n                    case(obj.id === 'load'):\n                        $(window).load(function(){\n                            def.resolve(1);\n                        });\n                        break;\n                    default:\n                        $(document).on(obj.id,\"body\",function(){\n                            def.resolve(1);\n                        });\n                }\n            }\n        }\n\n        return def;\n    }\n    \n\n    ,_wrap_timer : function(obj){\n\n        var prom = public.deferred(obj);\n        \n        (function(prom){\n            \n            var _start = new Date().getTime();      \n            setTimeout(function(){\n                var _end = new Date().getTime();\n                prom.resolve({\n                    start : _start\n                    ,end : _end\n                    ,elapsed : _end - _start\n                    ,timeout : obj.timeout\n                });\n            },obj.timeout);\n            \n        }(prom));\n        \n        return prom;\n    }\n    \n    \n    /**\n     * Creates a deferred object that depends on the loading of a file.\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_xhr : function(dep){\n        \n        \n        var required = [\"id\",\"url\"];\n        for(var i in required){\n            if(!dep[required[i]]){\n                return public.debug(\"File requests converted to promises require: \" + required[i]);\n            }\n        }\n\n        \n        //IF PROMISE FOR THIS URL ALREADY EXISTS, RETURN IT\n        if(public.list[dep.id]){\n            return public.list[dep.id];\n        }\n        \n\n        //CONVERT TO DEFERRED:\n        var deferred;\n        deferred = public.deferred(dep);\n        deferred = private.deferred.attach_xhr(deferred,dep);\n        return deferred;\n    }\n    \n    \n    /**\n     *    \n     * \n     * @param {type} deferred\n     * @param {type} dep\n     * \n     * dep:\n     * =========\n     *                  \n     * <fs> boolean. Filesystem. Whether to loda the file from server filesytem or via http server\n     *                  \n     * @returns {unresolved}\n     */\n    ,attach_xhr : function(deferred,dep){\n\n        //GET AUTOPATH\n        if(dep.url[0] === \"*\"){\n                \n            var autopath = Orgy.config().autopath;\n            \n            if(typeof autopath !== 'string'){\n                public.debug([\n                        \"config.autopath must be set to a string.\"\n                    ]\n                    ,[\n                        \"When a dependency url begins with *, it is replaced by the config property 'autopath'.\"\n                ]);\n            }\n            else{\n                dep.url = dep.url.replace(/\\*/,autopath);\n            }\n        }\n        \n        \n        //BROWSER\n        if(typeof process !== 'object' || process + '' !== '[object process]'){\n            \n            this.head = this.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\n            switch(true){\n\n                case(dep.type==='script'):\n\n                    var node = document.createElement(\"script\");\n                    node.type = 'text/javascript';\n                    node.setAttribute(\"src\",dep.url);\n                    node.setAttribute(\"id\",dep.id);\n                    \n                    (function(node,dep,deferred){\n\n                        node.onload = node.onreadystatechange = function(){\n                            //Do not autoresolve modules, which are\n                            //self-resolved via Orgy.export\n                            if(deferred._was_defined === 0){\n                                deferred.resolve((typeof node.value !== 'undefined') ? node.value : node)\n                            }\n                        };\n                        node.onerror = function(){\n                            deferred.reject(\"Failed to load path: \" + dep.url);\n                        };\n                    }(node,dep,deferred))\n                    \n                    //put scripts before <base> elements, after <meta>\n                    this.head.appendChild(node);\n                    break;\n                    \n                case(dep.type==='css' || dep.type==='link'):\n\n                    var node = document.createElement(\"link\");\n                    node.setAttribute(\"href\",dep.url);\n                    node.setAttribute(\"type\",\"text/css\");\n                    node.setAttribute(\"rel\",\"stylesheet\");\n                    \n                    if(node.onload){\n                        (function(node,dep,deferred){\n                            node.onload = node.onreadystatechange = function(){\n                               deferred.resolve(node);\n                           };\n\n                           node.onerror = function(){\n                               deferred.reeject(\"Failed to load path: \" + dep.url);\n                           }\n\n                        }(node,dep,deferred));\n                        \n                        this.head.appendChild(node);\n                        break;\n                    }\n                    else{\n                        //ADD NODE BUT MAKE XHR REQUEST TO CHECK FILE RECEIVED\n                        this.head.appendChild(node);\n                    }\n\n                case(dep.type==='json'):\n                default:\n                    \n                    var r;\n                    var req = new XMLHttpRequest();\n                    req.open('GET', dep.url, true);\n\n                    if(typeof dep.show_messages !== 'undefined'){\n                        req.setRequestHeader('show-messages', dep.show_messages);\n                    }\n                    if(typeof dep.return_packet !== 'undefined'){\n                        req.setRequestHeader('return-packet', dep.return_packet);\n                    }\n\n                    (function(dep,deferred){\n                        req.onreadystatechange = function() {\n                            if (req.readyState === 4) {\n                                if(req.status === 200){\n                                    r = req.responseText;\n                                    if(dep.type === 'json'){\n                                        try{\n                                            r = JSON.parse(r);\n                                        }\n                                        catch(e){\n                                            public.debug([\"Could not decode JSON\",dep.url,r]);\n\n                                        }\n                                    }\n                                    //WE WANT TO RESOLVE WITH DOM NODE FOR CSS FILES\n                                    deferred.resolve(node || r);\n                                }\n                                else{\n                                    deferred.reject(\"Error loading \"+dep.url);\n                                }\n                            }\n                        };\n                    }(dep,deferred));\n\n                    req.send(null);\n            }\n        }\n        //NODEJS\n        else{\n\n            function process_result(deferred,data,dep){\n\n                switch(true){\n\n                    case(dep.type === 'json'):\n                        data = JSON.parse(data);\n                        deferred.resolve(data);\n                        break;\n                        \n                    default:\n                        deferred.resolve(data);\n                        \n                }\n            }     \n            \n            if(dep.remote){\n                var request = require('request');\n                request.get(dep.url, function (error, response, body) {\n                    if (!error && response.statusCode == 200) {\n                        process_result(deferred,body,dep);\n                    }\n                });\n\n            }\n            else{\n                \n                //DON'T GET SCRIPTS AS TEXT\n                if(dep.type === 'script'){\n                    var data = require(dep.url);\n                    deferred.resolve(data);\n                }\n                //DON'T GET CSS, JUST ADD NODE\n                else if(dep.type === 'css'){\n                    \n                    if(private.config.document !== null){\n                        var node = private.config.document('head').append('<link rel=\"stylesheet\" href=\"'+dep.url+'\" type=\"text/css\" />');\n                        deferred.resolve(node);\n                    }\n                    else{\n                        return public.debug([dep.url,\"Must pass html document to Orgy.config() before attempting to add DOM nodes [i.e. css] as dependencies.\"]);\n                    }\n                }\n                else{\n                    \n                    var fs = require('fs');\n\n                    (function(deferred,dep){\n                        \n                        fs.readFile(dep.url, 'utf8', function (err, data) {\n\n                            if (err){\n                                public.debug([\"File \" + dep.url + \" not found @ local dep.url '\" + dep.url +\"'\",\"CWD: \"+process.cwd()]);\n                                process.exit();\n                            }\n\n                            process_result(deferred,data,dep);\n                        });\n\n                    }(deferred,dep));\n                    \n                }\n                \n            }\n\n        }\n        \n        return deferred;\n    }\n};","public.queue = function(deps,options){\n\n    var _o;\n    if(!(deps instanceof Array)){\n        return public.debug(\"Queue dependencies must be an array.\");\n    }\n    \n    if(!options || !options.id){\n        return public.debug(\"Queues require an id.\");\n    }\n    \n    //DOES NOT ALREADY EXIST\n    if(!public.list[options.id]){\n        \n        //CREATE NEW QUEUE OBJECT\n        var _o = private.queue.factory(options);\n\n        //ACTIVATE QUEUE\n        _o = private.queue.activate(_o,options,deps);\n\n    }\n    //ALREADY EXISTS\n    else {\n        \n        _o = public.list[options.id];\n        \n        if(_o.model !== 'queue'){\n        //MATCH FOUND BUT NOT A QUEUE, UPGRADE TO ONE\n\n            options.overwritable = 1;\n\n            _o = private.queue.upgrade(_o,options,deps);\n        }\n        else{\n            \n            //OVERWRITE ANY EXISTING OPTIONS\n            for(var i in options){\n                _o[i] = options[i];\n            }\n            \n            //ADD ADDITIONAL DEPENDENCIES IF NOT RESOLVED\n            if(deps.length > 0){\n                private.queue.tpl.add.call(_o,deps);\n            }\n            \n        }\n        \n        //RESUME RESOLUTION UNLESS SPECIFIED OTHERWISE\n        _o.halt_resolution = (typeof options.halt_resolution !== 'undefined') ?\n        options.halt_resolution : 0;\n    }\n    \n    return _o;\n};\n\n\nprivate.queue = {\n    \n    \n    factory : function(options){\n\n        //CREATE A NEW QUEUE OBJECT\n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,private.queue.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A QUEUE OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }    \n    \n    \n    /**\n     * Template object for all queues\n     * \n     * @type object\n     */\n    ,tpl : {\n        \n        model : 'queue'\n\n\n        //SET TRUE AFTER RESOLVER FIRED\n        ,resolver_fired : 0\n\n\n        //PREVENTS A QUEUE FROM RESOLVING EVEN IF ALL DEPENDENCIES MET\n        //PURPOSE: PREVENTS QUEUES CREATED BY ASSIGNMENT FROM RESOLVING \n        //BEFORE THEY ARE FORMALLY INSTANTIATED\n        ,halt_resolution : 0\n        \n\n        //USED TO CHECK STATE, ENSURES ONE COPY\n        ,upstream : {}\n        \n        \n        //USED RETURN VALUES, ENSURES ORDER\n        ,dependencies : []\n\n\n        ///////////////////////////////////////////////////\n        //  PUBLIC METHODS\n        ///////////////////////////////////////////////////\n\n\n        /**\n         * Add list of dependencies to a queue's upstream array.\n         * \n         * The queue will resolve once all the promises in its \n         * upstream array are resolved.\n         * \n         * When public.config.debug == 1, method will test each dependency is not\n         * previously scheduled to resolve downstream from the target, in which \n         * case it would never resolve because its upstream depends on it.\n         * \n         * @param {array} array of dependencies to add\n         * @returns {array} upstream\n         */\n        ,add : function(arr){\n\n            try{\n                if(arr.length === 0) return this.upstream;\n            }\n            catch(err){\n                public.debug(err);\n            }\n\n            //IF NOT PENDING, DO NOT ALLOW TO ADD\n            if(this._state !== 0){\n                return public.debug(\"Cannot add list to queue id:'\"+this.id\n                +\"'. Queue settled/in the process of being settled.\");\n            }\n\n            for(var a in arr){\n                \n                switch(true){\n\n                    //CHECK IF ID OF EXISTING PROMISE\n                    case(typeof arr[a] === 'string'):\n                        if(!public.list[arr[a]]){\n                            return public.debug(arr[a]+\"' does not exist so cannot be added to a queue.\");\n                        }\n                        else{\n                            arr[a] = public.list[arr[a]];\n                        }\n                        break;\n\n                    //IF NOT, ATTEMPT TO CONVERT IT TO A PROMISE\n                    case(typeof arr[a] === 'object' && typeof arr[a].then !== 'function'):\n                        arr[a] = private.deferred.convert_to_promise(arr[a]);\n                        break;\n\n                    //REF IS A PROMISE.\n                    case(typeof arr[a].then === 'function'):\n                        break;\n\n                    default:\n                        console.error(\"Object could not be converted to promise.\");\n                        console.error(arr[a]);\n                        debugger;\n                        continue;\n                }\n\n                //must check the target to see if the dependency exists in its downstream\n                for(var b in this.downstream){\n                    if(b === arr[a].id){\n                        return public.debug(\"Error adding upstream dependency '\"+arr[a].id+\"' to queue\"+\" '\"+this.id+\"'.\\n Promise object for '\"+arr[a].id+\"' is scheduled to resolve downstream from queue '\"+this.id+\"' so it can't be added upstream.\");\n                    }\n                }\n\n                //ADD TO UPSTREAM, DOWNSTREAM, DEPENDENCIES\n                this.upstream[arr[a].id] = arr[a];\n                arr[a].downstream[this.id] = this;\n                this.dependencies.push(arr[a]);\n\n            }\n\n            return this.upstream;\n        }\n\n\n        /**\n         * Remove list from a queue.\n         * \n         * @param {array} arr\n         * @returns {array} array of list the queue is upstream\n         */\n        ,remove : function(arr){\n\n            //IF NOT PENDING, DO NOT ALLOW REMOVAL\n            if(this._state !== 0){\n                console.error(\"Cannot remove list from queue id:'\"+this.id+\"'. Queue settled/in the process of being settled.\");\n                return false;\n            }\n\n            for(var a in arr){\n                if(this.upstream[arr[a].id]){\n                    delete this.upstream[arr[a].id];\n                    delete arr[a].downstream[this.id];\n                }\n            }\n        }\n\n\n        /**\n         * Resets an existing,settled queue back to waiting state.\n         * Clears out the downstream.\n         * Fails if not settled.\n         * \n         * @returns {obj}\n         */\n        ,reset : function(options){\n\n            if(this.settled !== 1 || this._state !== 1){\n                public.debug(\"Can only reset a queue settled without errors.\");\n            }\n\n            options = options || {};\n\n            this.settled = 0;\n            this._state = 0; \n            this.resolver_fired = 0;\n            this.done_fired = 0;\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n            \n            //CLEAR OUT THE DOWNSTREAM\n            this.downstream = {};\n            this.dependencies = [];\n\n            //SET NEW AUTO TIMEOUT\n            private.deferred.auto_timeout.call(this,options.timeout);\n\n            //POINTLESS - WILL JUST IMMEDIATELY RESOLVE SELF\n            //this.check_self()\n\n            return this;\n        }\n        \n        \n        /**\n         * Cauaes a queue to look over its dependencies and see if it \n         * can be resolved.\n         * \n         * This is done automatically by each dependency that loads,\n         * so is not needed unless:\n         * \n         * -debugging\n         * \n         * -the queue has been reset and no new\n         * dependencies were since added.\n         * \n         * @returns {int} State of the queue.\n         */\n        ,check_self : function(){\n            private.queue.receive_signal(this,this.id);\n            return this._state;\n        }\n    }\n    \n    \n    ///////////////////////////////////////////////////\n    //  PRIVATE METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * Activates a queue object.\n     * \n     * @param {object} o\n     * @param {object} options\n     * @param {array} deps\n     * @returns {object} queue\n     */\n    ,activate : function(o,options,deps){\n        \n        //ACTIVATE AS A DEFERRED\n        o = private.deferred.activate(o);\n\n        //ADD ANY DEFERREDS TO QUEUE\n        private.queue.tpl.add.call(o,deps);\n\n        //SEE IF CAN BE IMMEDIATELY RESOLVED BY CHECKING UPSTREAM\n        private.queue.receive_signal(o,o.id);\n        \n        //ASSIGN THIS QUEUE UPSTREAM TO OTHER QUEUES\n        if(o.assign){\n            for(var a in o.assign){\n                public.assign(o.assign[a],[o],true);\n            }\n        }\n        \n        return o;\n    }\n    \n    \n    /**\n    * A \"signal\" here causes a queue to look through each item in its upstream and \n    * check to see if all are resolved. \n    * \n    * Signals can only be received by a queue itself or a promise/deferred/queue\n    * in its upstream.\n    * \n    * @param {string} from_id\n    * @returns {void}\n    */\n    ,receive_signal : function(target,from_id){\n\n        if(target.halt_resolution === 1) return;\n\n       //MAKE SURE THE SIGNAL WAS FROM A PROMISE BEING LISTENED TO\n       //BUT ALLOW SELF STATUS CHECK\n       if(from_id !== target.id && !target.upstream[from_id]){\n           console.error(from_id + \" can't signal \" + target.id + \" because not in upstream.\");\n           debugger;\n           return;\n       }\n       //RUN THROUGH QUEUE OF OBSERVING PROMISES TO SEE IF ALL DONE\n       else{\n           var status = 1;\n           for(var i in target.upstream){\n               //SETS STATUS TO 0 IF ANY OBSERVING HAVE FAILED, BUT NOT IF PENDING OR RESOLVED\n               if(target.upstream[i]._state !== 1) {\n                   status = target.upstream[i]._state;\n                   break;\n               }\n           }\n       }\n\n       //RESOLVE QUEUE IF UPSTREAM FINISHED\n       if(status === 1){\n           \n            //GET RETURN VALUES PER DEPENDENCIES, WHICH SAVES ORDER AND \n            //REPORTS DUPLICATES\n            var values = [];\n            for(var i in target.dependencies){\n                values.push(target.dependencies[i].value);\n            }\n\n            private.deferred.tpl.resolve.call(target,values);\n       }\n\n       if(status === 2){\n           var err = [\n               target.id+\" dependency '\"+target.upstream[i].id + \"' was rejected.\"\n               ,target.upstream[i].arguments\n           ];\n           private.deferred.tpl.reject.apply(target,err);\n       }\n    }\n\n\n    /**\n    * Upgrades a promise object to a queue.\n    * \n    * @param {object} prom\n    * @param {object} options\n    * @param {array} dependencies\n    * @returns {object} queue object\n    */\n    ,upgrade : function(obj,options,deps){\n\n        if(obj.settled !== 0 || (obj.model !== 'promise' && obj.model !== 'deferred')){\n            return public.debug('Can only upgrade unsettled promise or deferred into a queue.');\n        }\n        \n       //GET A NEW QUEUE OBJECT AND MERGE IN\n        var _o = public.naive_cloner([\n            private.queue.tpl\n            ,options\n        ]);\n        \n        for(var i in _o){\n           obj[i] = _o[i];\n        }\n        \n        delete _o;\n\n        //CREATE NEW INSTANCE OF QUEUE\n        obj = private.queue.activate(obj,options,deps);\n\n        //RETURN QUEUE OBJECT\n        return obj;\n    }\n    \n};","public.cast = function(obj){\n            \n    var required = [\"then\",\"error\",\"id\"];\n    for(var i in required){\n        if(!obj[required[i]]){\n            return public.debug(\"Castable objects require: \" + required[i]);\n        }\n    }\n\n    //GET A BLANK DEFERRED TO PLAY WITH\n    var deferred = public.deferred({\n        id : obj.id\n    });\n\n    //CREATE RESOLVER [ASYNC]\n    var resolver = function(){\n        deferred.resolve.call(deferred,arguments[0]);\n    };\n\n    //SET RESOLVER\n    obj.then(resolver);\n\n    //CREATE REJECTOR [ASYNC]\n    var err = function(err){\n        deferred.reject(err);\n    };\n\n    //SET REJECTOR\n    obj.error(err);\n\n    //RETURN THE DEFERRED\n    return deferred;\n}\n        ","if(typeof process === 'object' && process + '' === '[object process]'){\n    // is node\n    module.exports = public;\n}\nelse{\n    // not node\n    Orgy = public;\n}"]}