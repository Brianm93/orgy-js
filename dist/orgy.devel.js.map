{"version":3,"file":"orgy.devel.js","sources":["?","../src/js/main.js","../src/js/deferred.js","../src/js/queue.js","../src/js/cast.js","../src/js/build.js"],"names":["exports","global","public","private","list","modules_exported","modules_loaded","registered_callbacks","i","config","autopath","document","debug_mode","mode","process","obj","debug","define","id","data","def","settled","__dependencies","call","__id","queue","__ui","_is_orgy_module","resolver","__resolver","bind","deferred","resolve","assign","tgt","arr","add","q","then","this","model","remove","register_callback","req","array_to_function","target","clone","slice","root_id","splice","root","hasOwnProperty","value","window","console","error","x","y","l","length","args","end","Array","parent","b","key","constructor","naive_cloner","donors","o","a","JSON","parse","stringify","msg","force_debug_mode","exit","tpl","done_fired","_state","_timeout_id","error_q","then_q","done_fn","reject_q","downstream","execution_history","overwritable","timeout","remote","resolver_fired","hook_before_success","v","fn","push","thenables","set","filter","log","clearTimeout","_set_state","done","reject","err","unshift","catch_params","apply","arguments","rejector","r","options","_o","factory","activate","int","_signal_downstream","_get_state","_make_id","autonamed","auto_timeout","type","scope","setTimeout","auto_timeout_cb","msgs","search_obj_recursively","cb","receive_signal","propName","breadcrumb","r1","indexOf","join","convert_to_promise","url","split","pop","search","prom","_wrap_event","warn","promise","_wrap_timer","_wrap_xhr","$","ready","load","on","_start","Date","getTime","_end","start","elapsed","dep","required","attach_xhr","Orgy","replace","head","getElementsByTagName","documentElement","node","createElement","setAttribute","onload","onreadystatechange","onerror","appendChild","reeject","XMLHttpRequest","open","show_messages","setRequestHeader","return_packet","readyState","status","responseText","e","send","process_result","request","require","get","response","body","statusCode","append","fs","readFile","cwd","halt_resolution","upstream","dependencies","reset","check_self","deps","upgrade","from_id","values","cast","module"],"mappings":"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","sourcesContent":[null,"var public = {};\nvar private = {};\n\n\n////////////////////////////////////////\n//  PUBLIC VARIABLES\n////////////////////////////////////////\n\n\n/**\n * A directory of all promises, deferreds, and queues.\n * @type object\n */\npublic.list = {};\n\n\n/**\n * Array of all exported modules\n * @type Array\n */\npublic.modules_exported = [];\n\n\n/**\n * Index number of last module loaded in public.modules_exported\n * @type Number\n */\npublic.modules_loaded = 0;\n\n\n/** \n * Callbacks that are run on every resolved item\n * \n */\npublic.registered_callbacks = {};\n\n\n/**\n * iterator for ids\n * @type integer\n */\npublic.i = 0;\n\n\n////////////////////////////////////////\n//  PRIVATE VARIABLES\n////////////////////////////////////////\n\n\n/**\n * Configuration values.\n * \n * @type object\n */\nprivate.config = {\n    \n    autopath : ''\n    ,document : null\n    ,debug_mode : 1\n    ,mode : (function(){\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            // is node\n            return \"node\"\n        }\n        else{\n            // not node\n            return \"browser\"\n        }\n    }())\n};\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\n/**\n * Configuration setter.\n * \n * @type string\n */\npublic.config = function(obj){\n    \n    if(obj){\n        for(var i in obj){\n            if(typeof private.config[i] !== 'undefined'){\n                private.config[i] = obj[i];\n            }\n            else{\n                return public.debug(\"Property '\"+i+\"' is not configurable.\");\n            }\n        }\n    }\n    \n    \n    return private.config;\n}\n\n\n/**\n* Creates a new promise from a value and an id and automatically resolves it.\n* \n*     obj.__has_ui = (typeof obj.__has_ui !== 'undefined') ? false : obj.__has_ui;\n* \n* @param {string} id\n* @param {mixed} data\n* @returns {object} resolved promise\n*/\npublic.define = function(id,data){\n    \n    var def;\n\n    //MAKE SURE NOT TRYING TO RESOLVE EXISTING DEF\n    if(public.list[id] && public.list[id].settled === 1){\n        return public.debug(\"Can't define \" + id + \". Already resolved.\",true);\n    }\n\n    data.__dependencies = (typeof data.__dependencies === 'function') \n        ? data.__dependencies.call(data) \n        : data.__dependencies;\n    \n    //ORGY MODULE HANDLING\n    if(typeof data === 'object' && typeof data.__id === 'string'){\n        \n        def = public.queue(data.__dependencies || [],{\n            id : id\n            ,__ui : (typeof data.__ui !== 'undefined') ? data.__ui : 1\n            ,_is_orgy_module : 1\n            ,resolver : (typeof data.__resolver === 'function')\n            ? data.__resolver.bind(data) : null\n        });\n    }\n    else{\n\n        //CREATE/GET DEFERRED\n        def = public.deferred({\n           id : id\n        });\n\n        //SETTLE \n        def.resolve(data);\n       \n    }\n    \n    return def;\n};\n\n\n/**\n * Add/remove an upstream dependency to/from a queue. \n * \n * Can use a queue id, even for a queue that is yet to be created.\n * \n * @param {string} tgt | queue / queue id\n * @param {array}  arr | list/promise ids,dependencies\n * @param {boolean} add | add if true, remove if false\n * \n * @return {array} queue of list\n */\npublic.assign = function(tgt,arr,add){\n\n    add = (typeof add === \"boolean\") ? add : 1;\n\n    var id,q;\n    switch(true){\n        case(typeof tgt === 'object' && typeof tgt.then === 'function'):\n            id = tgt.id;\n            break;\n        case(typeof tgt === 'string'):\n            id = tgt;\n            break;\n        default:\n            return public.debug(\"Assign target must be a queue object or the id of a queue.\");\n    }\n\n    //IF TARGET ALREADY LISTED\n    if(this.list[id] && this.list[id].model === 'queue'){\n        q = this.list[id];\n        \n        //=> ADD TO QUEUE'S UPSTREAM\n        if(add){\n            q.add(arr);\n        }\n        //=> REMOVE FROM QUEUE'S UPSTREAM\n        else{\n            q.remove(arr);\n        }\n    }\n    //CREATE NEW QUEUE AND ADD DEPENDENCIES\n    else if(add){\n\n        q = public.queue(arr,{\n            id : id\n        });\n    }\n    //ERROR: CAN'T REMOVE FROM A QUEUE THAT DOES NOT EXIST\n    else{\n        public.debug(\"Cannot remove dependencies from a queue that does not exist.\");\n    }\n\n    return q;\n};\n\n\npublic.register_callback = function(obj){\n    \n    var req = ['id','fn'];\n    for(var i in req){\n        if(typeof obj[req[i]] === 'undefined'){\n            return public.debug(\"registered callbacks require property: \"+req[i]);\n        }\n    }\n    \n    public.registered_callbacks[obj.id] = obj;\n};\n\n    \n/**\n * Converts a specially formatted array into a function.\n * \n * \n * @param {type} target\n * @returns {object}\n */\npublic.array_to_function = function(target){\n\n    //CLONE TARGET\n    var clone = target.slice(0);\n\n    var root_id = clone[0];\n    clone.splice(0,1);\n\n    var root;\n    if(public.list[root_id] && public.list[root_id].hasOwnProperty(\"value\")){\n        root = public.list[root_id].value; \n    }\n    else{\n        root = window[root_id];\n    }\n\n\n    if(typeof root === 'undefined'){\n        console.error(root_id + \" not found on window or public.list\");\n        debugger;\n    }\n\n\n    var x,y;\n    x = y = root;\n\n    //REMOVE LAST ARRAY ELEMENT (ARGS)\n    var l = clone.length;\n    var args = clone[l-1];\n\n    //POINTER TO A FUNCTION WILL HAVE AN ARRAY AS LAST ELEMENT\n    var end;\n    if(args instanceof Array){\n        end = l - 1;\n    }\n    //POINTER TO AN ARRAY WILL NOT\n    else{\n        end = l;\n    }\n\n    var parent;\n    for(var b=0; b < end; b++){\n        var key = clone[b];\n\n        if(b === end - 1 || l === 1){\n           parent = x; \n        }\n\n        if(typeof x[key] === 'undefined'){\n            console.error(\"Property '\"+key+\"' not found on object:\", x);\n            debugger;\n            return;\n        }\n        x = x[key];\n        y = x;\n    }    \n\n    return {\n        constructor : x\n        ,args : args\n        ,parent : parent\n    };\n}\n\n\n/**\n * Makes a shallow copy of an array. \n * Makes a copy of an object so long as it is JSON\n * \n * @param {array} array of donor objects, overwritten from right to left\n * @returns {object}\n */\npublic.naive_cloner = function(donors){\n    var o = {};\n    for(var a in donors){\n        for(var b in donors[a]){\n            if(donors[a][b] instanceof Array){\n                o[b] = donors[a][b].slice(0);\n            }\n            else if(typeof donors[a][b] === 'object'){\n                o[b] = JSON.parse(JSON.stringify(donors[a][b]));\n            }\n            else{\n                o[b] = donors[a][b];\n            }\n        }\n    }\n    return o;\n}\n        \n\n/**\n * Debugging method.\n * \n * @param {string|array} msg\n * @param {boolean} force_debug_mode   Forces debugger when set to true. \n * @returns {Boolean}\n */\npublic.debug = function(msg,force_debug_mode){\n    if(msg instanceof Array){\n        for(var i in msg){\n            console.error(\"ERROR-\"+i+\": \"+msg[i]);\n        }\n    }\n    else{\n        console.error(\"ERROR: \"+msg);\n    }\n    if(private.config.debug_mode == 1 || force_debug_mode){\n        debugger;\n    }\n    if(private.config.mode === 'browser'){\n        return false;\n    }\n    else{\n        process.exit();\n    }\n}","public.deferred = {};\nprivate.deferred = {};\n\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\nprivate.deferred.tpl = {\n        \n    model : \"deferred\"\n\n    //A COUNTER FOR AUT0-GENERATED PROMISE ID'S\n    ,settled : 0 \n    ,id : null\n    ,done_fired : 0\n    ,_is_orgy_module : 0\n\n    /**\n     * STATE CODES:\n     * ------------------\n     * -1   => SETTLING [EXECUTING CALLBACKS]\n     *  0   => PENDING\n     *  1   => RESOLVED / FULFILLED\n     *  2   => REJECTED \n     */\n    ,_state : 0\n    ,_timeout_id : null\n    ,value : []\n\n    ,error_q : []  \n    ,then_q : []\n    ,done_fn : null\n    ,reject_q : []\n\n    //PROMISE HAS OBSERVERS BUT DOES NOT OBSERVE OTHERS\n    ,downstream : {}\n    ,execution_history : []\n    ,overwritable : 0   //WHEN TRUE, ALLOWS RE-INIT [FOR UPGRADES TO A QUEUE]          \n    ,timeout : 5000\n\n    /**\n     * REMOTE\n     * \n     * REMOTE == 1  =>  [DEFAULT] Make http request for file\n     * \n     * REMOTE == 0  =>  Read file directly from the filesystem\n     * \n     * ONLY APPLIES TO SCRIPTS RUN UNDER NODE AS BROWSER HAS NO \n     * FILESYSTEM ACCESS\n     */\n    ,remote : 1\n\n    //ADDS TO MASTER LIST. ALWAYS DO THIS UNLESS UPGRADING A PROMISE TO A QUEUE\n    ,list : 1   \n\n    ,resolve : function(value){\n\n        if(this.settled !== 0){\n            public.debug(this.id + \" can't resolve. Only unsettled promise objects resolvable.\");\n        }\n\n        //SET STATE TO SETTLEMENT IN PROGRESS\n        this._state = -1; \n\n        //SET VALUE\n        this.value = value;\n\n        //RUN RESOLVER BEFORE PROCEEDING\n        //EVEN IF THERE IS NO RESOLVER, SET IT TO FIRED WHEN CALLED\n        if(!this.resolver_fired){\n\n            this.resolver_fired = 1;\n\n            //FIRE THE RESOLVER IF SET\n            if(typeof this.resolver === 'function'){\n                return private.deferred.hook_before_success.call(this,this.resolver,value);\n            }\n\n        }\n\n        //Allows .then chain to be held up by new async events created as the chain executes.\n        var v,fn,l=this.then_q.length;\n        for(var i = 0; i<l; i++){     \n\n            //REMOVE fn FROM THEN QUEUE. \n            //WHEN A PROMISE OBJ IS RETURNED, AND EXECUTION STOPPED WE\n            //DONT WANT TO REPEAAT A CALL TO SAME fn\n            fn = this.then_q.splice(0,1);\n\n            //CALL fn WITH PRECEDING RESULT OR IF NONE EXISTS, THE RESOLVER VALUE \n            v = private.deferred.hook_before_success.call(this,fn[0],v || this.value);\n            //v = fn[0].call(this, v || this.value);\n\n            //SAVE fn TO EXECUTION HISTORY\n            this.execution_history.push(fn[0]);\n\n            //Pause execution chain if callback returned \n            //array of thenables\n            if(typeof v !== 'undefined'){\n\n                //CHECK IF V IS THENABLE\n                if(v.then){\n\n                    //SET QUEUE STATE BACK TO WAITING\n                    this._state = 0;\n\n                    //ADD THENABLE TO QUEUE'S UPSTREAM\n                    this.add([v]);\n\n                    //END RESOLUTION ATTEMPT AND Orgy FOR v TO RESOLVE\n                    return;\n                }\n                else{\n\n                    //IF RETURNED ARRAY, CHECK FOR THENABLES\n                    if(v instanceof Array){\n\n                        var thenables = [];\n\n                        for(var i in v){\n                            if(v[i].then){\n                                thenables.push(v[i]);\n                            }\n                        }\n\n                        //IF THENABLE FOUND, ADD IN TO DEPS AND BAIL\n                        if(thenables.length > 0){\n\n                            //SET QUEUE STATE BACK TO WAITING\n                            this._state = 0;\n\n                            this.add(thenables,true);\n\n                            this.value = v;\n\n                            return;\n                        }\n                        else{\n                            this.value = v;\n                        }\n\n                    }\n                    else{\n                        //IF V RETURNED A VALUE, PUSH TO EXISTING QUEUE VALUE\n                        this.value = v;\n                    }\n                }\n\n            }\n        }\n\n        //SET RETURN VALUE TO A GIVEN OBJECT PROPERTY\n        if(this.set){\n            //ARRAY IS TRANSORMED INTO A PATH TO POINT TO\n            if(this.set instanceof Array){\n                //@todo make property of private to avoid external dependency\n                var tgt = public.array_to_function(this.set);\n                tgt.parent[tgt.args] = this.value;\n            }\n            //OTHErWISE ASSUMED TO BE AN OBJECT PROPERTY\n            else if (typeof this.set === 'function'){\n                this.set(this.value);\n            }\n        }\n\n        //EXECUTE ANY GLOBALLY REGISTERED CALLBACKS\n        for (var i in public.registered_callbacks){\n\n            //SKIP IF FILTER RETURNS TRUE\n            if(typeof public.registered_callbacks[i].filter === 'function'\n                    && public.registered_callbacks[i].filter.call(this)){\n                continue;\n            }\n\n            if(public.config().debug_mode){\n                console.log(\"Orgy.js executing registered callback '\"+i+\"' on \" + this.id);\n            }\n\n            public.registered_callbacks[i].fn.call(this);\n        }\n\n        //REMOVE AUTO TIMEOUT TIMER\n        if(this._timeout_id){\n            clearTimeout(this._timeout_id);\n        }\n\n        //SET STATE TO RESOLVED\n        private.deferred._set_state.call(this,1);\n\n        this.done();\n\n        return this;\n    }\n\n    ,reject : function(err){\n\n        if(!(err instanceof Array)){\n            err = [err]\n        }\n\n        err.unshift(\"REJECTED \"+this.model+\": '\"+this.id+\"'\");\n\n        public.debug(err);\n\n        //REMOVE AUTO TIMEOUT TIMER\n        if(this._timeout_id){\n            clearTimeout(this._timeout_id);\n        }\n\n        //SAVE ERROR OBJECT TO MEMORY FOR USE IN CATCH CALLBACK\n        this.catch_params = err;\n\n        //SET STATE TO REJECTED\n        private.deferred._set_state.call(this,2);\n\n        //EXECUTE REJECTION QUEUE\n        for(var i in this.reject_q){\n            this.value.push(this.reject_q[i].apply(this,arguments));\n        }\n\n        return this;\n    }\n\n    ,then : function(fn,rejector){\n\n        switch(true){\n\n            //ERROR WAS PREVIOUSLY THROWN\n            case(this._state === 2):\n                break;\n\n            case(this.done_fired === 1):\n                public.debug(this.id+\" can't attach .then() after .done() has fired.\");\n                break;\n\n            case(this.settled === 1 && this._state === 1 && !this.done_fired):\n                var r = private.deferred.hook_before_success.call(this,fn,this.value);\n                if(typeof r !== 'undefined'){\n                    this.value = r;\n                }\n                break;\n\n            default:\n\n                //PUSH CALLBACK TO THEN QUEUE\n                this.then_q.push(fn);\n\n                //PUSH REJECT CALLBACK TO REJECTION QUEUE\n                if(typeof rejector === 'function'){\n                    this.reject_q.push(rejector);\n                }\n                break;\n        }\n\n        return this;\n    }\n\n    ,done : function(fn){\n\n        if(this.done_fn === null){\n            if(fn){\n                this.done_fn = fn\n            }\n        }\n        else if(fn){\n            public.debug(\"done() can only be called once.\");\n            return;\n        }\n\n        if(this.settled === 1 && this._state === 1 && this.done_fn){\n            this.done_fired = 1;\n            private.deferred.hook_before_success.call(this,this.done_fn,this.value);\n        }\n    }\n\n};\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\npublic.deferred = function(options){\n    \n    if(!options || typeof options.id !== 'string'){\n        return public.debug(\"Must set id.\");\n    }\n    \n    if(!public.list[options.id]){\n        //CREATE NEW INSTANCE OF DEFERRED CLASS\n        var _o = private.deferred.factory(options);\n\n        //ACTIVATE DEFERRED\n        _o = private.deferred.activate(_o);\n    }\n    else{\n        _o = public.list[options.id];\n    }\n    \n    return _o;\n};\n\n\n////////////////////////////////////////\n//  PRIVATE METHODS\n////////////////////////////////////////\n\n\nprivate.deferred.factory = function(options){\n        \n    var _o = public.naive_cloner([\n        private.deferred.tpl\n        ,options\n    ]);\n\n    //YOU NOW HAVE A DEFERRED OBJECT THAT IS INACTIVE ON THE OrgyLIST\n    return _o;\n};\n    \n    \n/**\n * Methods to run before then(), done() \n * \n * @param {function} fn\n * @param {array}\n * @returns {mixed}\n */\nprivate.deferred.hook_before_success = function(fn,arr){\n\n    return fn(arr,this);\n\n};\n    \n    \n/**\n * \n * @param {type} int\n * @returns {undefined}\n */\nprivate.deferred._set_state = function(int){\n\n    this._state = int;\n\n    //IF RESOLVED OR REJECTED, SETTLE\n    if(int === 1 || int === 2){\n        this.settled = 1;\n    }\n\n    private.deferred._signal_downstream.call(this,this);\n};\n    \n    \nprivate.deferred._get_state = function(){\n    return this._state;\n};\n\n\nprivate.deferred.activate = function(obj){\n\n    //SET ID\n    if(!obj.id){\n        obj.id = private.deferred._make_id(obj.model);\n        obj.autonamed = true;\n    }\n\n    //MAKE SURE NAMING CONFLICT DOES NOT EXIST\n    if(public.list[obj.id] && !public.list[obj.id].overwritable){\n        public.debug(\"Tried to overwrite \"+obj.id+\" without overwrite permissions.\");\n        return public.list[obj.id];\n    }\n    else{\n        //SAVE TO MASTER LIST\n        public.list[obj.id] = obj;\n    }\n\n    //AUTO TIMEOUT\n    private.deferred.auto_timeout.call(obj);\n\n    return obj;\n};\n\n\n/**\n * Sets the automatic timeout on a promise object.\n * \n * @param {integer} optional. timeout\n * @returns {Boolean}\n */\nprivate.deferred.auto_timeout = function(timeout){\n\n    this.timeout = (typeof timeout === 'undefined') ? this.timeout : timeout;\n\n    //AUTO REJECT ON timeout\n    if(!this.type || this.type !== 'timer'){\n\n        //DELETE PREVIOUS TIMEOUT IF EXISTS\n        if(this._timeout_id){\n            clearTimeout(this._timeout_id);\n        }\n\n        if(typeof this.timeout === 'undefined'){\n            public.debug(this.id+\" Auto timeout this.timeout cannot be undefined.\");\n        }\n        else if (this.timeout === -1){\n            //NO AUTO TIMEOUT SET\n            return false;\n        }\n        var scope = this;\n\n        this._timeout_id = setTimeout(function(){\n            private.deferred.auto_timeout_cb.call(scope);\n        }, this.timeout);\n    }\n    else{\n        //@todo WHEN A TIMER, ADD DURATION TO ALL UPSTREAM AND LATERAL?\n    }\n    return true;\n}\n\n\n/**\n * Callback for autotimeout. Declaration here avoids memory leak.\n * \n * @param {type} exp\n * @returns {undefined}\n */\nprivate.deferred.auto_timeout_cb = function(){\n\n    if(this._state !== 1){\n\n        //GET THE UPSTREAM ERROR ID\n        var msgs = [];\n        var scope = this;\n\n        var fn = function(obj){\n            if(obj._state !== 1){\n                return obj.id\n            }\n            else{\n                return false;\n            }\n        };\n\n        /**\n         * Run over a given object property recursively, applying callback until \n         * callback returns a non-false value.\n         */\n        var r = private.deferred.search_obj_recursively(this,'upstream',fn);\n        msgs.push(scope.id + \": rejected by auto timeout after \" + this.timeout + \"ms\");\n        msgs.push(\"Cause:\");\n        msgs.push(r);\n        return private.deferred.tpl.reject.call(this,msgs);\n\n    }\n}\n\n\nprivate.deferred.error = function(cb){\n\n    //IF ERROR ALREADY THROWN, EXECUTE CB IMMEDIATELY\n    if(this._state === 2){\n        cb();\n    }\n    else{\n        this.error_q.push(cb);\n    }\n\n    return this;\n};\n\n\nprivate.deferred._make_id = function(model){\n    return \"anonymous-\" + model + \"-\" + (public.i++);\n};\n\n\n/**\n * Signals all downstream promises that private promise object's state has changed.\n * \n * \n * @todo Since the same queue may have been assigned twice directly or \n * indirectly via shared dependencies, make sure not to double resolve\n * - which throws an error.\n *     \n * @returns {void}\n */\nprivate.deferred._signal_downstream = function(target){\n\n    //MAKE SURE ALL DOWNSTREAM IS UNSETTLED\n    for(var i in target.downstream){\n        if(target.downstream[i].settled === 1){\n            public.debug(target.id + \" tried to settle promise \"+\"'\"+target.downstream[i].id+\"' that has already been settled.\");\n        }\n    }\n\n    //NOW THAT WE KNOW ALL DOWNSTREAM IS UNSETTLED, WE CAN IGNORE ANY\n    //SETTLED THAT RESULT AS A SIDE EFFECT TO ANOTHER SETTLEMENT\n    for (var i in target.downstream){\n        if(target.downstream[i].settled !== 1){\n            private.queue.receive_signal(target.downstream[i],target.id);\n        }\n    }\n};\n    \n    \n/**\n* Run over a given object property recursively, applying callback until \n* callback returns a non-false value.\n* \n* @param {object} obj      \n* @param {string} propName          The property name of the array to bubble up\n* @param {function} fn              The test callback to be applied to each object\n* @param {array} breadcrumb         The breadcrumb through the chain of the first match\n* @returns {mixed}\n*/\nprivate.deferred.search_obj_recursively = function(obj,propName,fn,breadcrumb){\n\n    if(typeof breadcrumb === 'undefined'){\n        breadcrumb = [obj.id];\n    }\n\n    var r1;\n\n    for(var i in obj[propName]){\n\n        //RUN TEST\n        r1 = fn(obj[propName][i]);\n\n        if(r1 !== false){\n        //MATCH RETURNED. RECURSE INTO MATCH IF HAS PROPERTY OF SAME NAME TO SEARCH\n            //CHECK THAT WE AREN'T CAUGHT IN A CIRCULAR LOOP\n            if(breadcrumb.indexOf(r1) !== -1){\n                return public.debug([\n                    \"Circular condition in recursive search of obj property '\"\n                        +propName+\"' of object \"\n                        +((typeof obj.id !== 'undefined') ? \"'\"+obj.id+\"'\" : '')\n                        +\". Offending value: \"+r1\n                    ,(function(){\n                        breadcrumb.push(r1);\n                        return breadcrumb.join(\" [depends on]=> \");\n                    })()\n                ]);\n            }\n\n            breadcrumb.push(r1);\n\n            if(obj[propName][i][propName]){\n                return private.deferred.search_obj_recursively(obj[propName][i],propName,fn,breadcrumb);\n            }\n\n            break;\n        }\n\n    }\n\n    return breadcrumb;\n}\n    \n    \n/**\n * Converts a promise description into a promise.\n * \n * @param {type} obj\n * @returns {undefined}\n */\nprivate.deferred.convert_to_promise = function(obj){\n\n    //IF ALREADY EXISTS, RETURN EXISTING\n    if(!obj.id){\n\n        if(obj.type === 'timer'){\n            obj.id = \"timer-\" + obj.timeout + \"-\"+public.i++;\n        }\n        else if(typeof obj.url === 'string'){\n            obj.id = obj.url.split(\"/\").pop();\n            //REMOVE .js FROM ID\n            if(obj.id.search(\".js\")!== -1){\n                obj.id = obj.id.split(\".\");\n                obj.id.pop();\n                obj.id = obj.id.join(\".\");\n            }\n        }\n        else{\n            return public.debug([\n                \"Dependencies without a 'url' property require 'id' property be set.\"\n                ,\"'\"+obj.type+\"' id undefined.\"\n                ,obj\n            ]);\n        }\n    }\n\n    if(obj.type !== 'timer'){\n        //RETURN THE PROMISE IF IT ALREADY EXISTS\n        if(typeof public.list[obj.id] !== 'undefined'){\n            return public.list[obj.id];\n        }\n    }\n\n    //CONVERT DEPENDENCY TO PROMISE\n    var prom;\n    switch(true){\n\n        //EVENT\n        case(obj.type === 'event'):\n            prom = private.deferred._wrap_event(obj);\n            break;\n\n        //ALREADY A PROMISE\n        case(obj.type === 'deferred'):\n        case(obj.type === 'promise' || obj.then):   \n\n            switch(true){\n\n                //OBJECT IS A REFERENCE TO A PROMISE\n                case(typeof obj.id === 'string'):\n                    console.warn(\"Promise '\"+obj.id +\"': did not exist. Auto creating new deferred.\");\n                    prom = public.deferred({\n                        id : obj.id\n                    });\n                    break;\n\n                //OBJECT PROPERTY .promise EXPECTED TO RETURN A PROMISE\n                case(typeof obj.promise === 'function'):\n                    if(obj.scope){\n                        prom = obj.promise.call(obj.scope);\n                    }\n                    else{\n                        prom = obj.promise();\n                    }\n                    break;\n\n                //OBJECT IS A PROMISE\n                case(obj.then):\n                    prom = obj;\n                    break;\n\n                default:\n\n            }\n\n            //MAKE SURE IS PROMISE\n            if(typeof prom !== 'object' || !prom.then){\n                return public.debug(\"Dependency labeled as a promise did not return a promise.\",obj);\n            }\n            break;\n\n        case(obj.type === 'timer'):\n            prom = private.deferred._wrap_timer(obj);\n            break;\n\n        //XHR\n        default:\n            obj.type = obj.type || \"default\";\n            prom = private.deferred._wrap_xhr(obj);\n    }\n\n    //INDEX PROMISE BY ID FOR FUTURE REFERENCING\n    public.list[obj.id] = prom;\n\n    return prom;\n};\n    \n    \n/**\n * Converts a reference to a DOM event to a promise.\n * Resolved on first event trigger.\n * \n * @todo remove jquery dependency\n * \n * @param {object} obj\n * @returns {object} deferred object\n */\nprivate.deferred._wrap_event = function(obj){\n\n    var def = public.deferred({\n        id : obj.id\n    });\n\n    //BROWSER\n    if(typeof document !== 'undefined' && typeof window !== 'undefined'){\n\n        if(typeof $ !== 'function'){\n            var msg = 'window and document based events depend on jQuery';\n            def.reject(msg);\n        }\n        else{\n            //For now, depend on jquery for IE8 DOMContentLoaded polyfill\n            switch(true){\n                case(obj.id === 'ready' || obj.id === 'DOMContentLoaded'):\n                    $(document).ready(function(){\n                        def.resolve(1);\n                    });\n                    break;\n                case(obj.id === 'load'):\n                    $(window).load(function(){\n                        def.resolve(1);\n                    });\n                    break;\n                default:\n                    $(document).on(obj.id,\"body\",function(){\n                        def.resolve(1);\n                    });\n            }\n        }\n    }\n\n    return def;\n};\n    \n\nprivate.deferred._wrap_timer = function(obj){\n\n    var prom = public.deferred(obj);\n\n    (function(prom){\n\n        var _start = new Date().getTime();      \n        setTimeout(function(){\n            var _end = new Date().getTime();\n            prom.resolve({\n                start : _start\n                ,end : _end\n                ,elapsed : _end - _start\n                ,timeout : obj.timeout\n            });\n        },obj.timeout);\n\n    }(prom));\n\n    return prom;\n};\n    \n    \n/**\n * Creates a deferred object that depends on the loading of a file.\n * \n * @param {object} dep\n * @returns {object} deferred object\n */\nprivate.deferred._wrap_xhr = function(dep){\n\n\n    var required = [\"id\",\"url\"];\n    for(var i in required){\n        if(!dep[required[i]]){\n            return public.debug([\n                \"File requests converted to promises require: \" + required[i]\n                ,\"Make sure you weren't expecting dependency to already have been resolved upstream.\"\n                ,dep\n            ]\n            );\n        }\n    }\n\n\n    //IF PROMISE FOR THIS URL ALREADY EXISTS, RETURN IT\n    if(public.list[dep.id]){\n        return public.list[dep.id];\n    }\n\n\n    //CONVERT TO DEFERRED:\n    var deferred;\n    deferred = public.deferred(dep);\n    deferred = private.deferred.attach_xhr(deferred,dep);\n    return deferred;\n};\n    \n    \n/**\n *    \n * \n * @param {type} deferred\n * @param {type} dep\n * \n * dep:\n * =========\n *                  \n * <fs> boolean. Filesystem. Whether to loda the file from server filesytem or via http server\n *                  \n * @returns {unresolved}\n */\nprivate.deferred.attach_xhr = function(deferred,dep){\n\n    //GET AUTOPATH\n    if(dep.url[0] === \"*\"){\n\n        var autopath = Orgy.config().autopath;\n\n        if(typeof autopath !== 'string'){\n            public.debug([\n                    \"config.autopath must be set to a string.\"\n                ]\n                ,[\n                    \"When a dependency url begins with *, it is replaced by the config property 'autopath'.\"\n            ]);\n        }\n        else{\n            dep.url = dep.url.replace(/\\*/,autopath);\n        }\n    }\n\n\n    //BROWSER\n    if(typeof process !== 'object' || process + '' !== '[object process]'){\n\n        this.head = this.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\n        switch(true){\n\n            case(dep.type==='script'):\n\n                var node = document.createElement(\"script\");\n                node.type = 'text/javascript';\n                node.setAttribute(\"src\",dep.url);\n                node.setAttribute(\"id\",dep.id);\n\n                (function(node,dep,deferred){\n\n                    node.onload = node.onreadystatechange = function(){\n                        //Do not autoresolve modules, which are\n                        //self-resolved via Orgy.export\n                        if(!deferred._is_orgy_module){\n                            deferred.resolve((typeof node.value !== 'undefined') ? node.value : node)\n                        }\n                    };\n                    node.onerror = function(){\n                        deferred.reject(\"Failed to load path: \" + dep.url);\n                    };\n                }(node,dep,deferred))\n\n                //put scripts before <base> elements, after <meta>\n                this.head.appendChild(node);\n                break;\n\n            case(dep.type==='css' || dep.type==='link'):\n\n                var node = document.createElement(\"link\");\n                node.setAttribute(\"href\",dep.url);\n                node.setAttribute(\"type\",\"text/css\");\n                node.setAttribute(\"rel\",\"stylesheet\");\n\n                if(node.onload){\n                    (function(node,dep,deferred){\n                        node.onload = node.onreadystatechange = function(){\n                           deferred.resolve(node);\n                       };\n\n                       node.onerror = function(){\n                           deferred.reeject(\"Failed to load path: \" + dep.url);\n                       }\n\n                    }(node,dep,deferred));\n\n                    this.head.appendChild(node);\n                    break;\n                }\n                else{\n                    //ADD NODE BUT MAKE XHR REQUEST TO CHECK FILE RECEIVED\n                    this.head.appendChild(node);\n                }\n\n            case(dep.type==='json'):\n            default:\n\n                var r;\n                var req = new XMLHttpRequest();\n                req.open('GET', dep.url, true);\n\n                if(typeof dep.show_messages !== 'undefined'){\n                    req.setRequestHeader('show-messages', dep.show_messages);\n                }\n                if(typeof dep.return_packet !== 'undefined'){\n                    req.setRequestHeader('return-packet', dep.return_packet);\n                }\n\n                (function(dep,deferred){\n                    req.onreadystatechange = function() {\n                        if (req.readyState === 4) {\n                            if(req.status === 200){\n                                r = req.responseText;\n                                if(dep.type === 'json'){\n                                    try{\n                                        r = JSON.parse(r);\n                                    }\n                                    catch(e){\n                                        public.debug([\"Could not decode JSON\",dep.url,r]);\n\n                                    }\n                                }\n                                //WE WANT TO RESOLVE WITH DOM NODE FOR CSS FILES\n                                deferred.resolve(node || r);\n                            }\n                            else{\n                                deferred.reject(\"Error loading \"+dep.url);\n                            }\n                        }\n                    };\n                }(dep,deferred));\n\n                req.send(null);\n        }\n    }\n    //NODEJS\n    else{\n\n        function process_result(deferred,data,dep){\n\n            switch(true){\n\n                case(dep.type === 'json'):\n                    data = JSON.parse(data);\n                    deferred.resolve(data);\n                    break;\n\n                default:\n                    deferred.resolve(data);\n\n            }\n        }     \n\n        if(dep.remote){\n            var request = require('request');\n            request.get(dep.url, function (error, response, body) {\n                if (!error && response.statusCode == 200) {\n                    process_result(deferred,body,dep);\n                }\n            });\n\n        }\n        else{\n\n            //DON'T GET SCRIPTS AS TEXT\n            if(dep.type === 'script'){\n                var data = require(dep.url);\n\n                if(!deferred._is_orgy_module){\n                    deferred.resolve(data);\n                }\n            }\n            //DON'T GET CSS, JUST ADD NODE\n            else if(dep.type === 'css'){\n\n                if(private.config.document !== null){\n                    var node = private.config.document('head').append('<link rel=\"stylesheet\" href=\"'+dep.url+'\" type=\"text/css\" />');\n                    deferred.resolve(node);\n                }\n                else{\n                    return public.debug([dep.url,\"Must pass html document to Orgy.config() before attempting to add DOM nodes [i.e. css] as dependencies.\"]);\n                }\n            }\n            else{\n\n                var fs = require('fs');\n\n                (function(deferred,dep){\n\n                    fs.readFile(dep.url, 'utf8', function (err, data) {\n\n                        if (err){\n                            public.debug([\"File \" + dep.url + \" not found @ local dep.url '\" + dep.url +\"'\",\"CWD: \"+process.cwd()]);\n                            process.exit();\n                        }\n\n                        process_result(deferred,data,dep);\n                    });\n\n                }(deferred,dep));\n\n            }\n\n        }\n\n    }\n\n    return deferred;\n};","public.queue = {};\nprivate.queue = {};\n\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\n/**\n* Template object for all queues\n* \n* @type object\n*/\nprivate.queue.tpl = {\n\n   model : 'queue'\n\n\n   //SET TRUE AFTER RESOLVER FIRED\n   ,resolver_fired : 0\n\n\n   //PREVENTS A QUEUE FROM RESOLVING EVEN IF ALL DEPENDENCIES MET\n   //PURPOSE: PREVENTS QUEUES CREATED BY ASSIGNMENT FROM RESOLVING \n   //BEFORE THEY ARE FORMALLY INSTANTIATED\n   ,halt_resolution : 0\n\n\n   //USED TO CHECK STATE, ENSURES ONE COPY\n   ,upstream : {}\n\n\n   //USED RETURN VALUES, ENSURES ORDER\n   ,dependencies : []\n\n\n   ///////////////////////////////////////////////////\n   //  QUEUE INSTANCE METHODS\n   ///////////////////////////////////////////////////\n\n\n   /**\n    * Add list of dependencies to a queue's upstream array.\n    * \n    * The queue will resolve once all the promises in its \n    * upstream array are resolved.\n    * \n    * When public.config.debug == 1, method will test each dependency is not\n    * previously scheduled to resolve downstream from the target, in which \n    * case it would never resolve because its upstream depends on it.\n    * \n    * @param {array} array of dependencies to add\n    * @returns {array} upstream\n    */\n   ,add : function(arr){\n\n       try{\n           if(arr.length === 0) return this.upstream;\n       }\n       catch(err){\n           public.debug(err);\n       }\n\n       //IF NOT PENDING, DO NOT ALLOW TO ADD\n       if(this._state !== 0){\n           return public.debug(\"Cannot add list to queue id:'\"+this.id\n           +\"'. Queue settled/in the process of being settled.\");\n       }\n\n       for(var a in arr){\n\n           switch(true){\n\n               //CHECK IF EXISTING PROMISE\n               case(typeof public.list[arr[a]['id']] === 'object'):\n                   arr[a] = public.list[arr[a]['id']];\n                   break;\n\n               //IF NOT, ATTEMPT TO CONVERT IT TO A PROMISE\n               case(typeof arr[a] === 'object' && typeof arr[a].then !== 'function'):\n                   arr[a] = private.deferred.convert_to_promise(arr[a]);\n                   break;\n\n               //REF IS A PROMISE.\n               case(typeof arr[a].then === 'function'):\n                   break;\n\n               default:\n                   console.error(\"Object could not be converted to promise.\");\n                   console.error(arr[a]);\n                   debugger;\n                   continue;\n           }\n\n           //must check the target to see if the dependency exists in its downstream\n           for(var b in this.downstream){\n               if(b === arr[a].id){\n                   return public.debug(\"Error adding upstream dependency '\"+arr[a].id+\"' to queue\"+\" '\"+this.id+\"'.\\n Promise object for '\"+arr[a].id+\"' is scheduled to resolve downstream from queue '\"+this.id+\"' so it can't be added upstream.\");\n               }\n           }\n\n           //ADD TO UPSTREAM, DOWNSTREAM, DEPENDENCIES\n           this.upstream[arr[a].id] = arr[a];\n           arr[a].downstream[this.id] = this;\n           this.dependencies.push(arr[a]);\n\n       }\n\n       return this.upstream;\n   }\n\n\n   /**\n    * Remove list from a queue.\n    * \n    * @param {array} arr\n    * @returns {array} array of list the queue is upstream\n    */\n   ,remove : function(arr){\n\n       //IF NOT PENDING, DO NOT ALLOW REMOVAL\n       if(this._state !== 0){\n           console.error(\"Cannot remove list from queue id:'\"+this.id+\"'. Queue settled/in the process of being settled.\");\n           return false;\n       }\n\n       for(var a in arr){\n           if(this.upstream[arr[a].id]){\n               delete this.upstream[arr[a].id];\n               delete arr[a].downstream[this.id];\n           }\n       }\n   }\n\n\n   /**\n    * Resets an existing,settled queue back to Orgying state.\n    * Clears out the downstream.\n    * Fails if not settled.\n    * \n    * @returns {obj}\n    */\n   ,reset : function(options){\n\n       if(this.settled !== 1 || this._state !== 1){\n           public.debug(\"Can only reset a queue settled without errors.\");\n       }\n\n       options = options || {};\n\n       this.settled = 0;\n       this._state = 0; \n       this.resolver_fired = 0;\n       this.done_fired = 0;\n\n       //REMOVE AUTO TIMEOUT TIMER\n       if(this._timeout_id){\n           clearTimeout(this._timeout_id);\n       }\n\n       //CLEAR OUT THE DOWNSTREAM\n       this.downstream = {};\n       this.dependencies = [];\n\n       //SET NEW AUTO TIMEOUT\n       private.deferred.auto_timeout.call(this,options.timeout);\n\n       //POINTLESS - WILL JUST IMMEDIATELY RESOLVE SELF\n       //this.check_self()\n\n       return this;\n   }\n\n\n   /**\n    * Cauaes a queue to look over its dependencies and see if it \n    * can be resolved.\n    * \n    * This is done automatically by each dependency that loads,\n    * so is not needed unless:\n    * \n    * -debugging\n    * \n    * -the queue has been reset and no new\n    * dependencies were since added.\n    * \n    * @returns {int} State of the queue.\n    */\n   ,check_self : function(){\n       private.queue.receive_signal(this,this.id);\n       return this._state;\n   }\n}\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\npublic.queue = function(deps,options){\n\n    var _o;\n    if(!(deps instanceof Array)){\n        return public.debug(\"Queue dependencies must be an array.\");\n    }\n    \n    if(!options || !options.id){\n        return public.debug(\"Queues require an id.\");\n    }\n    \n    //DOES NOT ALREADY EXIST\n    if(!public.list[options.id]){\n        \n        //CREATE NEW QUEUE OBJECT\n        var _o = private.queue.factory(options);\n\n        //ACTIVATE QUEUE\n        _o = private.queue.activate(_o,options,deps);\n\n    }\n    //ALREADY EXISTS\n    else {\n        \n        _o = public.list[options.id];\n        \n        if(_o.model !== 'queue'){\n        //MATCH FOUND BUT NOT A QUEUE, UPGRADE TO ONE\n\n            options.overwritable = 1;\n\n            _o = private.queue.upgrade(_o,options,deps);\n        }\n        else{\n            \n            //OVERWRITE ANY EXISTING OPTIONS\n            for(var i in options){\n                _o[i] = options[i];\n            }\n            \n            //ADD ADDITIONAL DEPENDENCIES IF NOT RESOLVED\n            if(deps.length > 0){\n                private.queue.tpl.add.call(_o,deps);\n            }\n            \n        }\n        \n        //RESUME RESOLUTION UNLESS SPECIFIED OTHERWISE\n        _o.halt_resolution = (typeof options.halt_resolution !== 'undefined') ?\n        options.halt_resolution : 0;\n    }\n    \n    return _o;\n};\n\n\n//////////////////////////////////////////\n//  PRIVATE METHODS\n//////////////////////////////////////////\n\n\nprivate.queue.factory = function(options){\n\n    //CREATE A NEW QUEUE OBJECT\n    var _o = public.naive_cloner([\n        private.deferred.tpl\n        ,private.queue.tpl\n        ,options\n    ]);\n\n    //YOU NOW HAVE A QUEUE OBJECT THAT IS INACTIVE ON THE OrgyLIST\n    return _o;\n}    \n    \n    \n/**\n * Activates a queue object.\n * \n * @param {object} o\n * @param {object} options\n * @param {array} deps\n * @returns {object} queue\n */\nprivate.queue.activate = function(o,options,deps){\n\n    //ACTIVATE AS A DEFERRED\n    o = private.deferred.activate(o);\n\n    //ADD ANY DEFERREDS TO QUEUE\n    private.queue.tpl.add.call(o,deps);\n\n    //SEE IF CAN BE IMMEDIATELY RESOLVED BY CHECKING UPSTREAM\n    private.queue.receive_signal(o,o.id);\n\n    //ASSIGN THIS QUEUE UPSTREAM TO OTHER QUEUES\n    if(o.assign){\n        for(var a in o.assign){\n            public.assign(o.assign[a],[o],true);\n        }\n    }\n\n    return o;\n};\n    \n    \n/**\n* A \"signal\" here causes a queue to look through each item in its upstream and \n* check to see if all are resolved. \n* \n* Signals can only be received by a queue itself or a promise/deferred/queue\n* in its upstream.\n* \n* @param {string} from_id\n* @returns {void}\n*/\nprivate.queue.receive_signal = function(target,from_id){\n\n    if(target.halt_resolution === 1) return;\n\n   //MAKE SURE THE SIGNAL WAS FROM A PROMISE BEING LISTENED TO\n   //BUT ALLOW SELF STATUS CHECK\n   if(from_id !== target.id && !target.upstream[from_id]){\n       console.error(from_id + \" can't signal \" + target.id + \" because not in upstream.\");\n       debugger;\n       return;\n   }\n   //RUN THROUGH QUEUE OF OBSERVING PROMISES TO SEE IF ALL DONE\n   else{\n       var status = 1;\n       for(var i in target.upstream){\n           //SETS STATUS TO 0 IF ANY OBSERVING HAVE FAILED, BUT NOT IF PENDING OR RESOLVED\n           if(target.upstream[i]._state !== 1) {\n               status = target.upstream[i]._state;\n               break;\n           }\n       }\n   }\n\n   //RESOLVE QUEUE IF UPSTREAM FINISHED\n   if(status === 1){\n\n        //GET RETURN VALUES PER DEPENDENCIES, WHICH SAVES ORDER AND \n        //REPORTS DUPLICATES\n        var values = [];\n        for(var i in target.dependencies){\n            values.push(target.dependencies[i].value);\n        }\n\n        private.deferred.tpl.resolve.call(target,values);\n   }\n\n   if(status === 2){\n       var err = [\n           target.id+\" dependency '\"+target.upstream[i].id + \"' was rejected.\"\n           ,target.upstream[i].arguments\n       ];\n       private.deferred.tpl.reject.apply(target,err);\n   }\n};\n\n\n/**\n* Upgrades a promise object to a queue.\n* \n* @param {object} prom\n* @param {object} options\n* @param {array} dependencies\n* @returns {object} queue object\n*/\nprivate.queue.upgrade = function(obj,options,deps){\n\n    if(obj.settled !== 0 || (obj.model !== 'promise' && obj.model !== 'deferred')){\n        return public.debug('Can only upgrade unsettled promise or deferred into a queue.');\n    }\n\n   //GET A NEW QUEUE OBJECT AND MERGE IN\n    var _o = public.naive_cloner([\n        private.queue.tpl\n        ,options\n    ]);\n\n    for(var i in _o){\n       obj[i] = _o[i];\n    }\n\n    delete _o;\n\n    //CREATE NEW INSTANCE OF QUEUE\n    obj = private.queue.activate(obj,options,deps);\n\n    //RETURN QUEUE OBJECT\n    return obj;\n};","////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\npublic.cast = function(obj){\n            \n    var required = [\"then\",\"error\",\"id\"];\n    for(var i in required){\n        if(!obj[required[i]]){\n            return public.debug(\"Castable objects require: \" + required[i]);\n        }\n    }\n\n    //GET A BLANK DEFERRED TO PLAY WITH\n    var deferred = public.deferred({\n        id : obj.id\n    });\n\n    //CREATE RESOLVER [ASYNC]\n    var resolver = function(){\n        deferred.resolve.call(deferred,arguments[0]);\n    };\n\n    //SET RESOLVER\n    obj.then(resolver);\n\n    //CREATE REJECTOR [ASYNC]\n    var err = function(err){\n        deferred.reject(err);\n    };\n\n    //SET REJECTOR\n    obj.error(err);\n\n    //RETURN THE DEFERRED\n    return deferred;\n}\n        ","if(typeof process === 'object' && process + '' === '[object process]'){\n    // is node\n    module.exports = public;\n}\nelse{\n    // not node\n    Orgy = public;\n}"]}