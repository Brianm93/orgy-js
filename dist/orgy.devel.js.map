{"version":3,"file":"orgy.devel.js","sources":["?","../src/js/main.js","../src/js/deferred.js","../src/js/deferred.tpl.js","../src/js/queue.js","../src/js/cast.js","../src/js/build.js"],"names":["exports","global","public","private","list","modules_exported","modules_loaded","registered_callbacks","i","config","autopath","document","debug_mode","mode","process","obj","debug","define","id","data","def","settled","__dependencies","call","__id","queue","__ui","_is_orgy_module","resolver","__resolver","bind","deferred","resolve","assign","tgt","arr","add","q","then","this","model","remove","register_callback","req","array_to_function","target","clone","slice","root_id","splice","root","hasOwnProperty","value","window","console","error","x","y","l","length","args","end","Array","parent","b","key","constructor","naive_cloner","donors","o","a","JSON","parse","stringify","msg","force_debug_mode","exit","options","_o","factory","activate","tpl","settle","timeout_id","clearTimeout","set_state","callbacks","hooks","onComplete","train","push","done_fired","run_train","done","pause_on_deferred","param","r","onBefore","last","shift","execution_history","thenables","fn","t","int","state","signal_downstream","get_state","make_id","autonamed","overwritable","auto_timeout","timeout","type","scope","setTimeout","auto_timeout_cb","msgs","search_obj_recursively","reject","cb","reject_q","downstream","receive_signal","propName","breadcrumb","r1","indexOf","join","convert_to_promise","url","split","pop","search","prom","_wrap_event","warn","promise","_wrap_timer","_wrap_xhr","$","ready","load","on","_start","Date","getTime","_end","start","elapsed","dep","required","attach_xhr","Orgy","replace","head","getElementsByTagName","documentElement","node","createElement","setAttribute","onload","onreadystatechange","onerror","appendChild","reeject","XMLHttpRequest","open","show_messages","setRequestHeader","return_packet","readyState","status","responseText","e","send","process_result","remote","request","require","get","response","body","statusCode","append","fs","readFile","err","cwd","callback_states","resolver_fired","unshift","rejector","halt_resolution","upstream","dependencies","reset","check_self","deps","upgrade","from_id","values","arguments","apply","cast","module"],"mappings":"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","sourcesContent":[null,"var public = {};\nvar private = {};\n\n\n////////////////////////////////////////\n//  PUBLIC VARIABLES\n////////////////////////////////////////\n\n\n/**\n * A directory of all promises, deferreds, and queues.\n * @type object\n */\npublic.list = {};\n\n\n/**\n * Array of all exported modules\n * @type Array\n */\npublic.modules_exported = [];\n\n\n/**\n * Index number of last module loaded in public.modules_exported\n * @type Number\n */\npublic.modules_loaded = 0;\n\n\n/** \n * Callbacks that are run on every resolved item\n * \n */\npublic.registered_callbacks = {};\n\n\n/**\n * iterator for ids\n * @type integer\n */\npublic.i = 0;\n\n\n////////////////////////////////////////\n//  PRIVATE VARIABLES\n////////////////////////////////////////\n\n\n/**\n * Configuration values.\n * \n * @type object\n */\nprivate.config = {\n    \n    autopath : ''\n    ,document : null\n    ,debug_mode : 1\n    ,mode : (function(){\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            // is node\n            return \"node\"\n        }\n        else{\n            // not node\n            return \"browser\"\n        }\n    }())\n};\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\n/**\n * Configuration setter.\n * \n * @type string\n */\npublic.config = function(obj){\n    \n    if(obj){\n        for(var i in obj){\n            if(typeof private.config[i] !== 'undefined'){\n                private.config[i] = obj[i];\n            }\n            else{\n                return public.debug(\"Property '\"+i+\"' is not configurable.\");\n            }\n        }\n    }\n    \n    \n    return private.config;\n}\n\n\n/**\n* Creates a new promise from a value and an id and automatically resolves it.\n* \n*     obj.__has_ui = (typeof obj.__has_ui !== 'undefined') ? false : obj.__has_ui;\n* \n* @param {string} id\n* @param {mixed} data\n* @returns {object} resolved promise\n*/\npublic.define = function(id,data){\n    \n    var def;\n\n    //MAKE SURE NOT TRYING TO RESOLVE EXISTING DEF\n    if(public.list[id] && public.list[id].settled === 1){\n        return public.debug(\"Can't define \" + id + \". Already resolved.\",true);\n    }\n\n    data.__dependencies = (typeof data.__dependencies === 'function') \n        ? data.__dependencies.call(data) \n        : data.__dependencies;\n    \n    //ORGY MODULE HANDLING\n    if(typeof data === 'object' && typeof data.__id === 'string'){\n        \n        def = public.queue(data.__dependencies || [],{\n            id : id\n            ,__ui : (typeof data.__ui !== 'undefined') ? data.__ui : 1\n            ,_is_orgy_module : 1\n            ,resolver : (typeof data.__resolver === 'function')\n            ? data.__resolver.bind(data) : null\n        });\n    }\n    else{\n\n        //CREATE/GET DEFERRED\n        def = public.deferred({\n           id : id\n        });\n\n        //SETTLE \n        def.resolve(data);\n       \n    }\n    \n    return def;\n};\n\n\n/**\n * Add/remove an upstream dependency to/from a queue. \n * \n * Can use a queue id, even for a queue that is yet to be created.\n * \n * @param {string} tgt | queue / queue id\n * @param {array}  arr | list/promise ids,dependencies\n * @param {boolean} add | add if true, remove if false\n * \n * @return {array} queue of list\n */\npublic.assign = function(tgt,arr,add){\n\n    add = (typeof add === \"boolean\") ? add : 1;\n\n    var id,q;\n    switch(true){\n        case(typeof tgt === 'object' && typeof tgt.then === 'function'):\n            id = tgt.id;\n            break;\n        case(typeof tgt === 'string'):\n            id = tgt;\n            break;\n        default:\n            return public.debug(\"Assign target must be a queue object or the id of a queue.\");\n    }\n\n    //IF TARGET ALREADY LISTED\n    if(this.list[id] && this.list[id].model === 'queue'){\n        q = this.list[id];\n        \n        //=> ADD TO QUEUE'S UPSTREAM\n        if(add){\n            q.add(arr);\n        }\n        //=> REMOVE FROM QUEUE'S UPSTREAM\n        else{\n            q.remove(arr);\n        }\n    }\n    //CREATE NEW QUEUE AND ADD DEPENDENCIES\n    else if(add){\n\n        q = public.queue(arr,{\n            id : id\n        });\n    }\n    //ERROR: CAN'T REMOVE FROM A QUEUE THAT DOES NOT EXIST\n    else{\n        public.debug(\"Cannot remove dependencies from a queue that does not exist.\");\n    }\n\n    return q;\n};\n\n\npublic.register_callback = function(obj){\n    \n    var req = ['id','fn'];\n    for(var i in req){\n        if(typeof obj[req[i]] === 'undefined'){\n            return public.debug(\"registered callbacks require property: \"+req[i]);\n        }\n    }\n    \n    public.registered_callbacks[obj.id] = obj;\n};\n\n    \n/**\n * Converts a specially formatted array into a function.\n * \n * \n * @param {type} target\n * @returns {object}\n */\npublic.array_to_function = function(target){\n\n    //CLONE TARGET\n    var clone = target.slice(0);\n\n    var root_id = clone[0];\n    clone.splice(0,1);\n\n    var root;\n    if(public.list[root_id] && public.list[root_id].hasOwnProperty(\"value\")){\n        root = public.list[root_id].value; \n    }\n    else{\n        root = window[root_id];\n    }\n\n\n    if(typeof root === 'undefined'){\n        console.error(root_id + \" not found on window or public.list\");\n        debugger;\n    }\n\n\n    var x,y;\n    x = y = root;\n\n    //REMOVE LAST ARRAY ELEMENT (ARGS)\n    var l = clone.length;\n    var args = clone[l-1];\n\n    //POINTER TO A FUNCTION WILL HAVE AN ARRAY AS LAST ELEMENT\n    var end;\n    if(args instanceof Array){\n        end = l - 1;\n    }\n    //POINTER TO AN ARRAY WILL NOT\n    else{\n        end = l;\n    }\n\n    var parent;\n    for(var b=0; b < end; b++){\n        var key = clone[b];\n\n        if(b === end - 1 || l === 1){\n           parent = x; \n        }\n\n        if(typeof x[key] === 'undefined'){\n            console.error(\"Property '\"+key+\"' not found on object:\", x);\n            debugger;\n            return;\n        }\n        x = x[key];\n        y = x;\n    }    \n\n    return {\n        constructor : x\n        ,args : args\n        ,parent : parent\n    };\n}\n\n\n/**\n * Makes a shallow copy of an array. \n * Makes a copy of an object so long as it is JSON\n * \n * @param {array} array of donor objects, overwritten from right to left\n * @returns {object}\n */\npublic.naive_cloner = function(donors){\n    var o = {};\n    for(var a in donors){\n        for(var b in donors[a]){\n            if(donors[a][b] instanceof Array){\n                o[b] = donors[a][b].slice(0);\n            }\n            else if(typeof donors[a][b] === 'object'){\n                o[b] = JSON.parse(JSON.stringify(donors[a][b]));\n            }\n            else{\n                o[b] = donors[a][b];\n            }\n        }\n    }\n    return o;\n}\n        \n\n/**\n * Debugging method.\n * \n * @param {string|array} msg\n * @param {boolean} force_debug_mode   Forces debugger when set to true. \n * @returns {Boolean}\n */\npublic.debug = function(msg,force_debug_mode){\n    if(msg instanceof Array){\n        for(var i in msg){\n            if(typeof msg[i] === 'string'){\n                console.error(\"ERROR-\"+i+\": \"+msg[i]);\n            }\n            else{\n                console.error(msg[i]);\n            }\n        }\n    }\n    else{\n        console.error(\"ERROR: \"+msg);\n    }\n    if(private.config.debug_mode == 1 || force_debug_mode){\n        debugger;\n    }\n    if(private.config.mode === 'browser'){\n        return false;\n    }\n    else{\n        process.exit();\n    }\n}","/**\n * Deferred class.\n * \n */\n\npublic.deferred = {};\nprivate.deferred = {};\n\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\npublic.deferred = function(options){\n    \n    if(!options || typeof options.id !== 'string'){\n        return public.debug(\"Must set id.\");\n    }\n    \n    if(!public.list[options.id]){\n        //CREATE NEW INSTANCE OF DEFERRED CLASS\n        var _o = private.deferred.factory(options);\n\n        //ACTIVATE DEFERRED\n        _o = private.deferred.activate(_o);\n    }\n    else{\n        _o = public.list[options.id];\n    }\n    \n    return _o;\n};\n\n\n////////////////////////////////////////\n//  PRIVATE METHODS\n////////////////////////////////////////\n\n\nprivate.deferred.factory = function(options){\n        \n    var _o = public.naive_cloner([\n        private.deferred.tpl\n        ,options\n    ]);\n\n    //YOU NOW HAVE A DEFERRED OBJECT THAT IS INACTIVE ON THE Orgy LIST\n    return _o;\n};\n    \n\nprivate.deferred.settle = function(def){\n    \n    //REMOVE AUTO TIMEOUT TIMER\n    if(def.timeout_id){\n        clearTimeout(def.timeout_id);\n    }\n    \n    \n    //SET RETURN VALUE TO A GIVEN OBJECT PROPERTY\n/*\n    if(def.set){\n        //ARRAY IS TRANSORMED INTO A PATH TO POINT TO\n        if(def.set instanceof Array){\n            //@todo make property of private to avoid external dependency\n            var tgt = public.array_to_function(def.set);\n            tgt.parent[tgt.args] = def.value;\n        }\n        //OTHErWISE ASSUMED TO BE AN OBJECT PROPERTY\n        else if (typeof def.set === 'function'){\n            def.set(def.value);\n        }\n    }\n*/\n    \n    //Set state to resolved\n    private.deferred.set_state(def,1);\n    \n    \n    //Add done as a callback to then chain completion.\n    def.callbacks.then.hooks.onComplete.train.push(function(){\n        \n        //Done can only be called once, so note that it has been\n        def.done_fired = 1;\n        \n        //Run done queue\n        private.deferred.run_train(\n            def\n            ,def.callbacks.done\n            ,def.value\n            ,{pause_on_deferred : false}\n        );\n\n    });\n    \n    \n    //Run then queue\n    private.deferred.run_train(\n        def\n        ,def.callbacks.then\n        ,def.value\n        ,{pause_on_deferred : true}\n    );\n    \n    \n    return def;\n};\n\n\n/**\n * Runs an array of functions sequentially as a partial function.\n * Each function's argument is the result of its predecessor function.\n * \n * By default, execution chain is paused when any function \n * returns an unresolved deferred. (pause_on_deferred) [OPTIONAL]\n * \n * @param {object} def  /deferred object\n * @param {object} obj  /itinerary\n *      train       {array}\n *      hooks       {object}    \n *          onBefore        {array}\n *          onComplete      {array}\n * @param {mixed} param /param to pass to first callback\n * @param {object} options\n *      pause_on_deferred   {boolean}\n *      \n * @returns {void}\n */\nprivate.deferred.run_train = function(def,obj,param,options){\n    \n    var r = param || null;\n    \n    //onBefore event\n    if(obj.hooks && obj.hooks.onBefore.train.length > 0){\n        private.deferred.run_train(\n            def\n            ,obj.hooks.onBefore\n            ,param\n            ,{pause_on_deferred : false}\n        );\n    }\n    \n    while(obj.train.length > 0){\n        \n        //remove fn to execute\n        var last = obj.train.shift();\n        def.execution_history.push(last);\n        \n        r = last.call(def,def.value,def,r);\n\n        //if result is an thenable, halt execution \n        //and run unfired arr when thenable settles\n        if(options.pause_on_deferred){\n            \n            //If r is an unsettled thenable\n            if(r && r.then && r.settled !== 1){\n\n                //execute rest of this train after r resolves\n                r.callbacks.resolve.hooks.onComplete.train.push(function(){\n\n                    private.deferred.run_train(\n                        def\n                        ,obj\n                        ,param\n                        ,{pause_on_deferred : true}\n                    );\n                });\n\n                //terminate execution\n                return;\n            }\n            \n            //If is an array than contains an unsettled thenable\n            else if(r instanceof Array){\n\n                var thenables = [];\n\n                for(var i in r){\n                    if(r[i].then && r[i].settled !== 1){\n                        \n                        thenables.push(r[i]);\n           \n                        var fn = (function(t,def,obj,param){\n                    \n                            return function(){\n      \n                                //Bail if any thenables unsettled\n                                for(var i in t){\n                                    if(t[i].settled !== 1){\n                                        return;\n                                    }\n                                }\n\n                                private.deferred.run_train(\n                                    def\n                                    ,obj\n                                    ,param\n                                    ,{pause_on_deferred : true}\n                                );\n                            };\n                            \n                        })(thenables,def,obj,param);\n                        \n                        //execute rest of this train after\n                        //all thenables found in r resolve\n                        r[i].callbacks.resolve.hooks.onComplete.train.push(fn);\n\n                        //terminate execution\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    \n    //onComplete event\n    if(obj.hooks && obj.hooks.onComplete.train.length > 0){\n        private.deferred.run_train(def\n                                ,obj.hooks.onComplete\n                                ,r\n                                ,{pause_on_deferred : false});\n    }\n};\n\n\n/**\n * Sets the state of an Orgy object.\n * \n * @param {object} def\n * @param {number} int\n * @returns {void}\n */\nprivate.deferred.set_state = function(def,int){\n\n    def.state = int;\n\n    //IF RESOLVED OR REJECTED, SETTLE\n    if(int === 1 || int === 2){\n        def.settled = 1;\n    }\n\n    if(int === 1 || int === 2){\n        private.deferred.signal_downstream(def);\n    }\n};\n    \n   \n/**\n * Gets the state of an Orgy object\n * \n * @param {object} def\n * @returns {number} \n */\nprivate.deferred.get_state = function(def){\n    return def.state;\n};\n\n\nprivate.deferred.activate = function(obj){\n\n    //SET ID\n    if(!obj.id){\n        obj.id = private.deferred.make_id(obj.model);\n        obj.autonamed = true;\n    }\n\n    //MAKE SURE NAMING CONFLICT DOES NOT EXIST\n    if(public.list[obj.id] && !public.list[obj.id].overwritable){\n        public.debug(\"Tried to overwrite \"+obj.id+\" without overwrite permissions.\");\n        return public.list[obj.id];\n    }\n    else{\n        //SAVE TO MASTER LIST\n        public.list[obj.id] = obj;\n    }\n\n    //AUTO TIMEOUT\n    private.deferred.auto_timeout.call(obj);\n\n    return obj;\n};\n\n\n/**\n * Sets the automatic timeout on a promise object.\n * \n * @param {integer} timeout (optional)\n * @returns {Boolean}\n */\nprivate.deferred.auto_timeout = function(timeout){\n\n    this.timeout = (typeof timeout === 'undefined') \n    ? this.timeout : timeout;\n\n    //AUTO REJECT ON timeout\n    if(!this.type || this.type !== 'timer'){\n\n        //DELETE PREVIOUS TIMEOUT IF EXISTS\n        if(this.timeout_id){\n            clearTimeout(this.timeout_id);\n        }\n\n        if(typeof this.timeout === 'undefined'){\n            public.debug(this.id+\" Auto timeout this.timeout cannot be undefined.\");\n        }\n        else if (this.timeout === -1){\n            //NO AUTO TIMEOUT SET\n            return false;\n        }\n        var scope = this;\n\n        this.timeout_id = setTimeout(function(){\n            private.deferred.auto_timeout_cb.call(scope);\n        }, this.timeout);\n    }\n    else{\n        //@todo WHEN A TIMER, ADD DURATION TO ALL UPSTREAM AND LATERAL?\n    }\n    \n    return true;\n};\n\n\n/**\n * Callback for autotimeout. Declaration here avoids memory leak.\n * \n * @returns {undefined}\n */\nprivate.deferred.auto_timeout_cb = function(){\n\n    if(this.state !== 1){\n\n        //GET THE UPSTREAM ERROR ID\n        var msgs = [];\n        var scope = this;\n\n        var fn = function(obj){\n            if(obj.state !== 1){\n                return obj.id;\n            }\n            else{\n                return false;\n            }\n        };\n\n        /**\n         * Run over a gi_qven object property recursively, \n         * applying callback until \n         * callback returns a non-false value.\n         */\n        var r = private.deferred.search_obj_recursively(this,'upstream',fn);\n        msgs.push(scope.id + \": rejected by auto timeout after \" \n                + this.timeout + \"ms\");\n        msgs.push(\"Cause:\");\n        msgs.push(r);\n        return private.deferred.tpl.reject.call(this,msgs);\n\n    }\n};\n\n\nprivate.deferred.error = function(cb){\n\n    //IF ERROR ALREADY THROWN, EXECUTE CB IMMEDIATELY\n    if(this.state === 2){\n        cb();\n    }\n    else{\n        this.reject_q.push(cb);\n    }\n\n    return this;\n};\n\n\nprivate.deferred.make_id = function(model){\n    return \"anonymous-\" + model + \"-\" + (public.i++);\n};\n\n\n/**\n * Signals all downstream promises that private promise object's state has changed.\n * \n * \n * @todo Since the same queue may have been assigned twice directly or \n * indirectly via shared dependencies, make sure not to double resolve\n * - which throws an error.\n *     \n * @param {object} target deferred/queue\n * @returns {void}\n */\nprivate.deferred.signal_downstream = function(target){\n\n    //MAKE SURE ALL DOWNSTREAM IS UNSETTLED\n    for(var i in target.downstream){\n        if(target.downstream[i].settled === 1){\n            public.debug(target.id + \" tried to settle promise \"+\"'\"+target.downstream[i].id+\"' that has already been settled.\");\n        }\n    }\n\n    //NOW THAT WE KNOW ALL DOWNSTREAM IS UNSETTLED, WE CAN IGNORE ANY\n    //SETTLED THAT RESULT AS A SIDE EFFECT TO ANOTHER SETTLEMENT\n    for (var i in target.downstream){\n        if(target.downstream[i].settled !== 1){\n            private.queue.receive_signal(target.downstream[i],target.id);\n        }\n    }\n};\n    \n    \n/**\n* Run over a given object property recursively, applying callback until \n* callback returns a non-false value.\n* \n* @param {object} obj      \n* @param {string} propName          The property name of the array to bubble up\n* @param {function} fn              The test callback to be applied to each object\n* @param {array} breadcrumb         The breadcrumb through the chain of the first match\n* @returns {mixed}\n*/\nprivate.deferred.search_obj_recursively = function(obj,propName,fn,breadcrumb){\n\n    if(typeof breadcrumb === 'undefined'){\n        breadcrumb = [obj.id];\n    }\n\n    var r1;\n\n    for(var i in obj[propName]){\n\n        //RUN TEST\n        r1 = fn(obj[propName][i]);\n\n        if(r1 !== false){\n        //MATCH RETURNED. RECURSE INTO MATCH IF HAS PROPERTY OF SAME NAME TO SEARCH\n            //CHECK THAT WE AREN'T CAUGHT IN A CIRCULAR LOOP\n            if(breadcrumb.indexOf(r1) !== -1){\n                return public.debug([\n                    \"Circular condition in recursive search of obj property '\"\n                        +propName+\"' of object \"\n                        +((typeof obj.id !== 'undefined') ? \"'\"+obj.id+\"'\" : '')\n                        +\". Offending value: \"+r1\n                    ,(function(){\n                        breadcrumb.push(r1);\n                        return breadcrumb.join(\" [depends on]=> \");\n                    })()\n                ]);\n            }\n\n            breadcrumb.push(r1);\n\n            if(obj[propName][i][propName]){\n                return private.deferred.search_obj_recursively(obj[propName][i],propName,fn,breadcrumb);\n            }\n\n            break;\n        }\n\n    }\n\n    return breadcrumb;\n};\n    \n    \n/**\n * Converts a promise description into a promise.\n * \n * @param {type} obj\n * @returns {undefined}\n */\nprivate.deferred.convert_to_promise = function(obj){\n\n    //IF ALREADY EXISTS, RETURN EXISTING\n    if(!obj.id){\n\n        if(obj.type === 'timer'){\n            obj.id = \"timer-\" + obj.timeout + \"-\"+public.i++;\n        }\n        else if(typeof obj.url === 'string'){\n            obj.id = obj.url.split(\"/\").pop();\n            //REMOVE .js FROM ID\n            if(obj.id.search(\".js\")!== -1){\n                obj.id = obj.id.split(\".\");\n                obj.id.pop();\n                obj.id = obj.id.join(\".\");\n            }\n        }\n        else{\n            return public.debug([\n                \"Dependencies without a 'url' property require 'id' property be set.\"\n                ,\"'\"+obj.type+\"' id undefined.\"\n                ,obj\n            ]);\n        }\n    }\n\n    if(obj.type !== 'timer'){\n        //RETURN THE PROMISE IF IT ALREADY EXISTS\n        if(typeof public.list[obj.id] !== 'undefined'){\n            return public.list[obj.id];\n        }\n    }\n\n    //CONVERT DEPENDENCY TO PROMISE\n    var prom;\n    switch(true){\n\n        //EVENT\n        case(obj.type === 'event'):\n            prom = private.deferred._wrap_event(obj);\n            break;\n\n        //ALREADY A PROMISE\n        case(obj.type === 'deferred'):\n        case(obj.type === 'promise' || obj.then):   \n\n            switch(true){\n\n                //OBJECT IS A REFERENCE TO A PROMISE\n                case(typeof obj.id === 'string'):\n                    console.warn(\"Promise '\"+obj.id +\"': did not exist. Auto creating new deferred.\");\n                    prom = public.deferred({\n                        id : obj.id\n                    });\n                    break;\n\n                //OBJECT PROPERTY .promise EXPECTED TO RETURN A PROMISE\n                case(typeof obj.promise === 'function'):\n                    if(obj.scope){\n                        prom = obj.promise.call(obj.scope);\n                    }\n                    else{\n                        prom = obj.promise();\n                    }\n                    break;\n\n                //OBJECT IS A PROMISE\n                case(obj.then):\n                    prom = obj;\n                    break;\n\n                default:\n\n            }\n\n            //MAKE SURE IS PROMISE\n            if(typeof prom !== 'object' || !prom.then){\n                return public.debug(\"Dependency labeled as a promise did not return a promise.\",obj);\n            }\n            break;\n\n        case(obj.type === 'timer'):\n            prom = private.deferred._wrap_timer(obj);\n            break;\n\n        //XHR\n        default:\n            obj.type = obj.type || \"default\";\n            prom = private.deferred._wrap_xhr(obj);\n    }\n\n    //INDEX PROMISE BY ID FOR FUTURE REFERENCING\n    public.list[obj.id] = prom;\n\n    return prom;\n};\n    \n    \n/**\n * Converts a reference to a DOM event to a promise.\n * Resolved on first event trigger.\n * \n * @todo remove jquery dependency\n * \n * @param {object} obj\n * @returns {object} deferred object\n */\nprivate.deferred._wrap_event = function(obj){\n\n    var def = public.deferred({\n        id : obj.id\n    });\n\n    //BROWSER\n    if(typeof document !== 'undefined' && typeof window !== 'undefined'){\n\n        if(typeof $ !== 'function'){\n            var msg = 'window and document based events depend on jQuery';\n            def.reject(msg);\n        }\n        else{\n            //For now, depend on jquery for IE8 DOMContentLoaded polyfill\n            switch(true){\n                case(obj.id === 'ready' || obj.id === 'DOMContentLoaded'):\n                    $(document).ready(function(){\n                        def.resolve(1);\n                    });\n                    break;\n                case(obj.id === 'load'):\n                    $(window).load(function(){\n                        def.resolve(1);\n                    });\n                    break;\n                default:\n                    $(document).on(obj.id,\"body\",function(){\n                        def.resolve(1);\n                    });\n            }\n        }\n    }\n\n    return def;\n};\n    \n\nprivate.deferred._wrap_timer = function(obj){\n\n    var prom = public.deferred(obj);\n\n    (function(prom){\n\n        var _start = new Date().getTime();      \n        setTimeout(function(){\n            var _end = new Date().getTime();\n            prom.resolve({\n                start : _start\n                ,end : _end\n                ,elapsed : _end - _start\n                ,timeout : obj.timeout\n            });\n        },obj.timeout);\n\n    }(prom));\n\n    return prom;\n};\n    \n    \n/**\n * Creates a deferred object that depends on the loading of a file.\n * \n * @param {object} dep\n * @returns {object} deferred object\n */\nprivate.deferred._wrap_xhr = function(dep){\n\n\n    var required = [\"id\",\"url\"];\n    for(var i in required){\n        if(!dep[required[i]]){\n            return public.debug([\n                \"File requests converted to promises require: \" + required[i]\n                ,\"Make sure you weren't expecting dependency to already have been resolved upstream.\"\n                ,dep\n            ]\n            );\n        }\n    }\n\n\n    //IF PROMISE FOR THIS URL ALREADY EXISTS, RETURN IT\n    if(public.list[dep.id]){\n        return public.list[dep.id];\n    }\n\n\n    //CONVERT TO DEFERRED:\n    var deferred;\n    deferred = public.deferred(dep);\n    deferred = private.deferred.attach_xhr(deferred,dep);\n    return deferred;\n};\n    \n    \n/**\n *    \n * \n * @param {type} deferred\n * @param {type} dep\n * \n * dep:\n * =========\n *                  \n * <fs> boolean. Filesystem. Whether to loda the file from server filesytem or via http server\n *                  \n * @returns {unresolved}\n */\nprivate.deferred.attach_xhr = function(deferred,dep){\n\n    //GET AUTOPATH\n    if(dep.url[0] === \"*\"){\n\n        var autopath = Orgy.config().autopath;\n\n        if(typeof autopath !== 'string'){\n            public.debug([\n                    \"config.autopath must be set to a string.\"\n                ]\n                ,[\n                    \"When a dependency url begins with *, it is replaced by the config property 'autopath'.\"\n            ]);\n        }\n        else{\n            dep.url = dep.url.replace(/\\*/,autopath);\n        }\n    }\n\n\n    //BROWSER\n    if(typeof process !== 'object' || process + '' !== '[object process]'){\n\n        this.head = this.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\n        switch(true){\n\n            case(dep.type==='script'):\n\n                var node = document.createElement(\"script\");\n                node.type = 'text/javascript';\n                node.setAttribute(\"src\",dep.url);\n                node.setAttribute(\"id\",dep.id);\n\n                (function(node,dep,deferred){\n\n                    node.onload = node.onreadystatechange = function(){\n                        //Do not autoresolve modules, which are\n                        //self-resolved via Orgy.export\n                        if(!deferred._is_orgy_module){\n                            deferred.resolve((typeof node.value !== 'undefined') ? node.value : node);\n                        }\n                    };\n                    node.onerror = function(){\n                        deferred.reject(\"Failed to load path: \" + dep.url);\n                    };\n                }(node,dep,deferred));\n\n                //put scripts before <base> elements, after <meta>\n                this.head.appendChild(node);\n                break;\n\n            case(dep.type==='css' || dep.type==='link'):\n\n                var node = document.createElement(\"link\");\n                node.setAttribute(\"href\",dep.url);\n                node.setAttribute(\"type\",\"text/css\");\n                node.setAttribute(\"rel\",\"stylesheet\");\n\n                if(node.onload){\n                    (function(node,dep,deferred){\n                        node.onload = node.onreadystatechange = function(){\n                           deferred.resolve(node);\n                       };\n\n                       node.onerror = function(){\n                           deferred.reeject(\"Failed to load path: \" + dep.url);\n                       };\n\n                    }(node,dep,deferred));\n\n                    this.head.appendChild(node);\n                    break;\n                }\n                else{\n                    //ADD NODE BUT MAKE XHR REQUEST TO CHECK FILE RECEIVED\n                    this.head.appendChild(node);\n                }\n\n            case(dep.type==='json'):\n            default:\n\n                var r;\n                var req = new XMLHttpRequest();\n                req.open('GET', dep.url, true);\n\n                if(typeof dep.show_messages !== 'undefined'){\n                    req.setRequestHeader('show-messages', dep.show_messages);\n                }\n                if(typeof dep.return_packet !== 'undefined'){\n                    req.setRequestHeader('return-packet', dep.return_packet);\n                }\n\n                (function(dep,deferred){\n                    req.onreadystatechange = function() {\n                        if (req.readyState === 4) {\n                            if(req.status === 200){\n                                r = req.responseText;\n                                if(dep.type === 'json'){\n                                    try{\n                                        r = JSON.parse(r);\n                                    }\n                                    catch(e){\n                                        public.debug([\"Could not decode JSON\",dep.url,r]);\n\n                                    }\n                                }\n                                //WE WANT TO RESOLVE WITH DOM NODE FOR CSS FILES\n                                deferred.resolve(node || r);\n                            }\n                            else{\n                                deferred.reject(\"Error loading \"+dep.url);\n                            }\n                        }\n                    };\n                }(dep,deferred));\n\n                req.send(null);\n        }\n    }\n    //NODEJS\n    else{\n\n        function process_result(deferred,data,dep){\n\n            switch(true){\n\n                case(dep.type === 'json'):\n                    data = JSON.parse(data);\n                    deferred.resolve(data);\n                    break;\n\n                default:\n                    deferred.resolve(data);\n\n            }\n        }     \n\n        if(dep.remote){\n            var request = require('request');\n            request.get(dep.url, function (error, response, body) {\n                if (!error && response.statusCode == 200) {\n                    process_result(deferred,body,dep);\n                };\n            });\n\n        }\n        else{\n\n            //DON'T GET SCRIPTS AS TEXT\n            if(dep.type === 'script'){\n                var data = require(dep.url);\n\n                if(!deferred._is_orgy_module){\n                    deferred.resolve(data);\n                }\n            }\n            //DON'T GET CSS, JUST ADD NODE\n            else if(dep.type === 'css'){\n\n                if(private.config.document !== null){\n                    var node = private.config.document('head').append('<link rel=\"stylesheet\" href=\"'+dep.url+'\" type=\"text/css\" />');\n                    deferred.resolve(node);\n                }\n                else{\n                    return public.debug([dep.url,\"Must pass html document to Orgy.config() before attempting to add DOM nodes [i.e. css] as dependencies.\"]);\n                }\n            }\n            else{\n\n                var fs = require('fs');\n\n                (function(deferred,dep){\n\n                    fs.readFile(dep.url, 'utf8', function (err, data) {\n\n                        if (err){\n                            public.debug([\"File \" + dep.url + \" not found @ local dep.url '\" + dep.url +\"'\",\"CWD: \"+process.cwd()]);\n                            process.exit();\n                        }\n\n                        process_result(deferred,data,dep);\n                    });\n\n                }(deferred,dep));\n\n            }\n        }\n    }\n\n    return deferred;\n};","/**\n * Default properties for all deferred objects.\n * \n */\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\nprivate.deferred.tpl = {};\n\nprivate.deferred.tpl.id = null;\n\n//A COUNTER FOR AUT0-GENERATED PROMISE ID'S\nprivate.deferred.tpl.settled = 0;\n\n/**\n * STATE CODES:\n * ------------------\n * -1   => SETTLING [EXECUTING CALLBACKS]\n *  0   => PENDING\n *  1   => RESOLVED / FULFILLED\n *  2   => REJECTED \n */\nprivate.deferred.tpl.state = 0;\n\nprivate.deferred.tpl.value = [];\n\nprivate.deferred.tpl.model = \"deferred\";\n\nprivate.deferred.tpl.done_fired = 0;\n\nprivate.deferred.tpl._is_orgy_module = 0;\n\nprivate.deferred.tpl.timeout_id = null;\n\nprivate.deferred.tpl.callback_states = {\n    resolve : 0\n    ,then : 0\n    ,done : 0\n    ,reject : 0\n};\n\n/**\n * Self executing function to initialize callback event\n * list.\n * \n * Returns an object with the same propertyNames as \n * private.deferred.tpl.callback_states: adding boilerplate\n * properties for each\n * \n * @returns {object}\n */\nprivate.deferred.tpl.callbacks = (function(){\n    \n    var o = {};\n    \n    for(var i in private.deferred.tpl.callback_states){\n        o[i] = {\n            train : []\n            ,hooks : {\n                onBefore : {\n                    train : []\n                }\n                ,onComplete : {\n                    train : []\n                }\n            }\n        };\n    }\n    \n    return o;\n})();\n    \n//PROMISE HAS OBSERVERS BUT DOES NOT OBSERVE OTHERS\nprivate.deferred.tpl.downstream = {};\n\nprivate.deferred.tpl.execution_history = [];\n\n//WHEN TRUE, ALLOWS RE-INIT [FOR UPGRADES TO A QUEUE]          \nprivate.deferred.tpl.overwritable = 0; \n\n//Default timeout for a deferred\nprivate.deferred.tpl.timeout = 5000;\n\n/**\n * REMOTE\n * \n * REMOTE == 1  =>  [DEFAULT] Make http request for file\n * \n * REMOTE == 0  =>  Read file directly from the filesystem\n * \n * ONLY APPLIES TO SCRIPTS RUN UNDER NODE AS BROWSER HAS NO \n * FILESYSTEM ACCESS\n */\nprivate.deferred.tpl.remote = 1;\n\n//ADDS TO MASTER LIST. ALWAYS TRUE UNLESS UPGRADING A PROMISE TO A QUEUE\nprivate.deferred.tpl.list = 1;\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\n/**\n * Resolves a deferred.\n * \n * @param {mixed} value\n * @returns {void}\n */\nprivate.deferred.tpl.resolve = function(value){\n\n    if(this.settled === 1){\n        public.debug([\n            this.id + \" can't resolve.\"\n            ,\"Only unsettled deferreds are resolvable.\"\n        ]);\n    }\n\n    //SET STATE TO SETTLEMENT IN PROGRESS\n    private.deferred.set_state(this,-1);\n\n    //SET VALUE\n    this.value = value;\n\n    //RUN RESOLVER BEFORE PROCEEDING\n    //EVEN IF THERE IS NO RESOLVER, SET IT TO FIRED WHEN CALLED\n    if(!this.resolver_fired && typeof this.resolver === 'function'){\n        \n        this.resolver_fired = 1;   \n        \n        //Add resolver to resolve train\n        this.callbacks.resolve.train.push(function(){\n            this.resolver(value,this);\n        });\n    }\n    else{\n        \n        this.resolver_fired = 1;  \n        \n        //Add settle to resolve train\n        //Always settle before all other complete callbacks\n        this.callbacks.resolve.hooks.onComplete.train.unshift(function(){\n            private.deferred.settle(this);\n        });\n    }\n\n    //Run resolve [standard respect for any hooks]\n    private.deferred.run_train(\n        this\n        ,this.callbacks.resolve\n        ,this.value\n        ,{pause_on_deferred : false}\n    );\n\n    //resolver is expected to call resolve again\n    //and that will get us past this point\n    return this;\n};\n\n\nprivate.deferred.tpl.reject = function(err){\n\n    if(!(err instanceof Array)){\n        err = [err];\n    }\n\n    err.unshift(\"REJECTED \"+this.model+\": '\"+this.id+\"'\");\n\n    public.debug(err);\n\n    //Remove auto timeout timer\n    if(this.timeout_id){\n        clearTimeout(this.timeout_id);\n    }\n\n    //Set state to rejected\n    private.deferred.set_state(this,2);\n\n    //Execute rejection queue\n    private.deferred.run_train(\n        this\n        ,this.callbacks.reject\n        ,err\n        ,{pause_on_deferred : false}\n    );\n\n    return this;\n};\n\n\nprivate.deferred.tpl.then = function(fn,rejector){\n\n    switch(true){\n\n        //An error was previously thrown, bail out\n        case(this.state === 2):\n            break;\n\n        //Execution chain already finished. Bail out.\n        case(this.done_fired === 1):\n            public.debug(this.id+\" can't attach .then() because .done() has already fired, and that means the execution chain is complete.\");\n            break;\n\n        //Settled, but execution chain not finished\n        case(this.settled === 1 && this.state === 1 && !this.done_fired):\n        default:\n\n            //Push callback to then queue\n            this.callbacks.then.train.push(fn);\n\n            //Push reject callback to the rejection queue\n            if(typeof rejector === 'function'){\n                this.callbacks.reject.train.push(rejector);\n            }\n            break;\n    }\n\n    return this;\n};\n\n\nprivate.deferred.tpl.done = function(fn){\n\n    if(this.callbacks.done.train.length === 0\n       && this.done_fired === 0){\n        if(fn){\n            this.callbacks.done.train.push(fn);\n        }\n    }\n    else if(fn){\n        public.debug(\"done() can only be called once.\");\n        return;\n    }\n};","public.queue = {};\nprivate.queue = {};\n\n\n//////////////////////////////////////////\n//  PUBLIC VARIABLES\n//////////////////////////////////////////\n\n\n//////////////////////////////////////////\n//  PRIVATE VARIABLES\n//////////////////////////////////////////\n\n\n/**\n* Template object for all queues\n* \n* @type object\n*/\nprivate.queue.tpl = {\n\n   model : 'queue'\n\n\n   //SET TRUE AFTER RESOLVER FIRED\n   ,resolver_fired : 0\n\n\n   //PREVENTS A QUEUE FROM RESOLVING EVEN IF ALL DEPENDENCIES MET\n   //PURPOSE: PREVENTS QUEUES CREATED BY ASSIGNMENT FROM RESOLVING \n   //BEFORE THEY ARE FORMALLY INSTANTIATED\n   ,halt_resolution : 0\n\n\n   //USED TO CHECK STATE, ENSURES ONE COPY\n   ,upstream : {}\n\n\n   //USED RETURN VALUES, ENSURES ORDER\n   ,dependencies : []\n\n\n   ///////////////////////////////////////////////////\n   //  QUEUE INSTANCE METHODS\n   ///////////////////////////////////////////////////\n\n\n   /**\n    * Add list of dependencies to a queue's upstream array.\n    * \n    * The queue will resolve once all the promises in its \n    * upstream array are resolved.\n    * \n    * When public.config.debug == 1, method will test each dependency is not\n    * previously scheduled to resolve downstream from the target, in which \n    * case it would never resolve because its upstream depends on it.\n    * \n    * @param {array} array of dependencies to add\n    * @returns {array} upstream\n    */\n   ,add : function(arr){\n\n       try{\n           if(arr.length === 0) return this.upstream;\n       }\n       catch(err){\n           public.debug(err);\n       }\n\n       //IF NOT PENDING, DO NOT ALLOW TO ADD\n       if(this.state !== 0){\n           return public.debug(\"Cannot add list to queue id:'\"+this.id\n           +\"'. Queue settled/in the process of being settled.\");\n       }\n\n       for(var a in arr){\n\n           switch(true){\n\n               //CHECK IF EXISTING PROMISE\n               case(typeof public.list[arr[a]['id']] === 'object'):\n                   arr[a] = public.list[arr[a]['id']];\n                   break;\n\n               //IF NOT, ATTEMPT TO CONVERT IT TO A PROMISE\n               case(typeof arr[a] === 'object' && typeof arr[a].then !== 'function'):\n                   arr[a] = private.deferred.convert_to_promise(arr[a]);\n                   break;\n\n               //REF IS A PROMISE.\n               case(typeof arr[a].then === 'function'):\n                   break;\n\n               default:\n                   console.error(\"Object could not be converted to promise.\");\n                   console.error(arr[a]);\n                   debugger;\n                   continue;\n           }\n\n           //must check the target to see if the dependency exists in its downstream\n           for(var b in this.downstream){\n               if(b === arr[a].id){\n                   return public.debug(\"Error adding upstream dependency '\"+arr[a].id+\"' to queue\"+\" '\"+this.id+\"'.\\n Promise object for '\"+arr[a].id+\"' is scheduled to resolve downstream from queue '\"+this.id+\"' so it can't be added upstream.\");\n               }\n           }\n\n           //ADD TO UPSTREAM, DOWNSTREAM, DEPENDENCIES\n           this.upstream[arr[a].id] = arr[a];\n           arr[a].downstream[this.id] = this;\n           this.dependencies.push(arr[a]);\n\n       }\n\n       return this.upstream;\n   }\n\n\n   /**\n    * Remove list from a queue.\n    * \n    * @param {array} arr\n    * @returns {array} array of list the queue is upstream\n    */\n   ,remove : function(arr){\n\n       //IF NOT PENDING, DO NOT ALLOW REMOVAL\n       if(this.state !== 0){\n           console.error(\"Cannot remove list from queue id:'\"+this.id+\"'. Queue settled/in the process of being settled.\");\n           return false;\n       }\n\n       for(var a in arr){\n           if(this.upstream[arr[a].id]){\n               delete this.upstream[arr[a].id];\n               delete arr[a].downstream[this.id];\n           }\n       }\n   }\n\n\n   /**\n    * Resets an existing,settled queue back to Orgying state.\n    * Clears out the downstream.\n    * Fails if not settled.\n    * \n    * @returns {obj}\n    */\n   ,reset : function(options){\n\n       if(this.settled !== 1 || this.state !== 1){\n           public.debug(\"Can only reset a queue settled without errors.\");\n       }\n\n       options = options || {};\n\n       this.settled = 0;\n       this.state = 0; \n       this.resolver_fired = 0;\n       this.done_fired = 0;\n\n       //REMOVE AUTO TIMEOUT TIMER\n       if(this.timeout_id){\n           clearTimeout(this.timeout_id);\n       }\n\n       //CLEAR OUT THE DOWNSTREAM\n       this.downstream = {};\n       this.dependencies = [];\n\n       //SET NEW AUTO TIMEOUT\n       private.deferred.auto_timeout.call(this,options.timeout);\n\n       //POINTLESS - WILL JUST IMMEDIATELY RESOLVE SELF\n       //this.check_self()\n\n       return this;\n   }\n\n\n   /**\n    * Cauaes a queue to look over its dependencies and see if it \n    * can be resolved.\n    * \n    * This is done automatically by each dependency that loads,\n    * so is not needed unless:\n    * \n    * -debugging\n    * \n    * -the queue has been reset and no new\n    * dependencies were since added.\n    * \n    * @returns {int} State of the queue.\n    */\n   ,check_self : function(){\n       private.queue.receive_signal(this,this.id);\n       return this.state;\n   }\n}\n\n\n//////////////////////////////////////////\n//  PUBLIC METHODS\n//////////////////////////////////////////\n\n\npublic.queue = function(deps,options){\n\n    var _o;\n    if(!(deps instanceof Array)){\n        return public.debug(\"Queue dependencies must be an array.\");\n    }\n    \n    if(!options || !options.id){\n        return public.debug(\"Queues require an id.\");\n    }\n    \n    //DOES NOT ALREADY EXIST\n    if(!public.list[options.id]){\n        \n        //CREATE NEW QUEUE OBJECT\n        var _o = private.queue.factory(options);\n\n        //ACTIVATE QUEUE\n        _o = private.queue.activate(_o,options,deps);\n\n    }\n    //ALREADY EXISTS\n    else {\n        \n        _o = public.list[options.id];\n        \n        if(_o.model !== 'queue'){\n        //MATCH FOUND BUT NOT A QUEUE, UPGRADE TO ONE\n\n            options.overwritable = 1;\n\n            _o = private.queue.upgrade(_o,options,deps);\n        }\n        else{\n            \n            //OVERWRITE ANY EXISTING OPTIONS\n            for(var i in options){\n                _o[i] = options[i];\n            }\n            \n            //ADD ADDITIONAL DEPENDENCIES IF NOT RESOLVED\n            if(deps.length > 0){\n                private.queue.tpl.add.call(_o,deps);\n            }\n            \n        }\n        \n        //RESUME RESOLUTION UNLESS SPECIFIED OTHERWISE\n        _o.halt_resolution = (typeof options.halt_resolution !== 'undefined') ?\n        options.halt_resolution : 0;\n    }\n    \n    return _o;\n};\n\n\n//////////////////////////////////////////\n//  PRIVATE METHODS\n//////////////////////////////////////////\n\n\nprivate.queue.factory = function(options){\n\n    //CREATE A NEW QUEUE OBJECT\n    var _o = public.naive_cloner([\n        private.deferred.tpl\n        ,private.queue.tpl\n        ,options\n    ]);\n\n    //YOU NOW HAVE A QUEUE OBJECT THAT IS INACTIVE ON THE OrgyLIST\n    return _o;\n}    \n    \n    \n/**\n * Activates a queue object.\n * \n * @param {object} o\n * @param {object} options\n * @param {array} deps\n * @returns {object} queue\n */\nprivate.queue.activate = function(o,options,deps){\n\n    //ACTIVATE AS A DEFERRED\n    o = private.deferred.activate(o);\n\n    //ADD ANY DEFERREDS TO QUEUE\n    private.queue.tpl.add.call(o,deps);\n\n    //SEE IF CAN BE IMMEDIATELY RESOLVED BY CHECKING UPSTREAM\n    private.queue.receive_signal(o,o.id);\n\n    //ASSIGN THIS QUEUE UPSTREAM TO OTHER QUEUES\n    if(o.assign){\n        for(var a in o.assign){\n            public.assign(o.assign[a],[o],true);\n        }\n    }\n\n    return o;\n};\n    \n    \n/**\n* A \"signal\" here causes a queue to look through each item in its upstream and \n* check to see if all are resolved. \n* \n* Signals can only be received by a queue itself or a promise/deferred/queue\n* in its upstream.\n* \n* @param {string} from_id\n* @returns {void}\n*/\nprivate.queue.receive_signal = function(target,from_id){\n\n    if(target.halt_resolution === 1) return;\n\n   //MAKE SURE THE SIGNAL WAS FROM A PROMISE BEING LISTENED TO\n   //BUT ALLOW SELF STATUS CHECK\n   if(from_id !== target.id && !target.upstream[from_id]){\n       console.error(from_id + \" can't signal \" + target.id + \" because not in upstream.\");\n       debugger;\n       return;\n   }\n   //RUN THROUGH QUEUE OF OBSERVING PROMISES TO SEE IF ALL DONE\n   else{\n       var status = 1;\n       for(var i in target.upstream){\n           //SETS STATUS TO 0 IF ANY OBSERVING HAVE FAILED, BUT NOT IF PENDING OR RESOLVED\n           if(target.upstream[i].state !== 1) {\n               status = target.upstream[i].state;\n               break;\n           }\n       }\n   }\n\n   //RESOLVE QUEUE IF UPSTREAM FINISHED\n   if(status === 1){\n\n        //GET RETURN VALUES PER DEPENDENCIES, WHICH SAVES ORDER AND \n        //REPORTS DUPLICATES\n        var values = [];\n        for(var i in target.dependencies){\n            values.push(target.dependencies[i].value);\n        }\n\n        private.deferred.tpl.resolve.call(target,values);\n   }\n\n   if(status === 2){\n       var err = [\n           target.id+\" dependency '\"+target.upstream[i].id + \"' was rejected.\"\n           ,target.upstream[i].arguments\n       ];\n       private.deferred.tpl.reject.apply(target,err);\n   }\n};\n\n\n/**\n* Upgrades a promise object to a queue.\n* \n* @param {object} prom\n* @param {object} options\n* @param {array} dependencies\n* @returns {object} queue object\n*/\nprivate.queue.upgrade = function(obj,options,deps){\n\n    if(obj.settled !== 0 || (obj.model !== 'promise' && obj.model !== 'deferred')){\n        return public.debug('Can only upgrade unsettled promise or deferred into a queue.');\n    }\n\n   //GET A NEW QUEUE OBJECT AND MERGE IN\n    var _o = public.naive_cloner([\n        private.queue.tpl\n        ,options\n    ]);\n\n    for(var i in _o){\n       obj[i] = _o[i];\n    }\n\n    delete _o;\n\n    //CREATE NEW INSTANCE OF QUEUE\n    obj = private.queue.activate(obj,options,deps);\n\n    //RETURN QUEUE OBJECT\n    return obj;\n};","////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\npublic.cast = function(obj){\n            \n    var required = [\"then\",\"error\",\"id\"];\n    for(var i in required){\n        if(!obj[required[i]]){\n            return public.debug(\"Castable objects require: \" + required[i]);\n        }\n    }\n\n    //GET A BLANK DEFERRED TO PLAY WITH\n    var deferred = public.deferred({\n        id : obj.id\n    });\n\n    //CREATE RESOLVER [ASYNC]\n    var resolver = function(){\n        deferred.resolve.call(deferred,arguments[0]);\n    };\n\n    //SET RESOLVER\n    obj.then(resolver);\n\n    //CREATE REJECTOR [ASYNC]\n    var err = function(err){\n        deferred.reject(err);\n    };\n\n    //SET REJECTOR\n    obj.error(err);\n\n    //RETURN THE DEFERRED\n    return deferred;\n}\n        ","if(typeof process === 'object' && process + '' === '[object process]'){\n    // is node\n    module.exports = public;\n}\nelse{\n    // not node\n    Orgy = public;\n}"]}