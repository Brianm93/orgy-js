{"version":3,"file":"orgy.devel.js","sources":["../src/js/main.js","../src/js/deferred.js","../src/js/queue.js","../src/js/cast.js","../src/js/build.js"],"names":["public","private","list","modules_exported","modules_loaded","registered_callbacks","i","config","obj","debug","export","__has_ui","push","define","id","data","settled","def","deferred","resolve","assign","tgt","arr","add","q","then","this","model","remove","queue","register_callback","name","fn","array_to_function","target","clone","slice","root_id","splice","root","hasOwnProperty","value","window","console","error","x","y","l","length","args","end","Array","parent","b","key","constructor","naive_cloner","donors","o","a","JSON","parse","stringify","msg","force_debug_mode","debug_mode","mode","process","exit","basepath","document","options","_o","factory","activate","tpl","done_fired","_state","_timeout_id","error_q","then_q","done_fn","reject_q","downstream","execution_history","overwritable","timeout","remote","resolver_fired","resolver","hook_before_success","call","v","set","log","clearTimeout","_set_state","done","reject","err","unshift","catch_params","apply","arguments","rejector","r","int","_signal_downstream","_get_state","_make_id","autonamed","auto_timeout","type","scope","setTimeout","auto_timeout_cb","msgs","search_obj_recursively","cb","receive_signal","propName","breadcrumb","r1","indexOf","convert_to_promise","url","split","pop","search","join","prom","_wrap_event","promise","warn","_wrap_timer","_wrap_xhr","$","ready","load","on","_start","Date","getTime","_end","start","elapsed","dep","required","attach_xhr","load_script","m","__dependencies","__id","__resolver","rol","head","getElementsByTagName","documentElement","node","createElement","setAttribute","onload","onreadystatechange","onerror","appendChild","reeject","req","XMLHttpRequest","open","show_messages","setRequestHeader","return_packet","readyState","status","responseText","e","send","process_result","request","require","get","response","body","statusCode","path","append","fs","readFile","cwd","deps","upgrade","halt_resolution","upstream","dependencies","reset","check_self","from_id","values","cast","module","exports","Orgy"],"mappings":";;;;;;;AAAA,IAAIA;;AACJ,IAAIC;;AAYJD,OAAOE;;AAOPF,OAAOG;;AAOPH,OAAOI,iBAAiB;;AAOxBJ,OAAOK;;AAOPL,OAAOM,IAAI;;AAaXN,OAAOO,SAAS,SAASC;IAErB,IAAGA,KAAI;QACH,KAAI,IAAIF,KAAKE,KAAI;YACb,WAAUP,QAAQM,OAAOD,OAAO,aAAY;gBACxCL,QAAQM,OAAOD,KAAKE,IAAIF;mBAExB;gBACA,OAAON,OAAOS,MAAM,cAAYH,IAAE;;;;IAM9C,OAAOL,QAAQM;;;AAInBP,OAAOU,SAAS,SAASF;IAErBA,IAAIG,kBAAmBH,IAAIG,aAAa,cAAe,QAAQH,IAAIG;IACnEX,OAAOG,iBAAiBS,KAAKJ;IAE7B,OAAOA;;;AAWXR,OAAOa,SAAS,SAASC,IAAGC;IAIzB,KAAIf,OAAOE,KAAKY,OAAOd,OAAOE,KAAKY,IAAIE,YAAY,GAAE;QAGjD,IAAIC,MAAMjB,OAAOkB;YACbJ,IAAKA;;QAITG,IAAIE,QAAQJ;QAEZ,OAAOE;WAEP;QACAjB,OAAOS,MAAM,kBAAgBK,KAAK;;;;AAiBzCd,OAAOoB,SAAS,SAASC,KAAIC,KAAIC;IAE7BA,aAAcA,QAAQ,YAAaA,MAAM;IAEzC,IAAIT,IAAGU;IACP,QAAO;MACH,YAAYH,QAAQ,mBAAmBA,IAAII,SAAS;QAChDX,KAAKO,IAAIP;QACT;;MACJ,YAAYO,QAAQ;QAChBP,KAAKO;QACL;;MACJ;QACI,OAAOrB,OAAOS,MAAM;;IAI5B,IAAGiB,KAAKxB,KAAKY,OAAOY,KAAKxB,KAAKY,IAAIa,UAAU,SAAQ;QAChDH,IAAIE,KAAKxB,KAAKY;QAGd,IAAGS,KAAI;YACHC,EAAED,IAAID;eAGN;YACAE,EAAEI,OAAON;;WAIZ,IAAGC,KAAI;QAERC,IAAIxB,OAAO6B,MAAMP;YACbR,IAAKA;;WAIT;QACAd,OAAOS,MAAM;;IAGjB,OAAOe;;;AAIXxB,OAAO8B,oBAAoB,SAASC,MAAKC;IACrChC,OAAOK,qBAAqB0B,QAAQC;;;AAWxChC,OAAOiC,oBAAoB,SAASC;IAGhC,IAAIC,QAAQD,OAAOE,MAAM;IAEzB,IAAIC,UAAUF,MAAM;IACpBA,MAAMG,OAAO,GAAE;IAEf,IAAIC;IACJ,IAAGvC,OAAOE,KAAKmC,YAAYrC,OAAOE,KAAKmC,SAASG,eAAe,UAAS;QACpED,OAAOvC,OAAOE,KAAKmC,SAASI;WAE5B;QACAF,OAAOG,OAAOL;;IAIlB,WAAUE,SAAS,aAAY;QAC3BI,QAAQC,MAAMP,UAAU;QACxB;;IAIJ,IAAIQ,GAAEC;IACND,IAAIC,IAAIP;IAGR,IAAIQ,IAAIZ,MAAMa;IACd,IAAIC,OAAOd,MAAMY,IAAE;IAGnB,IAAIG;IACJ,IAAGD,gBAAgBE,OAAM;QACrBD,MAAMH,IAAI;WAGV;QACAG,MAAMH;;IAGV,IAAIK;IACJ,KAAI,IAAIC,IAAE,GAAGA,IAAIH,KAAKG,KAAI;QACtB,IAAIC,MAAMnB,MAAMkB;QAEhB,IAAGA,MAAMH,MAAM,KAAKH,MAAM,GAAE;YACzBK,SAASP;;QAGZ,WAAUA,EAAES,SAAS,aAAY;YAC7BX,QAAQC,MAAM,eAAaU,MAAI,0BAA0BT;YACzD;YACA;;QAEJA,IAAIA,EAAES;QACNR,IAAID;;IAGR;QACIU,aAAcV;QACbI,MAAOA;QACPG,QAASA;;;;AAYlBpD,OAAOwD,eAAe,SAASC;IAC3B,IAAIC;IACJ,KAAI,IAAIC,KAAKF,QAAO;QAChB,KAAI,IAAIJ,KAAKI,OAAOE,IAAG;YACnB,IAAGF,OAAOE,GAAGN,cAAcF,OAAM;gBAC7BO,EAAEL,KAAKI,OAAOE,GAAGN,GAAGjB,MAAM;mBAEzB,WAAUqB,OAAOE,GAAGN,OAAO,UAAS;gBACrCK,EAAEL,KAAKO,KAAKC,MAAMD,KAAKE,UAAUL,OAAOE,GAAGN;mBAE3C;gBACAK,EAAEL,KAAKI,OAAOE,GAAGN;;;;IAI7B,OAAOK;;;AAWX1D,OAAOS,QAAQ,SAASsD,KAAIC;IACxB,IAAGD,eAAeZ,OAAM;QACpB,KAAI,IAAI7C,KAAKyD,KAAI;YACbpB,QAAQC,MAAM,WAAStC,IAAE,OAAKyD,IAAIzD;;WAGtC;QACAqC,QAAQC,MAAM,YAAUmB;;IAE5B,IAAG9D,QAAQM,OAAO0D,cAAc,KAAKD,kBAAiB;QAClD;;IAEJ,IAAG/D,QAAQM,OAAO2D,SAAS,WAAU;QACjC,OAAO;WAEP;QACAC,QAAQC;;;;AAehBnE,QAAQM;IAEJ8D,UAAW;IACVC,UAAW;IACXL,YAAa;IACbC,MAAQ;QACL,WAAUC,YAAY,YAAYA,UAAU,OAAO,oBAAmB;YAElE,OAAO;eAEP;YAEA,OAAO;;;;;AChUnBnE,OAAOkB,WAAW,SAASqD;IAEvB,KAAIA,kBAAkBA,QAAQzD,OAAO,UAAS;QAC1C,OAAOd,OAAOS,MAAM;;IAGxB,KAAIT,OAAOE,KAAKqE,QAAQzD,KAAI;QAExB,IAAI0D,KAAKvE,QAAQiB,SAASuD,QAAQF;QAGlCC,KAAKvE,QAAQiB,SAASwD,SAASF;WAE/B;QACAA,KAAKxE,OAAOE,KAAKqE,QAAQzD;;IAG7B,OAAO0D;;;AAKXvE,QAAQiB;IAEJuD,SAAU,SAASF;QAEf,IAAIC,KAAKxE,OAAOwD,eACZvD,QAAQiB,SAASyD,KAChBJ;QAIL,OAAOC;;IAIVG;QAEGhD,OAAQ;QAGPX,SAAU;QACVF,IAAK;QACL8D,YAAa;QAUbC,QAAS;QACTC,aAAc;QACdrC;QAEAsC;QACAC;QACAC,SAAU;QACVC;QAGAC;QACAC;QACAC,cAAe;QACfC,SAAU;QAYVC,QAAS;QAGTrF,MAAO;QAEPiB,SAAU,SAASsB;YAEhB,IAAGf,KAAKV,YAAY,GAAE;gBAClBhB,OAAOS,MAAMiB,KAAKZ,KAAK;;YAI3BY,KAAKmD,UAAU;YAGfnD,KAAKe,QAASA;YAId,KAAIf,KAAK8D,gBAAe;gBAEpB9D,KAAK8D,iBAAiB;gBAGtB,WAAU9D,KAAK+D,aAAa,YAAW;oBACnC,OAAOxF,QAAQiB,SAASwE,oBAAoBC,KAAKjE,MAAKA,KAAK+D,UAAShD;;;YAM5E,IAAImD,GAAE5D,IAAGe,IAAErB,KAAKsD,OAAOhC;YACvB,KAAI,IAAI1C,IAAI,GAAGA,IAAEyC,GAAGzC,KAAI;gBAKpB0B,KAAKN,KAAKsD,OAAO1C,OAAO,GAAE;gBAG1BsD,IAAI3F,QAAQiB,SAASwE,oBAAoBC,KAAKjE,MAAKM,GAAG,IAAG4D,KAAKlE,KAAKe;gBAInEf,KAAK0D,kBAAkBxE,KAAKoB,GAAG;gBAK/B,WAAU4D,MAAM,eAAeA,EAAEnE,MAAK;oBAGlCC,KAAKmD,SAAS;oBAGdnD,KAAKH,MAAKqE;oBAGV;uBAGC,WAAUA,MAAM,aAAY;oBAC7BlE,KAAKe,QAAQmD;;;YAKrB,IAAGlE,KAAKmE,KAAI;gBAER,IAAGnE,KAAKmE,eAAe1C,OAAM;oBAEzB,IAAI9B,MAAMrB,OAAOiC,kBAAkBP,KAAKmE;oBACxCxE,IAAI+B,OAAO/B,IAAI4B,QAAQvB,KAAKe;uBAG3B,WAAWf,KAAKmE,QAAQ,YAAW;oBACpCnE,KAAKmE,IAAInE,KAAKe;;;YAKtB,KAAK,IAAInC,KAAKN,OAAOK,sBAAqB;gBACtCsC,QAAQmD,IAAI,4CAA0CxF,IAAE,UAAUoB,KAAKZ;gBACvEd,OAAOK,qBAAqBC,GAAGqF,KAAKjE;;YAIxC,IAAGA,KAAKoD,aAAY;gBAChBiB,aAAarE,KAAKoD;;YAItB7E,QAAQiB,SAAS8E,WAAWL,KAAKjE,MAAK;YAEtCA,KAAKuE;YAEL,OAAOvE;;QAGVwE,QAAS,SAASC;YAEf,MAAKA,eAAehD,QAAO;gBACvBgD,QAAOA;;YAGXA,IAAIC,QAAQ,cAAY1E,KAAKC,QAAM,QAAMD,KAAKZ,KAAG;YAEjDd,OAAOS,MAAM0F;YAGb,IAAGzE,KAAKoD,aAAY;gBAChBiB,aAAarE,KAAKoD;;YAItBpD,KAAK2E,eAAeF;YAGpBlG,QAAQiB,SAAS8E,WAAWL,KAAKjE,MAAK;YAGtC,KAAI,IAAIpB,KAAKoB,KAAKwD,UAAS;gBACvBxD,KAAKe,MAAM7B,KAAKc,KAAKwD,SAAS5E,GAAGgG,MAAM5E,MAAK6E;;YAGhD,OAAO7E;;QAGVD,MAAO,SAASO,IAAGwE;YAEhB,QAAO;cAGH,KAAK9E,KAAKmD,WAAW;gBACjB;;cAEJ,KAAKnD,KAAKkD,eAAe;gBACrB5E,OAAOS,MAAMiB,KAAKZ,KAAG;gBACrB;;cAEJ,KAAKY,KAAKV,YAAY,KAAKU,KAAKmD,WAAW,MAAMnD,KAAKkD;gBAClD,IAAI6B,IAAIxG,QAAQiB,SAASwE,oBAAoBC,KAAKjE,MAAKM,IAAGN,KAAKe;gBAC/D,WAAUgE,MAAM,aAAY;oBACxB/E,KAAKe,QAAQgE;;gBAEjB;;cAEJ;gBAGI/E,KAAKsD,OAAOpE,KAAKoB;gBAGjB,WAAUwE,aAAa,YAAW;oBAC9B9E,KAAKwD,SAAStE,KAAK4F;;gBAEvB;;YAGR,OAAO9E;;QAGVuE,MAAO,SAASjE;YAEb,IAAGN,KAAKuD,YAAY,MAAK;gBACrB,IAAGjD,IAAG;oBACFN,KAAKuD,UAAUjD;;mBAGlB,IAAGA,IAAG;gBACPhC,OAAOS,MAAM;gBACb;;YAGJ,IAAGiB,KAAKV,YAAY,KAAKU,KAAKmD,WAAW,KAAKnD,KAAKuD,SAAQ;gBACvDvD,KAAKkD,aAAa;gBAClB3E,QAAQiB,SAASwE,oBAAoBC,KAAKjE,MAAKA,KAAKuD,SAAQvD,KAAKe;;;;IAkB5EiD,qBAAsB,SAAS1D,IAAGV;QAE/B,OAAOU,GAAGV,KAAII;;IAUjBsE,YAAa,SAASU;QAEnBhF,KAAKmD,SAAS6B;QAGd,IAAGA,QAAQ,KAAKA,QAAQ,GAAE;YACtBhF,KAAKV,UAAU;;QAGnBf,QAAQiB,SAASyF,mBAAmBhB,KAAKjE,MAAKA;;IAIjDkF,YAAa;QACV,OAAOlF,KAAKmD;;IAIfH,UAAW,SAASlE;QAGjB,KAAIA,IAAIM,IAAG;YACPN,IAAIM,KAAKb,QAAQiB,SAAS2F,SAASrG,IAAImB;YACvCnB,IAAIsG,YAAY;;QAIpB,IAAG9G,OAAOE,KAAKM,IAAIM,QAAQd,OAAOE,KAAKM,IAAIM,IAAIuE,cAAa;YACxDrF,OAAOS,MAAM,wBAAsBD,IAAIM,KAAG;YAC1C,OAAOd,OAAOE,KAAKM,IAAIM;eAEvB;YAEAd,OAAOE,KAAKM,IAAIM,MAAMN;;QAI1BP,QAAQiB,SAAS6F,aAAapB,KAAKnF;QAEnC,OAAOA;;IAUVuG,cAAe,SAASzB;QAErB5D,KAAK4D,iBAAkBA,YAAY,cAAe5D,KAAK4D,UAAUA;QAGjE,KAAI5D,KAAKsF,QAAQtF,KAAKsF,SAAS,SAAQ;YAGnC,IAAGtF,KAAKoD,aAAY;gBAChBiB,aAAarE,KAAKoD;;YAGtB,WAAUpD,KAAK4D,YAAY,aAAY;gBACnCtF,OAAOS,MAAMiB,KAAKZ,KAAG;mBAEpB,IAAIY,KAAK4D,aAAa,GAAE;gBAEzB,OAAO;;YAEX,IAAI2B,QAAQvF;YAEZA,KAAKoD,cAAcoC,WAAW;gBAC1BjH,QAAQiB,SAASiG,gBAAgBxB,KAAKsB;eACvCvF,KAAK4D;eAER;QAGJ,OAAO;;IAUV6B,iBAAkB;QAEf,IAAGzF,KAAKmD,WAAW,GAAE;YAGjB,IAAIuC;YACJ,IAAIH,QAAQvF;YAEZ,IAAIM,KAAK,SAASxB;gBACd,IAAGA,IAAIqE,WAAW,GAAE;oBAChB,OAAOrE,IAAIM;uBAEX;oBACA,OAAO;;;YAQf,IAAI2F,IAAIxG,QAAQiB,SAASmG,uBAAuB3F,MAAK,YAAWM;YAChEoF,KAAKxG,KAAKqG,MAAMnG,KAAK,sCAAsCY,KAAK4D,UAAU;YAC1E8B,KAAKxG,KAAK;YACVwG,KAAKxG,KAAK6F;YACV,OAAOxG,QAAQiB,SAASyD,IAAIuB,OAAOP,KAAKjE,MAAK0F;;;IAMpDxE,OAAQ,SAAS0E;QAGd,IAAG5F,KAAKmD,WAAW,GAAE;YACjByC;eAEA;YACA5F,KAAKqD,QAAQnE,KAAK0G;;QAGtB,OAAO5F;;IAIVmF,UAAW,SAASlF;QACjB,OAAO,eAAeA,QAAQ,MAAO3B,OAAOM;;IAc/CqG,oBAAqB,SAASzE;QAG3B,KAAI,IAAI5B,KAAK4B,OAAOiD,YAAW;YAC3B,IAAGjD,OAAOiD,WAAW7E,GAAGU,YAAY,GAAE;gBAClChB,OAAOS,MAAMyB,OAAOpB,KAAK,8BAA4B,MAAIoB,OAAOiD,WAAW7E,GAAGQ,KAAG;;;QAMzF,KAAK,IAAIR,KAAK4B,OAAOiD,YAAW;YAC5B,IAAGjD,OAAOiD,WAAW7E,GAAGU,YAAY,GAAE;gBAClCf,QAAQ4B,MAAM0F,eAAerF,OAAOiD,WAAW7E,IAAG4B,OAAOpB;;;;IAgBpEuG,wBAAyB,SAAS7G,KAAIgH,UAASxF,IAAGyF;QAE/C,WAAUA,eAAe,aAAY;YACjCA,eAAcjH,IAAIM;;QAGtB,IAAI4G;QAIJ,KAAI,IAAIpH,KAAKE,IAAIgH,WAAU;YAGvBE,KAAK1F,GAAGxB,IAAIgH,UAAUlH;YAEtB,IAAGoH,OAAO,OAAM;gBAGZ,IAAGD,WAAWE,QAAQD,SAAS,GAAE;oBAC7B,OAAO1H,OAAOS,QACV,6DACK+G,WAAS,yBAAuBE,IACpCD;;gBAITA,WAAW7G,KAAK8G;gBAEhB,IAAGlH,IAAIgH,UAAUlH,GAAGkH,WAAU;oBAC1B,OAAOvH,QAAQiB,SAASmG,uBAAuB7G,IAAIgH,UAAUlH,IAAGkH,UAASxF,IAAGyF;;gBAGhF;;;QAKR,OAAOA;;IAUVG,oBAAqB,SAASpH;QAG3B,KAAIA,IAAIM,IAAG;YACP,IAAGN,IAAIwG,SAAS,SAAQ;gBACpBxG,IAAIM,KAAK,WAAWN,IAAI8E,UAAU,MAAItF,OAAOM;mBAE5C,WAAUE,IAAIqH,QAAQ,UAAS;gBAChCrH,IAAIM,KAAKN,IAAIqH,IAAIC,MAAM,KAAKC;gBAE5B,IAAGvH,IAAIM,GAAGkH,OAAO,YAAW,GAAE;oBAC1BxH,IAAIM,KAAKN,IAAIM,GAAGgH,MAAM;oBACtBtH,IAAIM,GAAGiH;oBACPvH,IAAIM,KAAKN,IAAIM,GAAGmH,KAAK;;mBAGzB;gBACA,OAAOjI,OAAOS,QAAO,sBAAoBD,IAAIwG,OAAK,oCAAmCxG;;;QAI7F,IAAGA,IAAIwG,SAAS,SAAQ;YAEpB,WAAUhH,OAAOE,KAAKM,IAAIM,QAAQ,aAAY;gBAC1C,OAAOd,OAAOE,KAAKM,IAAIM;;;QAK/B,IAAIoH;QACJ,QAAO;UAGH,KAAK1H,IAAIwG,SAAS;YACdkB,OAAOjI,QAAQiB,SAASiH,YAAY3H;YACpC;;UAGJ,KAAKA,IAAIwG,SAAS;UAClB,KAAKxG,IAAIwG,SAAS,aAAaxG,IAAIiB;YAE/B,QAAO;cAGH,YAAYjB,IAAI4H,YAAY;gBACxB,IAAG5H,IAAIyG,OAAM;oBACTiB,OAAO1H,IAAI4H,QAAQzC,KAAKnF,IAAIyG;uBAE5B;oBACAiB,OAAO1H,IAAI4H;;gBAEf;;cAGJ,KAAK5H,IAAQ;gBACT0H,OAAO1H;gBACP;;cAGJ,YAAYA,IAAIM,OAAO;gBAEnB,IAAGd,OAAOE,KAAKM,IAAIM,KAAI;oBACnBoH,OAAOlI,OAAOE,KAAKM,IAAIM;uBAGvB;oBACA6B,QAAQ0F,KAAK,cAAY7H,IAAIM,KAAI;oBACjCoH,OAAOlI,OAAOkB;wBACVJ,IAAKN,IAAIM;;;;gBAGjB;;cAEJ;YAKJ,WAAUoH,SAAS,aAAaA,KAAKzG,MAAK;gBACtCkB,QAAQC,MAAM;gBACdD,QAAQC,MAAMpC;gBACd;gBACA,OAAO;;YAEX;;UAEJ,KAAKA,IAAIwG,SAAS;YACdkB,OAAOjI,QAAQiB,SAASoH,YAAY9H;YACpC;;UAGJ;YACIA,IAAIwG,OAAOxG,IAAIwG,QAAQ;YACvBkB,OAAOjI,QAAQiB,SAASqH,UAAU/H;;QAI1CR,OAAOE,KAAKM,IAAIM,MAAMoH;QAEtB,OAAOA;;IAaVC,aAAc,SAAS3H;QAEpB,IAAIS,MAAMjB,OAAOkB;YACbJ,IAAKN,IAAIM;;QAIb,WAAUwD,aAAa,sBAAsB5B,WAAW,aAAY;YAEhE,WAAU8F,MAAM,YAAW;gBACvB,IAAIzE,MAAM;gBACVpB,QAAQC,MAAMmB;gBACd;gBACA9C,IAAIiF,OAAOnC;mBAEX;gBAEA,QAAO;kBACH,KAAKvD,IAAIM,OAAO,WAAWN,IAAIM,OAAO;oBAClC0H,EAAElE,UAAUmE,MAAM;wBACdxH,IAAIE,QAAQ;;oBAEhB;;kBACJ,KAAKX,IAAIM,OAAO;oBACZ0H,EAAE9F,QAAQgG,KAAK;wBACXzH,IAAIE,QAAQ;;oBAEhB;;kBACJ;oBACIqH,EAAElE,UAAUqE,GAAGnI,IAAIM,IAAG,QAAO;wBACzBG,IAAIE,QAAQ;;;;;QAMhC,OAAOF;;IAIVqH,aAAc,SAAS9H;QAEpB,IAAI0H,OAAOlI,OAAOkB,SAASV;SAE1B,SAAS0H;YAEN,IAAIU,SAAS,IAAIC,OAAOC;YACxB5B,WAAW;gBACP,IAAI6B,OAAO,IAAIF,OAAOC;gBACtBZ,KAAK/G;oBACD6H,OAAQJ;oBACP1F,KAAM6F;oBACNE,SAAUF,OAAOH;oBACjBtD,SAAU9E,IAAI8E;;eAErB9E,IAAI8E;WAER4C;QAEF,OAAOA;;IAUVK,WAAY,SAASW;QAGlB,IAAIC,aAAY,MAAK;QACrB,KAAI,IAAI7I,KAAK6I,UAAS;YAClB,KAAID,IAAIC,SAAS7I,KAAI;gBACjB,OAAON,OAAOS,MAAM,kDAAkD0I,SAAS7I;;;QAMvF,IAAGN,OAAOE,KAAKgJ,IAAIpI,KAAI;YACnB,OAAOd,OAAOE,KAAKgJ,IAAIpI;;QAK3B,IAAII;QACJA,WAAWlB,OAAOkB,SAASgI;QAC3BhI,WAAWjB,QAAQiB,SAASkI,WAAWlI,UAASgI;QAChD,OAAOhI;;IAIVmI,aAAc,SAASnI,UAASH;QAG7B,IAAGf,OAAOG,iBAAiB6C,SAAShD,OAAOI,gBAAe;YAGtDJ,OAAOI;YAGP,IAAIkJ,IAAItJ,OAAOG,iBAAiBH,OAAOG,iBAAiB6C,SAAO;YAG/D,IAAGsG,EAAEC,0BAA0BpG,OAAM;gBAGjCmG,EAAEE,OAAOtI,SAASJ;gBAElBd,OAAO6B,MAAMyH,EAAEC;oBACXzI,IAAKwI,EAAEE;oBACN/D,UAAY;wBACjC;wBACwB,WAAU6D,EAAEG,eAAe,YAAW;4BAClC,OAAO;gCACHH,EAAEG,WAAW9D,KAAK2D,GAAEA,GAAEpI;;+BAG1B;4BACA,OAAO;;;;mBAKnB;gBAChB;gBAEgBA,SAASC,QAAQmI;;eAGrB;YACZ;YACYpI,SAASC,QAAQJ;;;IAmBxBqI,YAAa,SAASlI,UAASgI;QAG5BA,IAAIQ,aAAcR,IAAIQ,QAAQ,cAAeR,IAAIQ,MAAM;QAGvD,WAAUvF,YAAY,YAAYA,UAAU,OAAO,oBAAmB;YAElEzC,KAAKiI,OAAOjI,KAAKiI,QAAQrF,SAASsF,qBAAqB,QAAQ,MAAMtF,SAASuF;YAE9E,QAAO;cAEH,KAAKX,IAAIlC,SAAO;gBAEZ,IAAI8C,OAAOxF,SAASyF,cAAc;gBAClCD,KAAK9C,OAAO;gBACZ8C,KAAKE,aAAa,OAAMd,IAAIrB;gBAC5BiC,KAAKE,aAAa,MAAKd,IAAIpI;iBAE1B,SAASgJ,MAAKZ,KAAIhI;oBACf4I,MAAKZ,KAAIhI;oBACT4I,KAAKG,SAASH,KAAKI,qBAAqB;wBAEpCjK,QAAQiB,SAASmI,YAAYnI,UAAS4I;;oBAE1CA,KAAKK,UAAU;wBACXjJ,SAASgF,OAAO,0BAA0BgD,IAAIrB;;mBAEpDiC,MAAKZ,KAAIhI;gBAGXQ,KAAKiI,KAAKS,YAAYN;gBACtB;;cAEJ,KAAKZ,IAAIlC,SAAO,SAASkC,IAAIlC,SAAO;gBAEhC,IAAI8C,OAAOxF,SAASyF,cAAc;gBAClCD,KAAKE,aAAa,QAAOd,IAAIrB;gBAC7BiC,KAAKE,aAAa,QAAO;gBACzBF,KAAKE,aAAa,OAAM;gBAExB,IAAGF,KAAKG,QAAO;qBACV,SAASH,MAAKZ,KAAIhI;wBACf4I,KAAKG,SAASH,KAAKI,qBAAqB;4BACrChJ,SAASC,QAAQ2I;;wBAGrBA,KAAKK,UAAU;4BACXjJ,SAASmJ,QAAQ,0BAA0BnB,IAAIrB;;uBAGpDiC,MAAKZ,KAAIhI;oBAEXQ,KAAKiI,KAAKS,YAAYN;oBACtB;uBAEA;oBAEApI,KAAKiI,KAAKS,YAAYN;;;cAG9B,KAAKZ,IAAIlC,SAAO;cAChB;gBAEI,IAAIP;gBACJ,IAAI6D,MAAM,IAAIC;gBACdD,IAAIE,KAAK,OAAOtB,IAAIrB,KAAK;gBAEzB,WAAUqB,IAAIuB,kBAAkB,aAAY;oBACxCH,IAAII,iBAAiB,iBAAiBxB,IAAIuB;;gBAE9C,WAAUvB,IAAIyB,kBAAkB,aAAY;oBACxCL,IAAII,iBAAiB,iBAAiBxB,IAAIyB;;iBAG7C,SAASzB,KAAIhI;oBACVoJ,IAAIJ,qBAAqB;wBACrB,IAAII,IAAIM,eAAe,GAAG;4BACtB,IAAGN,IAAIO,WAAW,KAAI;gCAClBpE,IAAI6D,IAAIQ;gCACR,IAAG5B,IAAIlC,SAAS,QAAO;oCACnB;wCACIP,IAAI7C,KAAKC,MAAM4C;sCAEnB,OAAMsE;wCACF/K,OAAOS,QAAO,yBAAwByI,IAAIrB,KAAIpB;;;gCAKtDvF,SAASC,QAAQ2I,QAAQrD;mCAEzB;gCACAvF,SAASgF,OAAO,mBAAiBgD,IAAIrB;;;;mBAInDqB,KAAIhI;gBAENoJ,IAAIU,KAAK;;eAIjB;YAEA,SAASC,eAAe/J,UAASH,MAAKmI;gBAElC,QAAO;kBAEH,KAAKA,IAAIlC,SAAO;oBACZ/G,QAAQiB,SAASmI,YAAYnI,UAASH;oBACtC;;kBAEJ,KAAKmI,IAAIlC,SAAS;oBACdjG,OAAO6C,KAAKC,MAAM9C;oBAClBG,SAASC,QAAQJ;oBACjB;;kBAEJ;oBACIG,SAASC,QAAQJ;;;YAK7B,IAAGmI,IAAI3D,QAAO;gBACV,IAAI2F,UAAUC,QAAQ;gBACtBD,QAAQE,IAAIlC,IAAIrB,KAAK,SAAUjF,OAAOyI,UAAUC;oBAC5C,KAAK1I,SAASyI,SAASE,cAAc,KAAK;wBACtCN,eAAe/J,UAASoK,MAAKpC;;;mBAKrC;gBAEA,IAAIsC,OAAQvL,QAAQM,OAAO8D,aAAa,OAAQpE,QAAQM,OAAO8D,WAAW6E,IAAIrB,MAAMqB,IAAIrB;gBAGxF,IAAGqB,IAAIlC,SAAS,UAAS;oBACrB,IAAIjG,OAAOoK,QAAQK;oBACnBvL,QAAQiB,SAASmI,YAAYnI,UAASH;uBAGrC,IAAGmI,IAAIlC,SAAS,OAAM;oBAEvB,IAAG/G,QAAQM,OAAO+D,aAAa,MAAK;wBAChC,IAAIwF,OAAO7J,QAAQM,OAAO+D,SAAS,QAAQmH,OAAO,kCAAgCvC,IAAIrB,MAAI;wBAC1F3G,SAASC,QAAQ2I;2BAEjB;wBACA,OAAO9J,OAAOS,QAAOyI,IAAIrB,KAAI;;uBAGjC;oBAEA,IAAI6D,KAAKP,QAAQ;qBAEhB,SAASjK,UAASgI;wBAEfwC,GAAGC,SAASH,MAAM,QAAQ,SAAUrF,KAAKpF;4BAErC,IAAIoF,KAAI;gCACJnG,OAAOS,QAAO,UAAUyI,IAAIrB,MAAM,8BAA8B2D,OAAM,KAAI,UAAQrH,QAAQyH;gCAC1FzH,QAAQC;;4BAGZ6G,eAAe/J,UAASH,MAAKmI;;uBAGnChI,UAASgI;;;;QAQvB,OAAOhI;;;;ACr7BflB,OAAO6B,QAAQ,SAASgK,MAAKtH;IAEzB,IAAIC;IACJ,MAAKqH,gBAAgB1I,QAAO;QACxB,OAAOnD,OAAOS,MAAM;;IAGxB,KAAI8D,YAAYA,QAAQzD,IAAG;QACvB,OAAOd,OAAOS,MAAM;;IAIxB,KAAIT,OAAOE,KAAKqE,QAAQzD,KAAI;QAGxB,IAAI0D,KAAKvE,QAAQ4B,MAAM4C,QAAQF;QAG/BC,KAAKvE,QAAQ4B,MAAM6C,SAASF,IAAGD,SAAQsH;WAItC;QAEDrH,KAAKxE,OAAOE,KAAKqE,QAAQzD;QAEzB,IAAG0D,GAAG7C,UAAU,SAAQ;YAGpB4C,QAAQc,eAAe;YAEvBb,KAAKvE,QAAQ4B,MAAMiK,QAAQtH,IAAGD,SAAQsH;eAEtC;YAGA,KAAI,IAAIvL,KAAKiE,SAAQ;gBACjBC,GAAGlE,KAAKiE,QAAQjE;;YAIpB,IAAGuL,KAAK7I,SAAS,GAAE;gBACf/C,QAAQ4B,MAAM8C,IAAIpD,IAAIoE,KAAKnB,IAAGqH;;;QAMtCrH,GAAGuH,yBAA0BxH,QAAQwH,oBAAoB,cACzDxH,QAAQwH,kBAAkB;;IAG9B,OAAOvH;;;AAIXvE,QAAQ4B;IAGJ4C,SAAU,SAASF;QAGf,IAAIC,KAAKxE,OAAOwD,eACZvD,QAAQiB,SAASyD,KAChB1E,QAAQ4B,MAAM8C,KACdJ;QAIL,OAAOC;;IASVG;QAEGhD,OAAQ;QAIP6D,gBAAiB;QAMjBuG,iBAAkB;QAIlBC;QAIAC;QAqBA1K,KAAM,SAASD;YAEZ;gBACI,IAAGA,IAAI0B,WAAW,GAAG,OAAOtB,KAAKsK;cAErC,OAAM7F;gBACFnG,OAAOS,MAAM0F;;YAIjB,IAAGzE,KAAKmD,WAAW,GAAE;gBACjB,OAAO7E,OAAOS,MAAM,kCAAgCiB,KAAKZ,KACxD;;YAGL,KAAI,IAAI6C,KAAKrC,KAAI;gBAEb,QAAO;kBAGH,YAAYA,IAAIqC,OAAO;oBACnB,KAAI3D,OAAOE,KAAKoB,IAAIqC,KAAI;wBACpB,OAAO3D,OAAOS,MAAMa,IAAIqC,KAAG;2BAE3B;wBACArC,IAAIqC,KAAK3D,OAAOE,KAAKoB,IAAIqC;;oBAE7B;;kBAGJ,YAAYrC,IAAIqC,OAAO,mBAAmBrC,IAAIqC,GAAGlC,SAAS;oBACtDH,IAAIqC,KAAK1D,QAAQiB,SAAS0G,mBAAmBtG,IAAIqC;oBACjD;;kBAGJ,YAAYrC,IAAIqC,GAAGlC,SAAS;oBACxB;;kBAEJ;oBACIkB,QAAQC,MAAM;oBACdD,QAAQC,MAAMtB,IAAIqC;oBAClB;oBACA;;gBAIR,KAAI,IAAIN,KAAK3B,KAAKyD,YAAW;oBACzB,IAAG9B,MAAM/B,IAAIqC,GAAG7C,IAAG;wBACf,OAAOd,OAAOS,MAAM,uCAAqCa,IAAIqC,GAAG7C,KAAG,eAAa,OAAKY,KAAKZ,KAAG,8BAA4BQ,IAAIqC,GAAG7C,KAAG,sDAAoDY,KAAKZ,KAAG;;;gBAKvMY,KAAKsK,SAAS1K,IAAIqC,GAAG7C,MAAMQ,IAAIqC;gBAC/BrC,IAAIqC,GAAGwB,WAAWzD,KAAKZ,MAAMY;gBAC7BA,KAAKuK,aAAarL,KAAKU,IAAIqC;;YAI/B,OAAOjC,KAAKsK;;QAUfpK,QAAS,SAASN;YAGf,IAAGI,KAAKmD,WAAW,GAAE;gBACjBlC,QAAQC,MAAM,uCAAqClB,KAAKZ,KAAG;gBAC3D,OAAO;;YAGX,KAAI,IAAI6C,KAAKrC,KAAI;gBACb,IAAGI,KAAKsK,SAAS1K,IAAIqC,GAAG7C,KAAI;2BACjBY,KAAKsK,SAAS1K,IAAIqC,GAAG7C;2BACrBQ,IAAIqC,GAAGwB,WAAWzD,KAAKZ;;;;QAazCoL,OAAQ,SAAS3H;YAEd,IAAG7C,KAAKV,YAAY,KAAKU,KAAKmD,WAAW,GAAE;gBACvC7E,OAAOS,MAAM;;YAGjB8D,UAAUA;YAEV7C,KAAKV,UAAU;YACfU,KAAKmD,SAAS;YACdnD,KAAK8D,iBAAiB;YACtB9D,KAAKkD,aAAa;YAGlB,IAAGlD,KAAKoD,aAAY;gBAChBiB,aAAarE,KAAKoD;;YAItBpD,KAAKyD;YACLzD,KAAKuK;YAGLhM,QAAQiB,SAAS6F,aAAapB,KAAKjE,MAAK6C,QAAQe;YAKhD,OAAO5D;;QAkBVyK,YAAa;YACVlM,QAAQ4B,MAAM0F,eAAe7F,MAAKA,KAAKZ;YACvC,OAAOY,KAAKmD;;;IAkBnBH,UAAW,SAAShB,GAAEa,SAAQsH;QAG3BnI,IAAIzD,QAAQiB,SAASwD,SAAShB;QAG9BzD,QAAQ4B,MAAM8C,IAAIpD,IAAIoE,KAAKjC,GAAEmI;QAG7B5L,QAAQ4B,MAAM0F,eAAe7D,GAAEA,EAAE5C;QAGjC,IAAG4C,EAAEtC,QAAO;YACR,KAAI,IAAIuC,KAAKD,EAAEtC,QAAO;gBAClBpB,OAAOoB,OAAOsC,EAAEtC,OAAOuC,MAAID,KAAG;;;QAItC,OAAOA;;IAcV6D,gBAAiB,SAASrF,QAAOkK;QAE9B,IAAGlK,OAAO6J,oBAAoB,GAAG;QAIlC,IAAGK,YAAYlK,OAAOpB,OAAOoB,OAAO8J,SAASI,UAAS;YAClDzJ,QAAQC,MAAMwJ,UAAU,mBAAmBlK,OAAOpB,KAAK;YACvD;YACA;eAGA;YACA,IAAI+J,SAAS;YACb,KAAI,IAAIvK,KAAK4B,OAAO8J,UAAS;gBAEzB,IAAG9J,OAAO8J,SAAS1L,GAAGuE,WAAW,GAAG;oBAChCgG,SAAS3I,OAAO8J,SAAS1L,GAAGuE;oBAC5B;;;;QAMZ,IAAGgG,WAAW,GAAE;YAIX,IAAIwB;YACJ,KAAI,IAAI/L,KAAK4B,OAAO+J,cAAa;gBAC7BI,OAAOzL,KAAKsB,OAAO+J,aAAa3L,GAAGmC;;YAGvCxC,QAAQiB,SAASyD,IAAIxD,QAAQwE,KAAKzD,QAAOmK;;QAG9C,IAAGxB,WAAW,GAAE;YACZ,IAAI1E,QACAjE,OAAOpB,KAAG,kBAAgBoB,OAAO8J,SAAS1L,GAAGQ,KAAK,mBACjDoB,OAAO8J,SAAS1L,GAAGiG;YAExBtG,QAAQiB,SAASyD,IAAIuB,OAAOI,MAAMpE,QAAOiE;;;IAa/C2F,SAAU,SAAStL,KAAI+D,SAAQsH;QAE5B,IAAGrL,IAAIQ,YAAY,KAAMR,IAAImB,UAAU,aAAanB,IAAImB,UAAU,YAAY;YAC1E,OAAO3B,OAAOS,MAAM;;QAIxB,IAAI+D,KAAKxE,OAAOwD,eACZvD,QAAQ4B,MAAM8C,KACbJ;QAGL,KAAI,IAAIjE,KAAKkE,IAAG;YACbhE,IAAIF,KAAKkE,GAAGlE;;eAGRkE;QAGPhE,MAAMP,QAAQ4B,MAAM6C,SAASlE,KAAI+D,SAAQsH;QAGzC,OAAOrL;;;;AClYfR,OAAOsM,OAAO,SAAS9L;IAEnB,IAAI2I,aAAY,QAAO,SAAQ;IAC/B,KAAI,IAAI7I,KAAK6I,UAAS;QAClB,KAAI3I,IAAI2I,SAAS7I,KAAI;YACjB,OAAON,OAAOS,MAAM,+BAA+B0I,SAAS7I;;;IAKpE,IAAIY,WAAWlB,OAAOkB;QAClBJ,IAAKN,IAAIM;;IAIb,IAAI2E,WAAW;QACXvE,SAASC,QAAQwE,KAAKzE,UAASqF,UAAU;;IAI7C/F,IAAIiB,KAAKgE;IAGT,IAAIU,MAAM,SAASA;QACfjF,SAASgF,OAAOC;;IAIpB3F,IAAIoC,MAAMuD;IAGV,OAAOjF;;;AC/BX,WAAUiD,YAAY,YAAYA,UAAU,OAAO,oBAAmB;IAElEoI,OAAOC,UAAUxM;OAEjB;IAEAyM,OAAOzM","sourcesContent":["var public = {};\nvar private = {};\n\n\n////////////////////////////////////////\n//  PUBLIC VARIABLES\n////////////////////////////////////////\n\n\n/**\n * A directory of all promises, deferreds, and queues.\n * @type object\n */\npublic.list = {};\n\n\n/**\n * Array of all exported modules\n * @type Array\n */\npublic.modules_exported = [];\n\n\n/**\n * Index number of last module loaded in public.modules_exported\n * @type Number\n */\npublic.modules_loaded = 0;\n\n\n/** \n * Callbacks that are run on every resolved item\n * \n */\npublic.registered_callbacks = {};\n\n\n/**\n * iterator for ids\n * @type integer\n */\npublic.i = 0;\n\n\n////////////////////////////////////////\n//  PUBLIC METHODS\n////////////////////////////////////////\n\n\n/**\n * Stores document context for nodejs.\n * \n * @type string\n */\npublic.config = function(obj){\n    \n    if(obj){\n        for(var i in obj){\n            if(typeof private.config[i] !== 'undefined'){\n                private.config[i] = obj[i];\n            }\n            else{\n                return public.debug(\"Property \"+i+\" is not configurable.\");\n            }\n        }\n    }\n    \n    \n    return private.config;\n}\n\n\npublic.export = function(obj){\n    \n    obj.__has_ui = (typeof obj.__has_ui !== 'undefined') ? false : obj.__has_ui;\n    public.modules_exported.push(obj);\n    \n    return obj;\n}\n\n\n/**\n* Creates a new promise from a value and an id and automatically resolves it.\n* \n* @param {string} id\n* @param {mixed} data\n* @returns {object} resolved promise\n*/\npublic.define = function(id,data){\n\n   //ALLOW OVERWRITING OF UNSETTLED PROMISES\n   //GOOD FOR WHEN A FILE IS NOT RESOLVED-ON-LOAD \n   if(!public.list[id] || public.list[id].settled !== 1){\n       \n       //GET DEFERRED\n       var def = public.deferred({\n           id : id\n       });\n\n       //SETTLE \n       def.resolve(data);\n       \n       return def;\n   }\n   else{\n       public.debug(\"Can't define \"+id + \". Already resolved.\");\n   }\n\n};\n\n\n/**\n * Add/remove an upstream dependency to/from a queue. \n * \n * Can use a queue id, even for a queue that is yet to be created.\n * \n * @param {string} tgt | queue / queue id\n * @param {array}  arr | list/promise ids,dependencies\n * @param {boolean} add | add if true, remove if false\n * \n * @return {array} queue of list\n */\npublic.assign = function(tgt,arr,add){\n\n    add = (typeof add === \"boolean\") ? add : 1;\n\n    var id,q;\n    switch(true){\n        case(typeof tgt === 'object' && typeof tgt.then === 'function'):\n            id = tgt.id;\n            break;\n        case(typeof tgt === 'string'):\n            id = tgt;\n            break;\n        default:\n            return public.debug(\"Assign target must be a queue object or the id of a queue.\");\n    }\n\n    //IF TARGET ALREADY LISTED\n    if(this.list[id] && this.list[id].model === 'queue'){\n        q = this.list[id];\n        \n        //=> ADD TO QUEUE'S UPSTREAM\n        if(add){\n            q.add(arr);\n        }\n        //=> REMOVE FROM QUEUE'S UPSTREAM\n        else{\n            q.remove(arr);\n        }\n    }\n    //CREATE NEW QUEUE AND ADD DEPENDENCIES\n    else if(add){\n\n        q = public.queue(arr,{\n            id : id\n        });\n    }\n    //ERROR: CAN'T REMOVE FROM A QUEUE THAT DOES NOT EXIST\n    else{\n        public.debug(\"Cannot remove dependencies from a queue that does not exist.\");\n    }\n\n    return q;\n};\n\n\npublic.register_callback = function(name,fn){\n    public.registered_callbacks[name] = fn;\n};\n\n    \n/**\n * Converts a specially formatted array into a function.\n * \n * \n * @param {type} target\n * @returns {object}\n */\npublic.array_to_function = function(target){\n\n    //CLONE TARGET\n    var clone = target.slice(0);\n\n    var root_id = clone[0];\n    clone.splice(0,1);\n\n    var root;\n    if(public.list[root_id] && public.list[root_id].hasOwnProperty(\"value\")){\n        root = public.list[root_id].value; \n    }\n    else{\n        root = window[root_id];\n    }\n\n\n    if(typeof root === 'undefined'){\n        console.error(root_id + \" not found on window or public.list\");\n        debugger;\n    }\n\n\n    var x,y;\n    x = y = root;\n\n    //REMOVE LAST ARRAY ELEMENT (ARGS)\n    var l = clone.length;\n    var args = clone[l-1];\n\n    //POINTER TO A FUNCTION WILL HAVE AN ARRAY AS LAST ELEMENT\n    var end;\n    if(args instanceof Array){\n        end = l - 1;\n    }\n    //POINTER TO AN ARRAY WILL NOT\n    else{\n        end = l;\n    }\n\n    var parent;\n    for(var b=0; b < end; b++){\n        var key = clone[b];\n\n        if(b === end - 1 || l === 1){\n           parent = x; \n        }\n\n        if(typeof x[key] === 'undefined'){\n            console.error(\"Property '\"+key+\"' not found on object:\", x);\n            debugger;\n            return;\n        }\n        x = x[key];\n        y = x;\n    }    \n\n    return {\n        constructor : x\n        ,args : args\n        ,parent : parent\n    };\n}\n\n\n/**\n * Makes a shallow copy of an array. \n * Makes a copy of an object so long as it is JSON\n * \n * @param {array} array of donor objects, overwritten from right to left\n * @returns {object}\n */\npublic.naive_cloner = function(donors){\n    var o = {};\n    for(var a in donors){\n        for(var b in donors[a]){\n            if(donors[a][b] instanceof Array){\n                o[b] = donors[a][b].slice(0);\n            }\n            else if(typeof donors[a][b] === 'object'){\n                o[b] = JSON.parse(JSON.stringify(donors[a][b]));\n            }\n            else{\n                o[b] = donors[a][b];\n            }\n        }\n    }\n    return o;\n}\n        \n\n/**\n * Debugging method.\n * \n * @param {string|array} msg\n * @param {boolean} force_debug_mode   Forces debugger when set to true. \n * @returns {Boolean}\n */\npublic.debug = function(msg,force_debug_mode){\n    if(msg instanceof Array){\n        for(var i in msg){\n            console.error(\"ERROR-\"+i+\": \"+msg[i]);\n        }\n    }\n    else{\n        console.error(\"ERROR: \"+msg);\n    }\n    if(private.config.debug_mode == 1 || force_debug_mode){\n        debugger;\n    }\n    if(private.config.mode === 'browser'){\n        return false;\n    }\n    else{\n        process.exit();\n    }\n}\n\n\n////////////////////////////////////////\n//  PRIVATE VARIABLES\n////////////////////////////////////////\n\n\n/**\n * Configuration values.\n * \n * @type object\n */\nprivate.config = {\n    \n    basepath : null\n    ,document : null\n    ,debug_mode : 1\n    ,mode : (function(){\n        if(typeof process === 'object' && process + '' === '[object process]'){\n            // is node\n            return \"node\"\n        }\n        else{\n            // not node\n            return \"browser\"\n        }\n    }())\n};","public.deferred = function(options){\n    \n    if(!options || typeof options.id !== 'string'){\n        return public.debug(\"Must set id.\");\n    }\n    \n    if(!public.list[options.id]){\n        //CREATE NEW INSTANCE OF DEFERRED CLASS\n        var _o = private.deferred.factory(options);\n\n        //ACTIVATE DEFERRED\n        _o = private.deferred.activate(_o);\n    }\n    else{\n        _o = public.list[options.id];\n    }\n    \n    return _o;\n};\n\n\n\nprivate.deferred = {\n    \n    factory : function(options){\n        \n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A DEFERRED OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }\n    \n    \n    ,tpl : {\n        \n        model : \"deferred\"\n\n        //A COUNTER FOR AUT0-GENERATED PROMISE ID'S\n        ,settled : 0 \n        ,id : null\n        ,done_fired : 0\n\n        /**\n         * STATE CODES:\n         * ------------------\n         * -1   => SETTLING [EXECUTING CALLBACKS]\n         *  0   => PENDING\n         *  1   => RESOLVED / FULFILLED\n         *  2   => REJECTED \n         */\n        ,_state : 0\n        ,_timeout_id : null\n        ,value : []\n\n        ,error_q : []  \n        ,then_q : []\n        ,done_fn : null\n        ,reject_q : []\n\n        //PROMISE HAS OBSERVERS BUT DOES NOT OBSERVE OTHERS\n        ,downstream : {}\n        ,execution_history : []\n        ,overwritable : 0   //WHEN TRUE, ALLOWS RE-INIT [FOR UPGRADES TO A QUEUE]          \n        ,timeout : 5000\n\n        /**\n         * REMOTE\n         * \n         * REMOTE == 1  =>  [DEFAULT] Make http request for file\n         * \n         * REMOTE == 0  =>  Read file directly from the filesystem\n         * \n         * ONLY APPLIES TO SCRIPTS RUN UNDER NODE AS BROWSER HAS NO \n         * FILESYSTEM ACCESS\n         */\n        ,remote : 1\n\n        //ADDS TO MASTER LIST. ALWAYS DO THIS UNLESS UPGRADING A PROMISE TO A QUEUE\n        ,list : 1   \n\n        ,resolve : function(value){\n\n            if(this.settled !== 0){\n                public.debug(this.id + \" can't resolve. Only unsettled promise objects resolvable.\");\n            }\n\n            //SET STATE TO SETTLEMENT IN PROGRESS\n            this._state = -1; \n\n            //SET VALUE\n            this.value  = value;\n\n            //RUN RESOLVER BEFORE PROCEEDING\n            //EVEN IF THERE IS NO RESOLVER, SET IT TO FIRED WHEN CALLED\n            if(!this.resolver_fired){\n\n                this.resolver_fired = 1;\n\n                //FIRE THE RESOLVER IF SET\n                if(typeof this.resolver === 'function'){\n                    return private.deferred.hook_before_success.call(this,this.resolver,value);\n                }\n\n            }\n\n            //Allows .then chain to be held up by new async events created as the chain executes.\n            var v,fn,l=this.then_q.length;\n            for(var i = 0; i<l; i++){     \n\n                //REMOVE fn FROM THEN QUEUE. \n                //WHEN A PROMISE OBJ IS RETURNED, AND EXECUTION STOPPED WE\n                //DONT WANT TO REPEAAT A CALL TO SAME fn\n                fn = this.then_q.splice(0,1);\n\n                //CALL fn WITH PRECEDING RESULT OR IF NONE EXISTS, THE RESOLVER VALUE \n                v = private.deferred.hook_before_success.call(this,fn[0],v || this.value);\n                //v = fn[0].call(this, v || this.value);\n                \n                //SAVE fn TO EXECUTION HISTORY\n                this.execution_history.push(fn[0]);\n\n                //IF fn RETURNED AN UNSETTLED PROMISE\n                //WAIT FOR IT TO RESOLVE BEFORE PROCEEDING\n                //AND ADD THE RESULT TO THE END OF VALUE ARRAY\n                if(typeof v !== 'undefined' && v.then){\n                    \n                    //SET THE STATE BACK TO WAITING\n                    this._state = 0;\n                    \n                    //ADD IT TO QUEUE'S UPSTREAM\n                    this.add([v]);\n                    \n                    //END RESOLUTION ATTEMPT AND WAIT FOR v TO RESOLVE\n                    return;\n                }\n                //IF V RETURNED A VALUE MAKE IT THE NEW QUEUE VALUE\n                else if(typeof v !== 'undefined'){\n                    this.value = v;\n                }\n            }\n                        \n            //SET RETURN VALUE TO A GIVEN OBJECT PROPERTY\n            if(this.set){\n                //ARRAY IS TRANSORMED INTO A PATH TO POINT TO\n                if(this.set instanceof Array){\n                    //@todo make property of private to avoid external dependency\n                    var tgt = public.array_to_function(this.set);\n                    tgt.parent[tgt.args] = this.value;\n                }\n                //OTHErWISE ASSUMED TO BE AN OBJECT PROPERTY\n                else if (typeof this.set === 'function'){\n                    this.set(this.value);\n                }\n            }\n\n            //EXECUTE ANY GLOBALLY REGISTERED CALLBACKS\n            for (var i in public.registered_callbacks){\n                console.log(\"Orgy.js executing registered callback '\"+i+\"' on \" + this.id);\n                public.registered_callbacks[i].call(this);\n            }\n           \n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SET STATE TO RESOLVED\n            private.deferred._set_state.call(this,1);\n\n            this.done();\n                \n            return this;\n        }\n\n        ,reject : function(err){\n            \n            if(!(err instanceof Array)){\n                err = [err]\n            }\n            \n            err.unshift(\"REJECTED \"+this.model+\": '\"+this.id+\"'\");\n\n            public.debug(err);\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            //SAVE ERROR OBJECT TO MEMORY FOR USE IN CATCH CALLBACK\n            this.catch_params = err;\n\n            //SET STATE TO REJECTED\n            private.deferred._set_state.call(this,2);\n\n            //EXECUTE REJECTION QUEUE\n            for(var i in this.reject_q){\n                this.value.push(this.reject_q[i].apply(this,arguments));\n            }\n\n            return this;\n        }\n\n        ,then : function(fn,rejector){\n\n            switch(true){\n\n                //ERROR WAS PREVIOUSLY THROWN\n                case(this._state === 2):\n                    break;\n\n                case(this.done_fired === 1):\n                    public.debug(this.id+\" can't attach .then() after .done() has fired.\");\n                    break;\n\n                case(this.settled === 1 && this._state === 1 && !this.done_fired):\n                    var r = private.deferred.hook_before_success.call(this,fn,this.value);\n                    if(typeof r !== 'undefined'){\n                        this.value = r;\n                    }\n                    break;\n\n                default:\n\n                    //PUSH CALLBACK TO THEN QUEUE\n                    this.then_q.push(fn);\n\n                    //PUSH REJECT CALLBACK TO REJECTION QUEUE\n                    if(typeof rejector === 'function'){\n                        this.reject_q.push(rejector);\n                    }\n                    break;\n            }\n\n            return this;\n        }\n        \n        ,done : function(fn){\n            \n            if(this.done_fn === null){\n                if(fn){\n                    this.done_fn = fn\n                }\n            }\n            else if(fn){\n                public.debug(\"done() can only be called once.\");\n                return;\n            }\n            \n            if(this.settled === 1 && this._state === 1 && this.done_fn){\n                this.done_fired = 1;\n                private.deferred.hook_before_success.call(this,this.done_fn,this.value);\n            }\n        }\n\n    }\n\n    \n    ///////////////////////////////////////////////////\n    //  METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * Methods to run before then(), done() \n     * \n     * @param {type} fn\n     * @returns {undefined}\n     */\n    ,hook_before_success : function(fn,arr){\n        \n        return fn(arr,this);\n\n    }\n    \n    \n    /**\n     * \n     * @param {type} int\n     * @returns {undefined}\n     */\n    ,_set_state : function(int){\n\n        this._state = int;\n\n        //IF RESOLVED OR REJECTED, SETTLE\n        if(int === 1 || int === 2){\n            this.settled = 1;\n        }\n\n        private.deferred._signal_downstream.call(this,this);\n    }\n    \n    \n    ,_get_state : function(){\n        return this._state;\n    }\n\n\n    ,activate : function(obj){\n\n        //SET ID\n        if(!obj.id){\n            obj.id = private.deferred._make_id(obj.model);\n            obj.autonamed = true;\n        }\n\n        //MAKE SURE NAMING CONFLICT DOES NOT EXIST\n        if(public.list[obj.id] && !public.list[obj.id].overwritable){\n            public.debug(\"Tried to overwrite \"+obj.id+\" without overwrite permissions.\");\n            return public.list[obj.id];\n        }\n        else{\n            //SAVE TO MASTER LIST\n            public.list[obj.id] = obj;\n        }\n\n        //AUTO TIMEOUT\n        private.deferred.auto_timeout.call(obj);\n\n        return obj;\n    }\n\n\n    /**\n     * Sets the automatic timeout on a promise object.\n     * \n     * @param {integer} optional. timeout\n     * @returns {Boolean}\n     */\n    ,auto_timeout : function(timeout){\n\n        this.timeout = (typeof timeout === 'undefined') ? this.timeout : timeout;\n\n        //AUTO REJECT ON timeout\n        if(!this.type || this.type !== 'timer'){\n\n            //DELETE PREVIOUS TIMEOUT IF EXISTS\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n\n            if(typeof this.timeout === 'undefined'){\n                public.debug(this.id+\" Auto timeout this.timeout cannot be undefined.\");\n            }\n            else if (this.timeout === -1){\n                //NO AUTO TIMEOUT SET\n                return false;\n            }\n            var scope = this;\n\n            this._timeout_id = setTimeout(function(){\n                private.deferred.auto_timeout_cb.call(scope);\n            }, this.timeout);\n        }\n        else{\n            //@todo WHEN A TIMER, ADD DURATION TO ALL UPSTREAM AND LATERAL?\n        }\n        return true;\n    }\n\n\n    /**\n     * Callback for autotimeout. Declaration here avoids memory leak.\n     * \n     * @param {type} exp\n     * @returns {undefined}\n     */\n    ,auto_timeout_cb : function(){\n        \n        if(this._state !== 1){\n\n            //GET THE UPSTREAM ERROR ID\n            var msgs = [];\n            var scope = this;\n\n            var fn = function(obj){\n                if(obj._state !== 1){\n                    return obj.id\n                }\n                else{\n                    return false;\n                }\n            };\n\n            /**\n             * Run over a given object property recursively, applying callback until \n             * callback returns a non-false value.\n             */\n            var r = private.deferred.search_obj_recursively(this,'upstream',fn);\n            msgs.push(scope.id + \": rejected by auto timeout after \" + this.timeout + \"ms\");\n            msgs.push(\"Cause:\");\n            msgs.push(r);\n            return private.deferred.tpl.reject.call(this,msgs);\n            \n        }\n    }\n\n\n    ,error : function(cb){\n\n        //IF ERROR ALREADY THROWN, EXECUTE CB IMMEDIATELY\n        if(this._state === 2){\n            cb();\n        }\n        else{\n            this.error_q.push(cb);\n        }\n\n        return this;\n    }\n\n\n    ,_make_id : function(model){\n        return \"anonymous-\" + model + \"-\" + (public.i++);\n    }\n\n\n    /**\n     * Signals all downstream promises that private promise object's state has changed.\n     * \n     * \n     * @todo Since the same queue may have been assigned twice directly or \n     * indirectly via shared dependencies, make sure not to double resolve\n     * - which throws an error.\n     *     \n     * @returns {void}\n     */\n    ,_signal_downstream : function(target){\n\n        //MAKE SURE ALL DOWNSTREAM IS UNSETTLED\n        for(var i in target.downstream){\n            if(target.downstream[i].settled === 1){\n                public.debug(target.id + \" tried to settle promise \"+\"'\"+target.downstream[i].id+\"' that has already been settled.\");\n            }\n        }\n\n        //NOW THAT WE KNOW ALL DOWNSTREAM IS UNSETTLED, WE CAN IGNORE ANY\n        //SETTLED THAT RESULT AS A SIDE EFFECT TO ANOTHER SETTLEMENT\n        for (var i in target.downstream){\n            if(target.downstream[i].settled !== 1){\n                private.queue.receive_signal(target.downstream[i],target.id);\n            }\n        }\n    }\n    \n    \n    /**\n    * Run over a given object property recursively, applying callback until \n    * callback returns a non-false value.\n    * \n    * @param {object} obj      \n    * @param {string} propName          The property name of the array to bubble up\n    * @param {function} fn              The test callback to be applied to each object\n    * @param {array} breadcrumb         The breadcrumb through the chain of the first match\n    * @returns {mixed}\n    */\n    ,search_obj_recursively : function(obj,propName,fn,breadcrumb){\n      \n        if(typeof breadcrumb === 'undefined'){\n            breadcrumb = [obj.id];\n        }\n      \n        var r1;\n\n//debugger;\n        \n        for(var i in obj[propName]){\n\n            //RUN TEST\n            r1 = fn(obj[propName][i]);\n            \n            if(r1 !== false){\n            //MATCH RETURNED. RECURSE INTO MATCH IF HAS PROPERTY OF SAME NAME TO SEARCH\n                //CHECK THAT WE AREN'T CAUGHT IN A CIRCULAR LOOP\n                if(breadcrumb.indexOf(r1) !== -1){\n                    return public.debug([\n                        \"Circular condition in recursive search of obj property '\"\n                            +propName+\"'. Offending value: \"+r1\n                        ,breadcrumb\n                    ]);\n                }\n                \n                breadcrumb.push(r1);\n\n                if(obj[propName][i][propName]){\n                    return private.deferred.search_obj_recursively(obj[propName][i],propName,fn,breadcrumb);\n                }\n                \n                break;\n            }\n\n        }\n\n        return breadcrumb;\n    }\n    \n    \n    /**\n     * Converts a promise description into a promise.\n     * \n     * @param {type} obj\n     * @returns {undefined}\n     */\n    ,convert_to_promise : function(obj){\n \n        //IF ALREADY EXISTS, RETURN EXISTING\n        if(!obj.id){\n            if(obj.type === 'timer'){\n                obj.id = \"timer-\" + obj.timeout + \"-\"+public.i++;\n            }\n            else if(typeof obj.url === 'string'){\n                obj.id = obj.url.split(\"/\").pop();\n                //REMOVE .js FROM ID\n                if(obj.id.search(\".js\")!== -1){\n                    obj.id = obj.id.split(\".\");\n                    obj.id.pop();\n                    obj.id = obj.id.join(\".\");\n                }\n            }\n            else{\n                return public.debug([\"Dependency type '\"+obj.type+\"' requires id, but id undefined.\",obj]);\n            }\n        }\n\n        if(obj.type !== 'timer'){\n            //RETURN THE PROMISE IF IT ALREADY EXISTS\n            if(typeof public.list[obj.id] !== 'undefined'){\n                return public.list[obj.id];\n            }\n        }\n\n        //CONVERT DEPENDENCY TO PROMISE\n        var prom;\n        switch(true){\n\n            //EVENT\n            case(obj.type === 'event'):\n                prom = private.deferred._wrap_event(obj);\n                break;\n\n            //ALREADY A PROMISE\n            case(obj.type === 'deferred'):\n            case(obj.type === 'promise' || obj.then):   \n\n                switch(true){\n                    \n                    //OBJECT PROPERTY .promise EXPECTED TO RETURN A PROMISE\n                    case(typeof obj.promise === 'function'):\n                        if(obj.scope){\n                            prom = obj.promise.call(obj.scope);\n                        }\n                        else{\n                            prom = obj.promise();\n                        }\n                        break;\n                        \n                    //OBJECT IS A PROMISE\n                    case(obj.then):\n                        prom = obj;\n                        break;\n                    \n                    //OBJECT IS A REFERENCE TO A PROMISE\n                    case(typeof obj.id === 'string'):\n                        //GET EXISTING\n                        if(public.list[obj.id]){\n                            prom = public.list[obj.id];\n                        }\n                        //CREATE DEFERRED\n                        else{\n                            console.warn(\"Promise '\"+obj.id +\"': did not exist. Auto creating new deferred.\");\n                            prom = public.deferred({\n                                id : obj.id\n                            });\n                        };\n                        break;\n                        \n                    default:\n                        \n                }\n\n                //MAKE SURE IS PROMISE\n                if(typeof prom !== 'object' || !prom.then){\n                    console.error(\"Dependency labeled as a promise did not return a promise.\");\n                    console.error(obj);\n                    debugger;\n                    return false;\n                }\n                break;\n\n            case(obj.type === 'timer'):\n                prom = private.deferred._wrap_timer(obj);\n                break;\n\n            //XHR\n            default:\n                obj.type = obj.type || \"default\";\n                prom = private.deferred._wrap_xhr(obj);\n        }\n        \n        //INDEX PROMISE BY ID FOR FUTURE REFERENCING\n        public.list[obj.id] = prom;\n\n        return prom;\n    }\n    \n    \n    /**\n     * Converts a reference to a DOM event to a promise.\n     * Resolved on first event trigger.\n     * \n     * @todo remove jquery dependency\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_event : function(obj){\n\n        var def = public.deferred({\n            id : obj.id\n        });\n\n        //BROWSER\n        if(typeof document !== 'undefined' && typeof window !== 'undefined'){\n            \n            if(typeof $ !== 'function'){\n                var msg = 'window and document based events depend on jQuery';\n                console.error(msg);\n                debugger;\n                def.reject(msg);\n            }\n            else{\n                //For now, depend on jquery for IE8 DOMContentLoaded polyfill\n                switch(true){\n                    case(obj.id === 'ready' || obj.id === 'DOMContentLoaded'):\n                        $(document).ready(function(){\n                            def.resolve(1);\n                        });\n                        break;\n                    case(obj.id === 'load'):\n                        $(window).load(function(){\n                            def.resolve(1);\n                        });\n                        break;\n                    default:\n                        $(document).on(obj.id,\"body\",function(){\n                            def.resolve(1);\n                        });\n                }\n            }\n        }\n\n        return def;\n    }\n    \n\n    ,_wrap_timer : function(obj){\n\n        var prom = public.deferred(obj);\n        \n        (function(prom){\n            \n            var _start = new Date().getTime();      \n            setTimeout(function(){\n                var _end = new Date().getTime();\n                prom.resolve({\n                    start : _start\n                    ,end : _end\n                    ,elapsed : _end - _start\n                    ,timeout : obj.timeout\n                });\n            },obj.timeout);\n            \n        }(prom));\n        \n        return prom;\n    }\n    \n    \n    /**\n     * Creates a deferred object that depends on the loading of a file.\n     * \n     * @param {object} obj\n     * @returns {object} deferred object\n     */\n    ,_wrap_xhr : function(dep){\n        \n        \n        var required = [\"id\",\"url\"];\n        for(var i in required){\n            if(!dep[required[i]]){\n                return public.debug(\"File requests converted to promises require: \" + required[i]);\n            }\n        }\n\n        \n        //IF PROMISE FOR THIS URL ALREADY EXISTS, RETURN IT\n        if(public.list[dep.id]){\n            return public.list[dep.id];\n        }\n        \n\n        //CONVERT TO DEFERRED:\n        var deferred;\n        deferred = public.deferred(dep);\n        deferred = private.deferred.attach_xhr(deferred,dep);\n        return deferred;\n    }\n    \n    \n    ,load_script : function(deferred,data){\n\n        //CHECK IF LAST SCRIPT LOADED RETURNED A MODULE\n        if(public.modules_exported.length > public.modules_loaded){\n    \n            //INCREMENT MODULES LOADED\n            public.modules_loaded ++;\n            \n            //GET LAST MODULE EXPORTED\n            var m = public.modules_exported[public.modules_exported.length-1];\n\n            //IF RESOLVER EXISTS, LOAD ONCE RESOLVED\n            if(m.__dependencies instanceof Array){\n                \n                //AUTO SET ID PROPERTY ON MODULE\n                m.__id = deferred.id;\n                \n                public.queue(m.__dependencies || [],{\n                    id : m.__id\n                    ,resolver : (function(){\ndebugger;\n                        if(typeof m.__resolver === 'function'){\n                            return function(){\n                                m.__resolver.call(m,m,deferred);\n                            }\n                        }\n                        else{\n                            return null;\n                        }\n                    }())\n                });\n            }\n            else{\ndebugger;\n                //ELSE RESOLVE NOW\n                deferred.resolve(m)\n            }\n        }\n        else{\ndebugger;    \n            deferred.resolve(data);\n        }\n        \n    }\n    \n    \n    /**\n     *    \n     * \n     * @param {type} deferred\n     * @param {type} dep\n     * \n     * dep:\n     * =========\n     *                  \n     * <fs> boolean. Filesystem. Whether to loda the file from server filesytem or via http server\n     *                  \n     * @returns {unresolved}\n     */\n    ,attach_xhr : function(deferred,dep){\n\n        //DEFAULT ALL TO RESOLVE-ON-LOAD\n        dep.rol = (typeof dep.rol !== 'undefined') ? dep.rol : 1;\n\n        //BROWSER\n        if(typeof process !== 'object' || process + '' !== '[object process]'){\n            \n            this.head = this.head || document.getElementsByTagName(\"head\")[0] || document.documentElement;\n\n            switch(true){\n\n                case(dep.type==='script'):\n\n                    var node = document.createElement(\"script\");\n                    node.type = 'text/javascript';\n                    node.setAttribute(\"src\",dep.url);\n                    node.setAttribute(\"id\",dep.id);\n                    \n                    (function(node,dep,deferred){\n                        node,dep,deferred;\n                        node.onload = node.onreadystatechange = function(){\n\n                            private.deferred.load_script(deferred,node);\n                        };\n                        node.onerror = function(){\n                            deferred.reject(\"Failed to load path: \" + dep.url);\n                        };\n                    }(node,dep,deferred))\n                    \n                    //put scripts before <base> elements, after <meta>\n                    this.head.appendChild(node);\n                    break;\n                    \n                case(dep.type==='css' || dep.type==='link'):\n\n                    var node = document.createElement(\"link\");\n                    node.setAttribute(\"href\",dep.url);\n                    node.setAttribute(\"type\",\"text/css\");\n                    node.setAttribute(\"rel\",\"stylesheet\");\n                    \n                    if(node.onload){\n                        (function(node,dep,deferred){\n                            node.onload = node.onreadystatechange = function(){\n                               deferred.resolve(node);\n                           };\n\n                           node.onerror = function(){\n                               deferred.reeject(\"Failed to load path: \" + dep.url);\n                           }\n\n                        }(node,dep,deferred));\n                        \n                        this.head.appendChild(node);\n                        break;\n                    }\n                    else{\n                        //ADD NODE BUT MAKE XHR REQUEST TO CHECK FILE RECEIVED\n                        this.head.appendChild(node);\n                    }\n\n                case(dep.type==='json'):\n                default:\n                    \n                    var r;\n                    var req = new XMLHttpRequest();\n                    req.open('GET', dep.url, true);\n\n                    if(typeof dep.show_messages !== 'undefined'){\n                        req.setRequestHeader('show-messages', dep.show_messages);\n                    }\n                    if(typeof dep.return_packet !== 'undefined'){\n                        req.setRequestHeader('return-packet', dep.return_packet);\n                    }\n\n                    (function(dep,deferred){\n                        req.onreadystatechange = function() {\n                            if (req.readyState === 4) {\n                                if(req.status === 200){\n                                    r = req.responseText;\n                                    if(dep.type === 'json'){\n                                        try{\n                                            r = JSON.parse(r);\n                                        }\n                                        catch(e){\n                                            public.debug([\"Could not decode JSON\",dep.url,r]);\n\n                                        }\n                                    }\n                                    //WE WANT TO RESOLVE WITH DOM NODE FOR CSS FILES\n                                    deferred.resolve(node || r);\n                                }\n                                else{\n                                    deferred.reject(\"Error loading \"+dep.url);\n                                }\n                            }\n                        };\n                    }(dep,deferred));\n\n                    req.send(null);\n            }\n        }\n        //NODEJS\n        else{\n\n            function process_result(deferred,data,dep){\n\n                switch(true){\n\n                    case(dep.type==='script'):\n                        private.deferred.load_script(deferred,data);\n                        break;\n\n                    case(dep.type === 'json'):\n                        data = JSON.parse(data);\n                        deferred.resolve(data);\n                        break;\n                        \n                    default:\n                        deferred.resolve(data);\n                        \n                }\n            }     \n            \n            if(dep.remote){\n                var request = require('request');\n                request.get(dep.url, function (error, response, body) {\n                    if (!error && response.statusCode == 200) {\n                        process_result(deferred,body,dep);\n                    }\n                });\n\n            }\n            else{\n                \n                var path = (private.config.basepath !== null) ? private.config.basepath + dep.url : dep.url;\n\n                //DON'T GET SCRIPTS AS TEXT\n                if(dep.type === 'script'){\n                    var data = require(path);\n                    private.deferred.load_script(deferred,data);\n                }\n                //DON'T GET CSS, JUST ADD NODE\n                else if(dep.type === 'css'){\n                    \n                    if(private.config.document !== null){\n                        var node = private.config.document('head').append('<link rel=\"stylesheet\" href=\"'+dep.url+'\" type=\"text/css\" />');\n                        deferred.resolve(node);\n                    }\n                    else{\n                        return public.debug([dep.url,\"Must pass html document to Orgy.config() before attempting to add DOM nodes [i.e. css] as dependencies.\"]);\n                    }\n                }\n                else{\n                    \n                    var fs = require('fs');\n\n                    (function(deferred,dep){\n                        \n                        fs.readFile(path, 'utf8', function (err, data) {\n\n                            if (err){\n                                public.debug([\"File \" + dep.url + \" not found @ local path '\" + path +\"'\",\"CWD: \"+process.cwd()]);\n                                process.exit();\n                            }\n\n                            process_result(deferred,data,dep);\n                        });\n\n                    }(deferred,dep));\n                    \n                }\n                \n            }\n\n        }\n        \n        return deferred;\n    }\n};","public.queue = function(deps,options){\n\n    var _o;\n    if(!(deps instanceof Array)){\n        return public.debug(\"Queue dependencies must be an array.\");\n    }\n    \n    if(!options || !options.id){\n        return public.debug(\"Queues require an id.\");\n    }\n    \n    //DOES NOT ALREADY EXIST\n    if(!public.list[options.id]){\n        \n        //CREATE NEW QUEUE OBJECT\n        var _o = private.queue.factory(options);\n\n        //ACTIVATE QUEUE\n        _o = private.queue.activate(_o,options,deps);\n\n    }\n    //ALREADY EXISTS\n    else {\n        \n        _o = public.list[options.id];\n        \n        if(_o.model !== 'queue'){\n        //MATCH FOUND BUT NOT A QUEUE, UPGRADE TO ONE\n\n            options.overwritable = 1;\n\n            _o = private.queue.upgrade(_o,options,deps);\n        }\n        else{\n            \n            //OVERWRITE ANY EXISTING OPTIONS\n            for(var i in options){\n                _o[i] = options[i];\n            }\n            \n            //ADD ADDITIONAL DEPENDENCIES IF NOT RESOLVED\n            if(deps.length > 0){\n                private.queue.tpl.add.call(_o,deps);\n            }\n            \n        }\n        \n        //RESUME RESOLUTION UNLESS SPECIFIED OTHERWISE\n        _o.halt_resolution = (typeof options.halt_resolution !== 'undefined') ?\n        options.halt_resolution : 0;\n    }\n    \n    return _o;\n};\n\n\nprivate.queue = {\n    \n    \n    factory : function(options){\n\n        //CREATE A NEW QUEUE OBJECT\n        var _o = public.naive_cloner([\n            private.deferred.tpl\n            ,private.queue.tpl\n            ,options\n        ]);\n\n        //YOU NOW HAVE A QUEUE OBJECT THAT IS INACTIVE ON THE WAITLIST\n        return _o;\n    }    \n    \n    \n    /**\n     * Template object for all queues\n     * \n     * @type object\n     */\n    ,tpl : {\n        \n        model : 'queue'\n\n\n        //SET TRUE AFTER RESOLVER FIRED\n        ,resolver_fired : 0\n\n\n        //PREVENTS A QUEUE FROM RESOLVING EVEN IF ALL DEPENDENCIES MET\n        //PURPOSE: PREVENTS QUEUES CREATED BY ASSIGNMENT FROM RESOLVING \n        //BEFORE THEY ARE FORMALLY INSTANTIATED\n        ,halt_resolution : 0\n        \n\n        //USED TO CHECK STATE, ENSURES ONE COPY\n        ,upstream : {}\n        \n        \n        //USED RETURN VALUES, ENSURES ORDER\n        ,dependencies : []\n\n\n        ///////////////////////////////////////////////////\n        //  PUBLIC METHODS\n        ///////////////////////////////////////////////////\n\n\n        /**\n         * Add list of dependencies to a queue's upstream array.\n         * \n         * The queue will resolve once all the promises in its \n         * upstream array are resolved.\n         * \n         * When public.config.debug == 1, method will test each dependency is not\n         * previously scheduled to resolve downstream from the target, in which \n         * case it would never resolve because its upstream depends on it.\n         * \n         * @param {array} array of dependencies to add\n         * @returns {array} upstream\n         */\n        ,add : function(arr){\n\n            try{\n                if(arr.length === 0) return this.upstream;\n            }\n            catch(err){\n                public.debug(err);\n            }\n\n            //IF NOT PENDING, DO NOT ALLOW TO ADD\n            if(this._state !== 0){\n                return public.debug(\"Cannot add list to queue id:'\"+this.id\n                +\"'. Queue settled/in the process of being settled.\");\n            }\n\n            for(var a in arr){\n                \n                switch(true){\n\n                    //CHECK IF ID OF EXISTING PROMISE\n                    case(typeof arr[a] === 'string'):\n                        if(!public.list[arr[a]]){\n                            return public.debug(arr[a]+\"' does not exist so cannot be added to a queue.\");\n                        }\n                        else{\n                            arr[a] = public.list[arr[a]];\n                        }\n                        break;\n\n                    //IF NOT, ATTEMPT TO CONVERT IT TO A PROMISE\n                    case(typeof arr[a] === 'object' && typeof arr[a].then !== 'function'):\n                        arr[a] = private.deferred.convert_to_promise(arr[a]);\n                        break;\n\n                    //REF IS A PROMISE.\n                    case(typeof arr[a].then === 'function'):\n                        break;\n\n                    default:\n                        console.error(\"Object could not be converted to promise.\");\n                        console.error(arr[a]);\n                        debugger;\n                        continue;\n                }\n\n                //must check the target to see if the dependency exists in its downstream\n                for(var b in this.downstream){\n                    if(b === arr[a].id){\n                        return public.debug(\"Error adding upstream dependency '\"+arr[a].id+\"' to queue\"+\" '\"+this.id+\"'.\\n Promise object for '\"+arr[a].id+\"' is scheduled to resolve downstream from queue '\"+this.id+\"' so it can't be added upstream.\");\n                    }\n                }\n\n                //ADD TO UPSTREAM, DOWNSTREAM, DEPENDENCIES\n                this.upstream[arr[a].id] = arr[a];\n                arr[a].downstream[this.id] = this;\n                this.dependencies.push(arr[a]);\n\n            }\n\n            return this.upstream;\n        }\n\n\n        /**\n         * Remove list from a queue.\n         * \n         * @param {array} arr\n         * @returns {array} array of list the queue is upstream\n         */\n        ,remove : function(arr){\n\n            //IF NOT PENDING, DO NOT ALLOW REMOVAL\n            if(this._state !== 0){\n                console.error(\"Cannot remove list from queue id:'\"+this.id+\"'. Queue settled/in the process of being settled.\");\n                return false;\n            }\n\n            for(var a in arr){\n                if(this.upstream[arr[a].id]){\n                    delete this.upstream[arr[a].id];\n                    delete arr[a].downstream[this.id];\n                }\n            }\n        }\n\n\n        /**\n         * Resets an existing,settled queue back to waiting state.\n         * Clears out the downstream.\n         * Fails if not settled.\n         * \n         * @returns {obj}\n         */\n        ,reset : function(options){\n\n            if(this.settled !== 1 || this._state !== 1){\n                public.debug(\"Can only reset a queue settled without errors.\");\n            }\n\n            options = options || {};\n\n            this.settled = 0;\n            this._state = 0; \n            this.resolver_fired = 0;\n            this.done_fired = 0;\n\n            //REMOVE AUTO TIMEOUT TIMER\n            if(this._timeout_id){\n                clearTimeout(this._timeout_id);\n            }\n            \n            //CLEAR OUT THE DOWNSTREAM\n            this.downstream = {};\n            this.dependencies = [];\n\n            //SET NEW AUTO TIMEOUT\n            private.deferred.auto_timeout.call(this,options.timeout);\n\n            //POINTLESS - WILL JUST IMMEDIATELY RESOLVE SELF\n            //this.check_self()\n\n            return this;\n        }\n        \n        \n        /**\n         * Cauaes a queue to look over its dependencies and see if it \n         * can be resolved.\n         * \n         * This is done automatically by each dependency that loads,\n         * so is not needed unless:\n         * \n         * -debugging\n         * \n         * -the queue has been reset and no new\n         * dependencies were since added.\n         * \n         * @returns {int} State of the queue.\n         */\n        ,check_self : function(){\n            private.queue.receive_signal(this,this.id);\n            return this._state;\n        }\n    }\n    \n    \n    ///////////////////////////////////////////////////\n    //  PRIVATE METHODS\n    ///////////////////////////////////////////////////\n    \n    \n    /**\n     * Activates a queue object.\n     * \n     * @param {object} o\n     * @param {object} options\n     * @param {array} deps\n     * @returns {object} queue\n     */\n    ,activate : function(o,options,deps){\n        \n        //ACTIVATE AS A DEFERRED\n        o = private.deferred.activate(o);\n\n        //ADD ANY DEFERREDS TO QUEUE\n        private.queue.tpl.add.call(o,deps);\n\n        //SEE IF CAN BE IMMEDIATELY RESOLVED BY CHECKING UPSTREAM\n        private.queue.receive_signal(o,o.id);\n        \n        //ASSIGN THIS QUEUE UPSTREAM TO OTHER QUEUES\n        if(o.assign){\n            for(var a in o.assign){\n                public.assign(o.assign[a],[o],true);\n            }\n        }\n        \n        return o;\n    }\n    \n    \n    /**\n    * A \"signal\" here causes a queue to look through each item in its upstream and \n    * check to see if all are resolved. \n    * \n    * Signals can only be received by a queue itself or a promise/deferred/queue\n    * in its upstream.\n    * \n    * @param {string} from_id\n    * @returns {void}\n    */\n    ,receive_signal : function(target,from_id){\n\n        if(target.halt_resolution === 1) return;\n\n       //MAKE SURE THE SIGNAL WAS FROM A PROMISE BEING LISTENED TO\n       //BUT ALLOW SELF STATUS CHECK\n       if(from_id !== target.id && !target.upstream[from_id]){\n           console.error(from_id + \" can't signal \" + target.id + \" because not in upstream.\");\n           debugger;\n           return;\n       }\n       //RUN THROUGH QUEUE OF OBSERVING PROMISES TO SEE IF ALL DONE\n       else{\n           var status = 1;\n           for(var i in target.upstream){\n               //SETS STATUS TO 0 IF ANY OBSERVING HAVE FAILED, BUT NOT IF PENDING OR RESOLVED\n               if(target.upstream[i]._state !== 1) {\n                   status = target.upstream[i]._state;\n                   break;\n               }\n           }\n       }\n\n       //RESOLVE QUEUE IF UPSTREAM FINISHED\n       if(status === 1){\n           \n            //GET RETURN VALUES PER DEPENDENCIES, WHICH SAVES ORDER AND \n            //REPORTS DUPLICATES\n            var values = [];\n            for(var i in target.dependencies){\n                values.push(target.dependencies[i].value);\n            }\n\n            private.deferred.tpl.resolve.call(target,values);\n       }\n\n       if(status === 2){\n           var err = [\n               target.id+\" dependency '\"+target.upstream[i].id + \"' was rejected.\"\n               ,target.upstream[i].arguments\n           ];\n           private.deferred.tpl.reject.apply(target,err);\n       }\n    }\n\n\n    /**\n    * Upgrades a promise object to a queue.\n    * \n    * @param {object} prom\n    * @param {object} options\n    * @param {array} dependencies\n    * @returns {object} queue object\n    */\n    ,upgrade : function(obj,options,deps){\n\n        if(obj.settled !== 0 || (obj.model !== 'promise' && obj.model !== 'deferred')){\n            return public.debug('Can only upgrade unsettled promise or deferred into a queue.');\n        }\n        \n       //GET A NEW QUEUE OBJECT AND MERGE IN\n        var _o = public.naive_cloner([\n            private.queue.tpl\n            ,options\n        ]);\n        \n        for(var i in _o){\n           obj[i] = _o[i];\n        }\n        \n        delete _o;\n\n        //CREATE NEW INSTANCE OF QUEUE\n        obj = private.queue.activate(obj,options,deps);\n\n        //RETURN QUEUE OBJECT\n        return obj;\n    }\n    \n};","public.cast = function(obj){\n            \n    var required = [\"then\",\"error\",\"id\"];\n    for(var i in required){\n        if(!obj[required[i]]){\n            return public.debug(\"Castable objects require: \" + required[i]);\n        }\n    }\n\n    //GET A BLANK DEFERRED TO PLAY WITH\n    var deferred = public.deferred({\n        id : obj.id\n    });\n\n    //CREATE RESOLVER [ASYNC]\n    var resolver = function(){\n        deferred.resolve.call(deferred,arguments[0]);\n    };\n\n    //SET RESOLVER\n    obj.then(resolver);\n\n    //CREATE REJECTOR [ASYNC]\n    var err = function(err){\n        deferred.reject(err);\n    };\n\n    //SET REJECTOR\n    obj.error(err);\n\n    //RETURN THE DEFERRED\n    return deferred;\n}\n        ","if(typeof process === 'object' && process + '' === '[object process]'){\n    // is node\n    module.exports = public;\n}\nelse{\n    // not node\n    Orgy = public;\n}"]}